{"ast":null,"code":"/* eslint-disable no-use-before-define */\n\n/**\n * Base class for inheritance.\n */\nexport class Base {\n  /**\n   * Extends this object and runs the init method.\n   * Arguments to create() will be passed to init().\n   *\n   * @return {Object} The new object.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     var instance = MyType.create();\n   */\n  static create(...args) {\n    return new this(...args);\n  }\n  /**\n   * Copies properties into this object.\n   *\n   * @param {Object} properties The properties to mix in.\n   *\n   * @example\n   *\n   *     MyType.mixIn({\n   *         field: 'value'\n   *     });\n   */\n\n\n  mixIn(properties) {\n    return Object.assign(this, properties);\n  }\n  /**\n   * Creates a copy of this object.\n   *\n   * @return {Object} The clone.\n   *\n   * @example\n   *\n   *     var clone = instance.clone();\n   */\n\n\n  clone() {\n    const clone = new this.constructor();\n    Object.assign(clone, this);\n    return clone;\n  }\n\n}\n/**\n * An array of 32-bit words.\n *\n * @property {Array} words The array of 32-bit words.\n * @property {number} sigBytes The number of significant bytes in this word array.\n */\n\nexport class WordArray extends Base {\n  /**\n   * Initializes a newly created word array.\n   *\n   * @param {Array} words (Optional) An array of 32-bit words.\n   * @param {number} sigBytes (Optional) The number of significant bytes in the words.\n   *\n   * @example\n   *\n   *     var wordArray = CryptoJS.lib.WordArray.create();\n   *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);\n   *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);\n   */\n  constructor(words = [], sigBytes = words.length * 4) {\n    super();\n    let typedArray = words; // Convert buffers to uint8\n\n    if (typedArray instanceof ArrayBuffer) {\n      typedArray = new Uint8Array(typedArray);\n    } // Convert other array views to uint8\n\n\n    if (typedArray instanceof Int8Array || typedArray instanceof Uint8ClampedArray || typedArray instanceof Int16Array || typedArray instanceof Uint16Array || typedArray instanceof Int32Array || typedArray instanceof Uint32Array || typedArray instanceof Float32Array || typedArray instanceof Float64Array) {\n      typedArray = new Uint8Array(typedArray.buffer, typedArray.byteOffset, typedArray.byteLength);\n    } // Handle Uint8Array\n\n\n    if (typedArray instanceof Uint8Array) {\n      // Shortcut\n      const typedArrayByteLength = typedArray.byteLength; // Extract bytes\n\n      const _words = [];\n\n      for (let i = 0; i < typedArrayByteLength; i += 1) {\n        _words[i >>> 2] |= typedArray[i] << 24 - i % 4 * 8;\n      } // Initialize this word array\n\n\n      this.words = _words;\n      this.sigBytes = typedArrayByteLength;\n    } else {\n      // Else call normal init\n      this.words = words;\n      this.sigBytes = sigBytes;\n    }\n  }\n  /**\n   * Creates a word array filled with random bytes.\n   *\n   * @param {number} nBytes The number of random bytes to generate.\n   *\n   * @return {WordArray} The random word array.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     var wordArray = CryptoJS.lib.WordArray.random(16);\n   */\n\n\n  static random(nBytes) {\n    const words = [];\n\n    const r = m_w => {\n      let _m_w = m_w;\n      let _m_z = 0x3ade68b1;\n      const mask = 0xffffffff;\n      return () => {\n        _m_z = 0x9069 * (_m_z & 0xFFFF) + (_m_z >> 0x10) & mask;\n        _m_w = 0x4650 * (_m_w & 0xFFFF) + (_m_w >> 0x10) & mask;\n        let result = (_m_z << 0x10) + _m_w & mask;\n        result /= 0x100000000;\n        result += 0.5;\n        return result * (Math.random() > 0.5 ? 1 : -1);\n      };\n    };\n\n    for (let i = 0, rcache; i < nBytes; i += 4) {\n      const _r = r((rcache || Math.random()) * 0x100000000);\n\n      rcache = _r() * 0x3ade67b7;\n      words.push(_r() * 0x100000000 | 0);\n    }\n\n    return new WordArray(words, nBytes);\n  }\n  /**\n   * Converts this word array to a string.\n   *\n   * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex\n   *\n   * @return {string} The stringified word array.\n   *\n   * @example\n   *\n   *     var string = wordArray + '';\n   *     var string = wordArray.toString();\n   *     var string = wordArray.toString(CryptoJS.enc.Utf8);\n   */\n\n\n  toString(encoder = Hex) {\n    return encoder.stringify(this);\n  }\n  /**\n   * Concatenates a word array to this word array.\n   *\n   * @param {WordArray} wordArray The word array to append.\n   *\n   * @return {WordArray} This word array.\n   *\n   * @example\n   *\n   *     wordArray1.concat(wordArray2);\n   */\n\n\n  concat(wordArray) {\n    // Shortcuts\n    const thisWords = this.words;\n    const thatWords = wordArray.words;\n    const thisSigBytes = this.sigBytes;\n    const thatSigBytes = wordArray.sigBytes; // Clamp excess bits\n\n    this.clamp(); // Concat\n\n    if (thisSigBytes % 4) {\n      // Copy one byte at a time\n      for (let i = 0; i < thatSigBytes; i += 1) {\n        const thatByte = thatWords[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;\n        thisWords[thisSigBytes + i >>> 2] |= thatByte << 24 - (thisSigBytes + i) % 4 * 8;\n      }\n    } else {\n      // Copy one word at a time\n      for (let i = 0; i < thatSigBytes; i += 4) {\n        thisWords[thisSigBytes + i >>> 2] = thatWords[i >>> 2];\n      }\n    }\n\n    this.sigBytes += thatSigBytes; // Chainable\n\n    return this;\n  }\n  /**\n   * Removes insignificant bits.\n   *\n   * @example\n   *\n   *     wordArray.clamp();\n   */\n\n\n  clamp() {\n    // Shortcuts\n    const {\n      words,\n      sigBytes\n    } = this; // Clamp\n\n    words[sigBytes >>> 2] &= 0xffffffff << 32 - sigBytes % 4 * 8;\n    words.length = Math.ceil(sigBytes / 4);\n  }\n  /**\n   * Creates a copy of this word array.\n   *\n   * @return {WordArray} The clone.\n   *\n   * @example\n   *\n   *     var clone = wordArray.clone();\n   */\n\n\n  clone() {\n    const clone = super.clone.call(this);\n    clone.words = this.words.slice(0);\n    return clone;\n  }\n\n}\n/**\n * Hex encoding strategy.\n */\n\nexport const Hex = {\n  /**\n   * Converts a word array to a hex string.\n   *\n   * @param {WordArray} wordArray The word array.\n   *\n   * @return {string} The hex string.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);\n   */\n  stringify(wordArray) {\n    // Shortcuts\n    const {\n      words,\n      sigBytes\n    } = wordArray; // Convert\n\n    const hexChars = [];\n\n    for (let i = 0; i < sigBytes; i += 1) {\n      const bite = words[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;\n      hexChars.push((bite >>> 4).toString(16));\n      hexChars.push((bite & 0x0f).toString(16));\n    }\n\n    return hexChars.join('');\n  },\n\n  /**\n   * Converts a hex string to a word array.\n   *\n   * @param {string} hexStr The hex string.\n   *\n   * @return {WordArray} The word array.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     var wordArray = CryptoJS.enc.Hex.parse(hexString);\n   */\n  parse(hexStr) {\n    // Shortcut\n    const hexStrLength = hexStr.length; // Convert\n\n    const words = [];\n\n    for (let i = 0; i < hexStrLength; i += 2) {\n      words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << 24 - i % 8 * 4;\n    }\n\n    return new WordArray(words, hexStrLength / 2);\n  }\n\n};\n/**\n * Latin1 encoding strategy.\n */\n\nexport const Latin1 = {\n  /**\n   * Converts a word array to a Latin1 string.\n   *\n   * @param {WordArray} wordArray The word array.\n   *\n   * @return {string} The Latin1 string.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);\n   */\n  stringify(wordArray) {\n    // Shortcuts\n    const {\n      words,\n      sigBytes\n    } = wordArray; // Convert\n\n    const latin1Chars = [];\n\n    for (let i = 0; i < sigBytes; i += 1) {\n      const bite = words[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;\n      latin1Chars.push(String.fromCharCode(bite));\n    }\n\n    return latin1Chars.join('');\n  },\n\n  /**\n   * Converts a Latin1 string to a word array.\n   *\n   * @param {string} latin1Str The Latin1 string.\n   *\n   * @return {WordArray} The word array.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);\n   */\n  parse(latin1Str) {\n    // Shortcut\n    const latin1StrLength = latin1Str.length; // Convert\n\n    const words = [];\n\n    for (let i = 0; i < latin1StrLength; i += 1) {\n      words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << 24 - i % 4 * 8;\n    }\n\n    return new WordArray(words, latin1StrLength);\n  }\n\n};\n/**\n * UTF-8 encoding strategy.\n */\n\nexport const Utf8 = {\n  /**\n   * Converts a word array to a UTF-8 string.\n   *\n   * @param {WordArray} wordArray The word array.\n   *\n   * @return {string} The UTF-8 string.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);\n   */\n  stringify(wordArray) {\n    try {\n      return decodeURIComponent(escape(Latin1.stringify(wordArray)));\n    } catch (e) {\n      throw new Error('Malformed UTF-8 data');\n    }\n  },\n\n  /**\n   * Converts a UTF-8 string to a word array.\n   *\n   * @param {string} utf8Str The UTF-8 string.\n   *\n   * @return {WordArray} The word array.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);\n   */\n  parse(utf8Str) {\n    return Latin1.parse(unescape(encodeURIComponent(utf8Str)));\n  }\n\n};\n/**\n * Abstract buffered block algorithm template.\n *\n * The property blockSize must be implemented in a concrete subtype.\n *\n * @property {number} _minBufferSize\n *\n *     The number of blocks that should be kept unprocessed in the buffer. Default: 0\n */\n\nexport class BufferedBlockAlgorithm extends Base {\n  constructor() {\n    super();\n    this._minBufferSize = 0;\n  }\n  /**\n   * Resets this block algorithm's data buffer to its initial state.\n   *\n   * @example\n   *\n   *     bufferedBlockAlgorithm.reset();\n   */\n\n\n  reset() {\n    // Initial values\n    this._data = new WordArray();\n    this._nDataBytes = 0;\n  }\n  /**\n   * Adds new data to this block algorithm's buffer.\n   *\n   * @param {WordArray|string} data\n   *\n   *     The data to append. Strings are converted to a WordArray using UTF-8.\n   *\n   * @example\n   *\n   *     bufferedBlockAlgorithm._append('data');\n   *     bufferedBlockAlgorithm._append(wordArray);\n   */\n\n\n  _append(data) {\n    let m_data = data; // Convert string to WordArray, else assume WordArray already\n\n    if (typeof m_data === 'string') {\n      m_data = Utf8.parse(m_data);\n    } // Append\n\n\n    this._data.concat(m_data);\n\n    this._nDataBytes += m_data.sigBytes;\n  }\n  /**\n   * Processes available data blocks.\n   *\n   * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.\n   *\n   * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.\n   *\n   * @return {WordArray} The processed data.\n   *\n   * @example\n   *\n   *     var processedData = bufferedBlockAlgorithm._process();\n   *     var processedData = bufferedBlockAlgorithm._process(!!'flush');\n   */\n\n\n  _process(doFlush) {\n    let processedWords; // Shortcuts\n\n    const {\n      _data: data,\n      blockSize\n    } = this;\n    const dataWords = data.words;\n    const dataSigBytes = data.sigBytes;\n    const blockSizeBytes = blockSize * 4; // Count blocks ready\n\n    let nBlocksReady = dataSigBytes / blockSizeBytes;\n\n    if (doFlush) {\n      // Round up to include partial blocks\n      nBlocksReady = Math.ceil(nBlocksReady);\n    } else {\n      // Round down to include only full blocks,\n      // less the number of blocks that must remain in the buffer\n      nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);\n    } // Count words ready\n\n\n    const nWordsReady = nBlocksReady * blockSize; // Count bytes ready\n\n    const nBytesReady = Math.min(nWordsReady * 4, dataSigBytes); // Process blocks\n\n    if (nWordsReady) {\n      for (let offset = 0; offset < nWordsReady; offset += blockSize) {\n        // Perform concrete-algorithm logic\n        this._doProcessBlock(dataWords, offset);\n      } // Remove processed words\n\n\n      processedWords = dataWords.splice(0, nWordsReady);\n      data.sigBytes -= nBytesReady;\n    } // Return processed words\n\n\n    return new WordArray(processedWords, nBytesReady);\n  }\n  /**\n   * Creates a copy of this object.\n   *\n   * @return {Object} The clone.\n   *\n   * @example\n   *\n   *     var clone = bufferedBlockAlgorithm.clone();\n   */\n\n\n  clone() {\n    const clone = super.clone.call(this);\n    clone._data = this._data.clone();\n    return clone;\n  }\n\n}\n/**\n * Abstract hasher template.\n *\n * @property {number} blockSize\n *\n *     The number of 32-bit words this hasher operates on. Default: 16 (512 bits)\n */\n\nexport class Hasher extends BufferedBlockAlgorithm {\n  constructor(cfg) {\n    super();\n    this.blockSize = 512 / 32;\n    /**\n     * Configuration options.\n     */\n\n    this.cfg = Object.assign(new Base(), cfg); // Set initial values\n\n    this.reset();\n  }\n  /**\n   * Creates a shortcut function to a hasher's object interface.\n   *\n   * @param {Hasher} SubHasher The hasher to create a helper for.\n   *\n   * @return {Function} The shortcut function.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);\n   */\n\n\n  static _createHelper(SubHasher) {\n    return (message, cfg) => new SubHasher(cfg).finalize(message);\n  }\n  /**\n   * Creates a shortcut function to the HMAC's object interface.\n   *\n   * @param {Hasher} SubHasher The hasher to use in this HMAC helper.\n   *\n   * @return {Function} The shortcut function.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);\n   */\n\n\n  static _createHmacHelper(SubHasher) {\n    return (message, key) => new HMAC(SubHasher, key).finalize(message);\n  }\n  /**\n   * Resets this hasher to its initial state.\n   *\n   * @example\n   *\n   *     hasher.reset();\n   */\n\n\n  reset() {\n    // Reset data buffer\n    super.reset.call(this); // Perform concrete-hasher logic\n\n    this._doReset();\n  }\n  /**\n   * Updates this hasher with a message.\n   *\n   * @param {WordArray|string} messageUpdate The message to append.\n   *\n   * @return {Hasher} This hasher.\n   *\n   * @example\n   *\n   *     hasher.update('message');\n   *     hasher.update(wordArray);\n   */\n\n\n  update(messageUpdate) {\n    // Append\n    this._append(messageUpdate); // Update the hash\n\n\n    this._process(); // Chainable\n\n\n    return this;\n  }\n  /**\n   * Finalizes the hash computation.\n   * Note that the finalize operation is effectively a destructive, read-once operation.\n   *\n   * @param {WordArray|string} messageUpdate (Optional) A final message update.\n   *\n   * @return {WordArray} The hash.\n   *\n   * @example\n   *\n   *     var hash = hasher.finalize();\n   *     var hash = hasher.finalize('message');\n   *     var hash = hasher.finalize(wordArray);\n   */\n\n\n  finalize(messageUpdate) {\n    // Final message update\n    if (messageUpdate) {\n      this._append(messageUpdate);\n    } // Perform concrete-hasher logic\n\n\n    const hash = this._doFinalize();\n\n    return hash;\n  }\n\n}\n/**\n * HMAC algorithm.\n */\n\nexport class HMAC extends Base {\n  /**\n   * Initializes a newly created HMAC.\n   *\n   * @param {Hasher} SubHasher The hash algorithm to use.\n   * @param {WordArray|string} key The secret key.\n   *\n   * @example\n   *\n   *     var hmacHasher = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, key);\n   */\n  constructor(SubHasher, key) {\n    super();\n    const hasher = new SubHasher();\n    this._hasher = hasher; // Convert string to WordArray, else assume WordArray already\n\n    let _key = key;\n\n    if (typeof _key === 'string') {\n      _key = Utf8.parse(_key);\n    } // Shortcuts\n\n\n    const hasherBlockSize = hasher.blockSize;\n    const hasherBlockSizeBytes = hasherBlockSize * 4; // Allow arbitrary length keys\n\n    if (_key.sigBytes > hasherBlockSizeBytes) {\n      _key = hasher.finalize(key);\n    } // Clamp excess bits\n\n\n    _key.clamp(); // Clone key for inner and outer pads\n\n\n    const oKey = _key.clone();\n\n    this._oKey = oKey;\n\n    const iKey = _key.clone();\n\n    this._iKey = iKey; // Shortcuts\n\n    const oKeyWords = oKey.words;\n    const iKeyWords = iKey.words; // XOR keys with pad constants\n\n    for (let i = 0; i < hasherBlockSize; i += 1) {\n      oKeyWords[i] ^= 0x5c5c5c5c;\n      iKeyWords[i] ^= 0x36363636;\n    }\n\n    oKey.sigBytes = hasherBlockSizeBytes;\n    iKey.sigBytes = hasherBlockSizeBytes; // Set initial values\n\n    this.reset();\n  }\n  /**\n   * Resets this HMAC to its initial state.\n   *\n   * @example\n   *\n   *     hmacHasher.reset();\n   */\n\n\n  reset() {\n    // Shortcut\n    const hasher = this._hasher; // Reset\n\n    hasher.reset();\n    hasher.update(this._iKey);\n  }\n  /**\n   * Updates this HMAC with a message.\n   *\n   * @param {WordArray|string} messageUpdate The message to append.\n   *\n   * @return {HMAC} This HMAC instance.\n   *\n   * @example\n   *\n   *     hmacHasher.update('message');\n   *     hmacHasher.update(wordArray);\n   */\n\n\n  update(messageUpdate) {\n    this._hasher.update(messageUpdate); // Chainable\n\n\n    return this;\n  }\n  /**\n   * Finalizes the HMAC computation.\n   * Note that the finalize operation is effectively a destructive, read-once operation.\n   *\n   * @param {WordArray|string} messageUpdate (Optional) A final message update.\n   *\n   * @return {WordArray} The HMAC.\n   *\n   * @example\n   *\n   *     var hmac = hmacHasher.finalize();\n   *     var hmac = hmacHasher.finalize('message');\n   *     var hmac = hmacHasher.finalize(wordArray);\n   */\n\n\n  finalize(messageUpdate) {\n    // Shortcut\n    const hasher = this._hasher; // Compute HMAC\n\n    const innerHash = hasher.finalize(messageUpdate);\n    hasher.reset();\n    const hmac = hasher.finalize(this._oKey.clone().concat(innerHash));\n    return hmac;\n  }\n\n}","map":{"version":3,"sources":["/Users/chrisbuonocore/personal/hackathons/hackfs21/node_modules/crypto-es/lib/core.js"],"names":["Base","create","args","mixIn","properties","Object","assign","clone","constructor","WordArray","words","sigBytes","length","typedArray","ArrayBuffer","Uint8Array","Int8Array","Uint8ClampedArray","Int16Array","Uint16Array","Int32Array","Uint32Array","Float32Array","Float64Array","buffer","byteOffset","byteLength","typedArrayByteLength","_words","i","random","nBytes","r","m_w","_m_w","_m_z","mask","result","Math","rcache","_r","push","toString","encoder","Hex","stringify","concat","wordArray","thisWords","thatWords","thisSigBytes","thatSigBytes","clamp","thatByte","ceil","call","slice","hexChars","bite","join","parse","hexStr","hexStrLength","parseInt","substr","Latin1","latin1Chars","String","fromCharCode","latin1Str","latin1StrLength","charCodeAt","Utf8","decodeURIComponent","escape","e","Error","utf8Str","unescape","encodeURIComponent","BufferedBlockAlgorithm","_minBufferSize","reset","_data","_nDataBytes","_append","data","m_data","_process","doFlush","processedWords","blockSize","dataWords","dataSigBytes","blockSizeBytes","nBlocksReady","max","nWordsReady","nBytesReady","min","offset","_doProcessBlock","splice","Hasher","cfg","_createHelper","SubHasher","message","finalize","_createHmacHelper","key","HMAC","_doReset","update","messageUpdate","hash","_doFinalize","hasher","_hasher","_key","hasherBlockSize","hasherBlockSizeBytes","oKey","_oKey","iKey","_iKey","oKeyWords","iKeyWords","innerHash","hmac"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA,OAAO,MAAMA,IAAN,CAAW;AAChB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,SAANC,MAAM,CAAC,GAAGC,IAAJ,EAAU;AACrB,WAAO,IAAI,IAAJ,CAAS,GAAGA,IAAZ,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEC,EAAAA,KAAK,CAACC,UAAD,EAAa;AAChB,WAAOC,MAAM,CAACC,MAAP,CAAc,IAAd,EAAoBF,UAApB,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEG,EAAAA,KAAK,GAAG;AACN,UAAMA,KAAK,GAAG,IAAI,KAAKC,WAAT,EAAd;AACAH,IAAAA,MAAM,CAACC,MAAP,CAAcC,KAAd,EAAqB,IAArB;AACA,WAAOA,KAAP;AACD;;AA7Ce;AAgDlB;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAME,SAAN,SAAwBT,IAAxB,CAA6B;AAClC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEQ,EAAAA,WAAW,CAACE,KAAK,GAAG,EAAT,EAAaC,QAAQ,GAAGD,KAAK,CAACE,MAAN,GAAe,CAAvC,EAA0C;AACnD;AAEA,QAAIC,UAAU,GAAGH,KAAjB,CAHmD,CAInD;;AACA,QAAIG,UAAU,YAAYC,WAA1B,EAAuC;AACrCD,MAAAA,UAAU,GAAG,IAAIE,UAAJ,CAAeF,UAAf,CAAb;AACD,KAPkD,CASnD;;;AACA,QACEA,UAAU,YAAYG,SAAtB,IACGH,UAAU,YAAYI,iBADzB,IAEGJ,UAAU,YAAYK,UAFzB,IAGGL,UAAU,YAAYM,WAHzB,IAIGN,UAAU,YAAYO,UAJzB,IAKGP,UAAU,YAAYQ,WALzB,IAMGR,UAAU,YAAYS,YANzB,IAOGT,UAAU,YAAYU,YAR3B,EASE;AACAV,MAAAA,UAAU,GAAG,IAAIE,UAAJ,CAAeF,UAAU,CAACW,MAA1B,EAAkCX,UAAU,CAACY,UAA7C,EAAyDZ,UAAU,CAACa,UAApE,CAAb;AACD,KArBkD,CAuBnD;;;AACA,QAAIb,UAAU,YAAYE,UAA1B,EAAsC;AACpC;AACA,YAAMY,oBAAoB,GAAGd,UAAU,CAACa,UAAxC,CAFoC,CAIpC;;AACA,YAAME,MAAM,GAAG,EAAf;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,oBAApB,EAA0CE,CAAC,IAAI,CAA/C,EAAkD;AAChDD,QAAAA,MAAM,CAACC,CAAC,KAAK,CAAP,CAAN,IAAmBhB,UAAU,CAACgB,CAAD,CAAV,IAAkB,KAAMA,CAAC,GAAG,CAAL,GAAU,CAApD;AACD,OARmC,CAUpC;;;AACA,WAAKnB,KAAL,GAAakB,MAAb;AACA,WAAKjB,QAAL,GAAgBgB,oBAAhB;AACD,KAbD,MAaO;AACL;AACA,WAAKjB,KAAL,GAAaA,KAAb;AACA,WAAKC,QAAL,GAAgBA,QAAhB;AACD;AACF;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACe,SAANmB,MAAM,CAACC,MAAD,EAAS;AACpB,UAAMrB,KAAK,GAAG,EAAd;;AAEA,UAAMsB,CAAC,GAAIC,GAAD,IAAS;AACjB,UAAIC,IAAI,GAAGD,GAAX;AACA,UAAIE,IAAI,GAAG,UAAX;AACA,YAAMC,IAAI,GAAG,UAAb;AAEA,aAAO,MAAM;AACXD,QAAAA,IAAI,GAAI,UAAUA,IAAI,GAAG,MAAjB,KAA4BA,IAAI,IAAI,IAApC,CAAD,GAA8CC,IAArD;AACAF,QAAAA,IAAI,GAAI,UAAUA,IAAI,GAAG,MAAjB,KAA4BA,IAAI,IAAI,IAApC,CAAD,GAA8CE,IAArD;AACA,YAAIC,MAAM,GAAI,CAACF,IAAI,IAAI,IAAT,IAAiBD,IAAlB,GAA0BE,IAAvC;AACAC,QAAAA,MAAM,IAAI,WAAV;AACAA,QAAAA,MAAM,IAAI,GAAV;AACA,eAAOA,MAAM,IAAIC,IAAI,CAACR,MAAL,KAAgB,GAAhB,GAAsB,CAAtB,GAA0B,CAAC,CAA/B,CAAb;AACD,OAPD;AAQD,KAbD;;AAeA,SAAK,IAAID,CAAC,GAAG,CAAR,EAAWU,MAAhB,EAAwBV,CAAC,GAAGE,MAA5B,EAAoCF,CAAC,IAAI,CAAzC,EAA4C;AAC1C,YAAMW,EAAE,GAAGR,CAAC,CAAC,CAACO,MAAM,IAAID,IAAI,CAACR,MAAL,EAAX,IAA4B,WAA7B,CAAZ;;AAEAS,MAAAA,MAAM,GAAGC,EAAE,KAAK,UAAhB;AACA9B,MAAAA,KAAK,CAAC+B,IAAN,CAAYD,EAAE,KAAK,WAAR,GAAuB,CAAlC;AACD;;AAED,WAAO,IAAI/B,SAAJ,CAAcC,KAAd,EAAqBqB,MAArB,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEW,EAAAA,QAAQ,CAACC,OAAO,GAAGC,GAAX,EAAgB;AACtB,WAAOD,OAAO,CAACE,SAAR,CAAkB,IAAlB,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEC,EAAAA,MAAM,CAACC,SAAD,EAAY;AAChB;AACA,UAAMC,SAAS,GAAG,KAAKtC,KAAvB;AACA,UAAMuC,SAAS,GAAGF,SAAS,CAACrC,KAA5B;AACA,UAAMwC,YAAY,GAAG,KAAKvC,QAA1B;AACA,UAAMwC,YAAY,GAAGJ,SAAS,CAACpC,QAA/B,CALgB,CAOhB;;AACA,SAAKyC,KAAL,GARgB,CAUhB;;AACA,QAAIF,YAAY,GAAG,CAAnB,EAAsB;AACpB;AACA,WAAK,IAAIrB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGsB,YAApB,EAAkCtB,CAAC,IAAI,CAAvC,EAA0C;AACxC,cAAMwB,QAAQ,GAAIJ,SAAS,CAACpB,CAAC,KAAK,CAAP,CAAT,KAAwB,KAAMA,CAAC,GAAG,CAAL,GAAU,CAAxC,GAA8C,IAA/D;AACAmB,QAAAA,SAAS,CAAEE,YAAY,GAAGrB,CAAhB,KAAuB,CAAxB,CAAT,IAAuCwB,QAAQ,IAAK,KAAM,CAACH,YAAY,GAAGrB,CAAhB,IAAqB,CAAtB,GAA2B,CAApF;AACD;AACF,KAND,MAMO;AACL;AACA,WAAK,IAAIA,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGsB,YAApB,EAAkCtB,CAAC,IAAI,CAAvC,EAA0C;AACxCmB,QAAAA,SAAS,CAAEE,YAAY,GAAGrB,CAAhB,KAAuB,CAAxB,CAAT,GAAsCoB,SAAS,CAACpB,CAAC,KAAK,CAAP,CAA/C;AACD;AACF;;AACD,SAAKlB,QAAL,IAAiBwC,YAAjB,CAvBgB,CAyBhB;;AACA,WAAO,IAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;AACEC,EAAAA,KAAK,GAAG;AACN;AACA,UAAM;AAAE1C,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAsB,IAA5B,CAFM,CAIN;;AACAD,IAAAA,KAAK,CAACC,QAAQ,KAAK,CAAd,CAAL,IAAyB,cAAe,KAAMA,QAAQ,GAAG,CAAZ,GAAiB,CAA9D;AACAD,IAAAA,KAAK,CAACE,MAAN,GAAe0B,IAAI,CAACgB,IAAL,CAAU3C,QAAQ,GAAG,CAArB,CAAf;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEJ,EAAAA,KAAK,GAAG;AACN,UAAMA,KAAK,GAAG,MAAMA,KAAN,CAAYgD,IAAZ,CAAiB,IAAjB,CAAd;AACAhD,IAAAA,KAAK,CAACG,KAAN,GAAc,KAAKA,KAAL,CAAW8C,KAAX,CAAiB,CAAjB,CAAd;AAEA,WAAOjD,KAAP;AACD;;AAzLiC;AA4LpC;AACA;AACA;;AACA,OAAO,MAAMqC,GAAG,GAAG;AACjB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEC,EAAAA,SAAS,CAACE,SAAD,EAAY;AACnB;AACA,UAAM;AAAErC,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAsBoC,SAA5B,CAFmB,CAInB;;AACA,UAAMU,QAAQ,GAAG,EAAjB;;AACA,SAAK,IAAI5B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGlB,QAApB,EAA8BkB,CAAC,IAAI,CAAnC,EAAsC;AACpC,YAAM6B,IAAI,GAAIhD,KAAK,CAACmB,CAAC,KAAK,CAAP,CAAL,KAAoB,KAAMA,CAAC,GAAG,CAAL,GAAU,CAApC,GAA0C,IAAvD;AACA4B,MAAAA,QAAQ,CAAChB,IAAT,CAAc,CAACiB,IAAI,KAAK,CAAV,EAAahB,QAAb,CAAsB,EAAtB,CAAd;AACAe,MAAAA,QAAQ,CAAChB,IAAT,CAAc,CAACiB,IAAI,GAAG,IAAR,EAAchB,QAAd,CAAuB,EAAvB,CAAd;AACD;;AAED,WAAOe,QAAQ,CAACE,IAAT,CAAc,EAAd,CAAP;AACD,GA3BgB;;AA6BjB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEC,EAAAA,KAAK,CAACC,MAAD,EAAS;AACZ;AACA,UAAMC,YAAY,GAAGD,MAAM,CAACjD,MAA5B,CAFY,CAIZ;;AACA,UAAMF,KAAK,GAAG,EAAd;;AACA,SAAK,IAAImB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGiC,YAApB,EAAkCjC,CAAC,IAAI,CAAvC,EAA0C;AACxCnB,MAAAA,KAAK,CAACmB,CAAC,KAAK,CAAP,CAAL,IAAkBkC,QAAQ,CAACF,MAAM,CAACG,MAAP,CAAcnC,CAAd,EAAiB,CAAjB,CAAD,EAAsB,EAAtB,CAAR,IAAsC,KAAMA,CAAC,GAAG,CAAL,GAAU,CAAvE;AACD;;AAED,WAAO,IAAIpB,SAAJ,CAAcC,KAAd,EAAqBoD,YAAY,GAAG,CAApC,CAAP;AACD;;AArDgB,CAAZ;AAwDP;AACA;AACA;;AACA,OAAO,MAAMG,MAAM,GAAG;AACpB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEpB,EAAAA,SAAS,CAACE,SAAD,EAAY;AACnB;AACA,UAAM;AAAErC,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAsBoC,SAA5B,CAFmB,CAInB;;AACA,UAAMmB,WAAW,GAAG,EAApB;;AACA,SAAK,IAAIrC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGlB,QAApB,EAA8BkB,CAAC,IAAI,CAAnC,EAAsC;AACpC,YAAM6B,IAAI,GAAIhD,KAAK,CAACmB,CAAC,KAAK,CAAP,CAAL,KAAoB,KAAMA,CAAC,GAAG,CAAL,GAAU,CAApC,GAA0C,IAAvD;AACAqC,MAAAA,WAAW,CAACzB,IAAZ,CAAiB0B,MAAM,CAACC,YAAP,CAAoBV,IAApB,CAAjB;AACD;;AAED,WAAOQ,WAAW,CAACP,IAAZ,CAAiB,EAAjB,CAAP;AACD,GA1BmB;;AA4BpB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEC,EAAAA,KAAK,CAACS,SAAD,EAAY;AACf;AACA,UAAMC,eAAe,GAAGD,SAAS,CAACzD,MAAlC,CAFe,CAIf;;AACA,UAAMF,KAAK,GAAG,EAAd;;AACA,SAAK,IAAImB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGyC,eAApB,EAAqCzC,CAAC,IAAI,CAA1C,EAA6C;AAC3CnB,MAAAA,KAAK,CAACmB,CAAC,KAAK,CAAP,CAAL,IAAkB,CAACwC,SAAS,CAACE,UAAV,CAAqB1C,CAArB,IAA0B,IAA3B,KAAqC,KAAMA,CAAC,GAAG,CAAL,GAAU,CAAtE;AACD;;AAED,WAAO,IAAIpB,SAAJ,CAAcC,KAAd,EAAqB4D,eAArB,CAAP;AACD;;AApDmB,CAAf;AAuDP;AACA;AACA;;AACA,OAAO,MAAME,IAAI,GAAG;AAClB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE3B,EAAAA,SAAS,CAACE,SAAD,EAAY;AACnB,QAAI;AACF,aAAO0B,kBAAkB,CAACC,MAAM,CAACT,MAAM,CAACpB,SAAP,CAAiBE,SAAjB,CAAD,CAAP,CAAzB;AACD,KAFD,CAEE,OAAO4B,CAAP,EAAU;AACV,YAAM,IAAIC,KAAJ,CAAU,sBAAV,CAAN;AACD;AACF,GApBiB;;AAsBlB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEhB,EAAAA,KAAK,CAACiB,OAAD,EAAU;AACb,WAAOZ,MAAM,CAACL,KAAP,CAAakB,QAAQ,CAACC,kBAAkB,CAACF,OAAD,CAAnB,CAArB,CAAP;AACD;;AArCiB,CAAb;AAwCP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMG,sBAAN,SAAqChF,IAArC,CAA0C;AAC/CQ,EAAAA,WAAW,GAAG;AACZ;AACA,SAAKyE,cAAL,GAAsB,CAAtB;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;AACEC,EAAAA,KAAK,GAAG;AACN;AACA,SAAKC,KAAL,GAAa,IAAI1E,SAAJ,EAAb;AACA,SAAK2E,WAAL,GAAmB,CAAnB;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEC,EAAAA,OAAO,CAACC,IAAD,EAAO;AACZ,QAAIC,MAAM,GAAGD,IAAb,CADY,CAGZ;;AACA,QAAI,OAAOC,MAAP,KAAkB,QAAtB,EAAgC;AAC9BA,MAAAA,MAAM,GAAGf,IAAI,CAACZ,KAAL,CAAW2B,MAAX,CAAT;AACD,KANW,CAQZ;;;AACA,SAAKJ,KAAL,CAAWrC,MAAX,CAAkByC,MAAlB;;AACA,SAAKH,WAAL,IAAoBG,MAAM,CAAC5E,QAA3B;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACE6E,EAAAA,QAAQ,CAACC,OAAD,EAAU;AAChB,QAAIC,cAAJ,CADgB,CAGhB;;AACA,UAAM;AAAEP,MAAAA,KAAK,EAAEG,IAAT;AAAeK,MAAAA;AAAf,QAA6B,IAAnC;AACA,UAAMC,SAAS,GAAGN,IAAI,CAAC5E,KAAvB;AACA,UAAMmF,YAAY,GAAGP,IAAI,CAAC3E,QAA1B;AACA,UAAMmF,cAAc,GAAGH,SAAS,GAAG,CAAnC,CAPgB,CAShB;;AACA,QAAII,YAAY,GAAGF,YAAY,GAAGC,cAAlC;;AACA,QAAIL,OAAJ,EAAa;AACX;AACAM,MAAAA,YAAY,GAAGzD,IAAI,CAACgB,IAAL,CAAUyC,YAAV,CAAf;AACD,KAHD,MAGO;AACL;AACA;AACAA,MAAAA,YAAY,GAAGzD,IAAI,CAAC0D,GAAL,CAAS,CAACD,YAAY,GAAG,CAAhB,IAAqB,KAAKd,cAAnC,EAAmD,CAAnD,CAAf;AACD,KAlBe,CAoBhB;;;AACA,UAAMgB,WAAW,GAAGF,YAAY,GAAGJ,SAAnC,CArBgB,CAuBhB;;AACA,UAAMO,WAAW,GAAG5D,IAAI,CAAC6D,GAAL,CAASF,WAAW,GAAG,CAAvB,EAA0BJ,YAA1B,CAApB,CAxBgB,CA0BhB;;AACA,QAAII,WAAJ,EAAiB;AACf,WAAK,IAAIG,MAAM,GAAG,CAAlB,EAAqBA,MAAM,GAAGH,WAA9B,EAA2CG,MAAM,IAAIT,SAArD,EAAgE;AAC9D;AACA,aAAKU,eAAL,CAAqBT,SAArB,EAAgCQ,MAAhC;AACD,OAJc,CAMf;;;AACAV,MAAAA,cAAc,GAAGE,SAAS,CAACU,MAAV,CAAiB,CAAjB,EAAoBL,WAApB,CAAjB;AACAX,MAAAA,IAAI,CAAC3E,QAAL,IAAiBuF,WAAjB;AACD,KApCe,CAsChB;;;AACA,WAAO,IAAIzF,SAAJ,CAAciF,cAAd,EAA8BQ,WAA9B,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACE3F,EAAAA,KAAK,GAAG;AACN,UAAMA,KAAK,GAAG,MAAMA,KAAN,CAAYgD,IAAZ,CAAiB,IAAjB,CAAd;AACAhD,IAAAA,KAAK,CAAC4E,KAAN,GAAc,KAAKA,KAAL,CAAW5E,KAAX,EAAd;AAEA,WAAOA,KAAP;AACD;;AAlH8C;AAqHjD;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMgG,MAAN,SAAqBvB,sBAArB,CAA4C;AACjDxE,EAAAA,WAAW,CAACgG,GAAD,EAAM;AACf;AAEA,SAAKb,SAAL,GAAiB,MAAM,EAAvB;AAEA;AACJ;AACA;;AACI,SAAKa,GAAL,GAAWnG,MAAM,CAACC,MAAP,CAAc,IAAIN,IAAJ,EAAd,EAA0BwG,GAA1B,CAAX,CARe,CAUf;;AACA,SAAKtB,KAAL;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACsB,SAAbuB,aAAa,CAACC,SAAD,EAAY;AAC9B,WAAO,CAACC,OAAD,EAAUH,GAAV,KAAkB,IAAIE,SAAJ,CAAcF,GAAd,EAAmBI,QAAnB,CAA4BD,OAA5B,CAAzB;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAC0B,SAAjBE,iBAAiB,CAACH,SAAD,EAAY;AAClC,WAAO,CAACC,OAAD,EAAUG,GAAV,KAAkB,IAAIC,IAAJ,CAASL,SAAT,EAAoBI,GAApB,EAAyBF,QAAzB,CAAkCD,OAAlC,CAAzB;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;AACEzB,EAAAA,KAAK,GAAG;AACN;AACA,UAAMA,KAAN,CAAY3B,IAAZ,CAAiB,IAAjB,EAFM,CAIN;;AACA,SAAKyD,QAAL;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEC,EAAAA,MAAM,CAACC,aAAD,EAAgB;AACpB;AACA,SAAK7B,OAAL,CAAa6B,aAAb,EAFoB,CAIpB;;;AACA,SAAK1B,QAAL,GALoB,CAOpB;;;AACA,WAAO,IAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEoB,EAAAA,QAAQ,CAACM,aAAD,EAAgB;AACtB;AACA,QAAIA,aAAJ,EAAmB;AACjB,WAAK7B,OAAL,CAAa6B,aAAb;AACD,KAJqB,CAMtB;;;AACA,UAAMC,IAAI,GAAG,KAAKC,WAAL,EAAb;;AAEA,WAAOD,IAAP;AACD;;AA/GgD;AAkHnD;AACA;AACA;;AACA,OAAO,MAAMJ,IAAN,SAAmB/G,IAAnB,CAAwB;AAC7B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEQ,EAAAA,WAAW,CAACkG,SAAD,EAAYI,GAAZ,EAAiB;AAC1B;AAEA,UAAMO,MAAM,GAAG,IAAIX,SAAJ,EAAf;AACA,SAAKY,OAAL,GAAeD,MAAf,CAJ0B,CAM1B;;AACA,QAAIE,IAAI,GAAGT,GAAX;;AACA,QAAI,OAAOS,IAAP,KAAgB,QAApB,EAA8B;AAC5BA,MAAAA,IAAI,GAAG/C,IAAI,CAACZ,KAAL,CAAW2D,IAAX,CAAP;AACD,KAVyB,CAY1B;;;AACA,UAAMC,eAAe,GAAGH,MAAM,CAAC1B,SAA/B;AACA,UAAM8B,oBAAoB,GAAGD,eAAe,GAAG,CAA/C,CAd0B,CAgB1B;;AACA,QAAID,IAAI,CAAC5G,QAAL,GAAgB8G,oBAApB,EAA0C;AACxCF,MAAAA,IAAI,GAAGF,MAAM,CAACT,QAAP,CAAgBE,GAAhB,CAAP;AACD,KAnByB,CAqB1B;;;AACAS,IAAAA,IAAI,CAACnE,KAAL,GAtB0B,CAwB1B;;;AACA,UAAMsE,IAAI,GAAGH,IAAI,CAAChH,KAAL,EAAb;;AACA,SAAKoH,KAAL,GAAaD,IAAb;;AACA,UAAME,IAAI,GAAGL,IAAI,CAAChH,KAAL,EAAb;;AACA,SAAKsH,KAAL,GAAaD,IAAb,CA5B0B,CA8B1B;;AACA,UAAME,SAAS,GAAGJ,IAAI,CAAChH,KAAvB;AACA,UAAMqH,SAAS,GAAGH,IAAI,CAAClH,KAAvB,CAhC0B,CAkC1B;;AACA,SAAK,IAAImB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG2F,eAApB,EAAqC3F,CAAC,IAAI,CAA1C,EAA6C;AAC3CiG,MAAAA,SAAS,CAACjG,CAAD,CAAT,IAAgB,UAAhB;AACAkG,MAAAA,SAAS,CAAClG,CAAD,CAAT,IAAgB,UAAhB;AACD;;AACD6F,IAAAA,IAAI,CAAC/G,QAAL,GAAgB8G,oBAAhB;AACAG,IAAAA,IAAI,CAACjH,QAAL,GAAgB8G,oBAAhB,CAxC0B,CA0C1B;;AACA,SAAKvC,KAAL;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;AACEA,EAAAA,KAAK,GAAG;AACN;AACA,UAAMmC,MAAM,GAAG,KAAKC,OAApB,CAFM,CAIN;;AACAD,IAAAA,MAAM,CAACnC,KAAP;AACAmC,IAAAA,MAAM,CAACJ,MAAP,CAAc,KAAKY,KAAnB;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEZ,EAAAA,MAAM,CAACC,aAAD,EAAgB;AACpB,SAAKI,OAAL,CAAaL,MAAb,CAAoBC,aAApB,EADoB,CAGpB;;;AACA,WAAO,IAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEN,EAAAA,QAAQ,CAACM,aAAD,EAAgB;AACtB;AACA,UAAMG,MAAM,GAAG,KAAKC,OAApB,CAFsB,CAItB;;AACA,UAAMU,SAAS,GAAGX,MAAM,CAACT,QAAP,CAAgBM,aAAhB,CAAlB;AACAG,IAAAA,MAAM,CAACnC,KAAP;AACA,UAAM+C,IAAI,GAAGZ,MAAM,CAACT,QAAP,CAAgB,KAAKe,KAAL,CAAWpH,KAAX,GAAmBuC,MAAnB,CAA0BkF,SAA1B,CAAhB,CAAb;AAEA,WAAOC,IAAP;AACD;;AApH4B","sourcesContent":["/* eslint-disable no-use-before-define */\n\n/**\n * Base class for inheritance.\n */\nexport class Base {\n  /**\n   * Extends this object and runs the init method.\n   * Arguments to create() will be passed to init().\n   *\n   * @return {Object} The new object.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     var instance = MyType.create();\n   */\n  static create(...args) {\n    return new this(...args);\n  }\n\n  /**\n   * Copies properties into this object.\n   *\n   * @param {Object} properties The properties to mix in.\n   *\n   * @example\n   *\n   *     MyType.mixIn({\n   *         field: 'value'\n   *     });\n   */\n  mixIn(properties) {\n    return Object.assign(this, properties);\n  }\n\n  /**\n   * Creates a copy of this object.\n   *\n   * @return {Object} The clone.\n   *\n   * @example\n   *\n   *     var clone = instance.clone();\n   */\n  clone() {\n    const clone = new this.constructor();\n    Object.assign(clone, this);\n    return clone;\n  }\n}\n\n/**\n * An array of 32-bit words.\n *\n * @property {Array} words The array of 32-bit words.\n * @property {number} sigBytes The number of significant bytes in this word array.\n */\nexport class WordArray extends Base {\n  /**\n   * Initializes a newly created word array.\n   *\n   * @param {Array} words (Optional) An array of 32-bit words.\n   * @param {number} sigBytes (Optional) The number of significant bytes in the words.\n   *\n   * @example\n   *\n   *     var wordArray = CryptoJS.lib.WordArray.create();\n   *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);\n   *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);\n   */\n  constructor(words = [], sigBytes = words.length * 4) {\n    super();\n\n    let typedArray = words;\n    // Convert buffers to uint8\n    if (typedArray instanceof ArrayBuffer) {\n      typedArray = new Uint8Array(typedArray);\n    }\n\n    // Convert other array views to uint8\n    if (\n      typedArray instanceof Int8Array\n      || typedArray instanceof Uint8ClampedArray\n      || typedArray instanceof Int16Array\n      || typedArray instanceof Uint16Array\n      || typedArray instanceof Int32Array\n      || typedArray instanceof Uint32Array\n      || typedArray instanceof Float32Array\n      || typedArray instanceof Float64Array\n    ) {\n      typedArray = new Uint8Array(typedArray.buffer, typedArray.byteOffset, typedArray.byteLength);\n    }\n\n    // Handle Uint8Array\n    if (typedArray instanceof Uint8Array) {\n      // Shortcut\n      const typedArrayByteLength = typedArray.byteLength;\n\n      // Extract bytes\n      const _words = [];\n      for (let i = 0; i < typedArrayByteLength; i += 1) {\n        _words[i >>> 2] |= typedArray[i] << (24 - (i % 4) * 8);\n      }\n\n      // Initialize this word array\n      this.words = _words;\n      this.sigBytes = typedArrayByteLength;\n    } else {\n      // Else call normal init\n      this.words = words;\n      this.sigBytes = sigBytes;\n    }\n  }\n\n  /**\n   * Creates a word array filled with random bytes.\n   *\n   * @param {number} nBytes The number of random bytes to generate.\n   *\n   * @return {WordArray} The random word array.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     var wordArray = CryptoJS.lib.WordArray.random(16);\n   */\n  static random(nBytes) {\n    const words = [];\n\n    const r = (m_w) => {\n      let _m_w = m_w;\n      let _m_z = 0x3ade68b1;\n      const mask = 0xffffffff;\n\n      return () => {\n        _m_z = (0x9069 * (_m_z & 0xFFFF) + (_m_z >> 0x10)) & mask;\n        _m_w = (0x4650 * (_m_w & 0xFFFF) + (_m_w >> 0x10)) & mask;\n        let result = ((_m_z << 0x10) + _m_w) & mask;\n        result /= 0x100000000;\n        result += 0.5;\n        return result * (Math.random() > 0.5 ? 1 : -1);\n      };\n    };\n\n    for (let i = 0, rcache; i < nBytes; i += 4) {\n      const _r = r((rcache || Math.random()) * 0x100000000);\n\n      rcache = _r() * 0x3ade67b7;\n      words.push((_r() * 0x100000000) | 0);\n    }\n\n    return new WordArray(words, nBytes);\n  }\n\n  /**\n   * Converts this word array to a string.\n   *\n   * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex\n   *\n   * @return {string} The stringified word array.\n   *\n   * @example\n   *\n   *     var string = wordArray + '';\n   *     var string = wordArray.toString();\n   *     var string = wordArray.toString(CryptoJS.enc.Utf8);\n   */\n  toString(encoder = Hex) {\n    return encoder.stringify(this);\n  }\n\n  /**\n   * Concatenates a word array to this word array.\n   *\n   * @param {WordArray} wordArray The word array to append.\n   *\n   * @return {WordArray} This word array.\n   *\n   * @example\n   *\n   *     wordArray1.concat(wordArray2);\n   */\n  concat(wordArray) {\n    // Shortcuts\n    const thisWords = this.words;\n    const thatWords = wordArray.words;\n    const thisSigBytes = this.sigBytes;\n    const thatSigBytes = wordArray.sigBytes;\n\n    // Clamp excess bits\n    this.clamp();\n\n    // Concat\n    if (thisSigBytes % 4) {\n      // Copy one byte at a time\n      for (let i = 0; i < thatSigBytes; i += 1) {\n        const thatByte = (thatWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n        thisWords[(thisSigBytes + i) >>> 2] |= thatByte << (24 - ((thisSigBytes + i) % 4) * 8);\n      }\n    } else {\n      // Copy one word at a time\n      for (let i = 0; i < thatSigBytes; i += 4) {\n        thisWords[(thisSigBytes + i) >>> 2] = thatWords[i >>> 2];\n      }\n    }\n    this.sigBytes += thatSigBytes;\n\n    // Chainable\n    return this;\n  }\n\n  /**\n   * Removes insignificant bits.\n   *\n   * @example\n   *\n   *     wordArray.clamp();\n   */\n  clamp() {\n    // Shortcuts\n    const { words, sigBytes } = this;\n\n    // Clamp\n    words[sigBytes >>> 2] &= 0xffffffff << (32 - (sigBytes % 4) * 8);\n    words.length = Math.ceil(sigBytes / 4);\n  }\n\n  /**\n   * Creates a copy of this word array.\n   *\n   * @return {WordArray} The clone.\n   *\n   * @example\n   *\n   *     var clone = wordArray.clone();\n   */\n  clone() {\n    const clone = super.clone.call(this);\n    clone.words = this.words.slice(0);\n\n    return clone;\n  }\n}\n\n/**\n * Hex encoding strategy.\n */\nexport const Hex = {\n  /**\n   * Converts a word array to a hex string.\n   *\n   * @param {WordArray} wordArray The word array.\n   *\n   * @return {string} The hex string.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);\n   */\n  stringify(wordArray) {\n    // Shortcuts\n    const { words, sigBytes } = wordArray;\n\n    // Convert\n    const hexChars = [];\n    for (let i = 0; i < sigBytes; i += 1) {\n      const bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n      hexChars.push((bite >>> 4).toString(16));\n      hexChars.push((bite & 0x0f).toString(16));\n    }\n\n    return hexChars.join('');\n  },\n\n  /**\n   * Converts a hex string to a word array.\n   *\n   * @param {string} hexStr The hex string.\n   *\n   * @return {WordArray} The word array.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     var wordArray = CryptoJS.enc.Hex.parse(hexString);\n   */\n  parse(hexStr) {\n    // Shortcut\n    const hexStrLength = hexStr.length;\n\n    // Convert\n    const words = [];\n    for (let i = 0; i < hexStrLength; i += 2) {\n      words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << (24 - (i % 8) * 4);\n    }\n\n    return new WordArray(words, hexStrLength / 2);\n  },\n};\n\n/**\n * Latin1 encoding strategy.\n */\nexport const Latin1 = {\n  /**\n   * Converts a word array to a Latin1 string.\n   *\n   * @param {WordArray} wordArray The word array.\n   *\n   * @return {string} The Latin1 string.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);\n   */\n  stringify(wordArray) {\n    // Shortcuts\n    const { words, sigBytes } = wordArray;\n\n    // Convert\n    const latin1Chars = [];\n    for (let i = 0; i < sigBytes; i += 1) {\n      const bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n      latin1Chars.push(String.fromCharCode(bite));\n    }\n\n    return latin1Chars.join('');\n  },\n\n  /**\n   * Converts a Latin1 string to a word array.\n   *\n   * @param {string} latin1Str The Latin1 string.\n   *\n   * @return {WordArray} The word array.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);\n   */\n  parse(latin1Str) {\n    // Shortcut\n    const latin1StrLength = latin1Str.length;\n\n    // Convert\n    const words = [];\n    for (let i = 0; i < latin1StrLength; i += 1) {\n      words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << (24 - (i % 4) * 8);\n    }\n\n    return new WordArray(words, latin1StrLength);\n  },\n};\n\n/**\n * UTF-8 encoding strategy.\n */\nexport const Utf8 = {\n  /**\n   * Converts a word array to a UTF-8 string.\n   *\n   * @param {WordArray} wordArray The word array.\n   *\n   * @return {string} The UTF-8 string.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);\n   */\n  stringify(wordArray) {\n    try {\n      return decodeURIComponent(escape(Latin1.stringify(wordArray)));\n    } catch (e) {\n      throw new Error('Malformed UTF-8 data');\n    }\n  },\n\n  /**\n   * Converts a UTF-8 string to a word array.\n   *\n   * @param {string} utf8Str The UTF-8 string.\n   *\n   * @return {WordArray} The word array.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);\n   */\n  parse(utf8Str) {\n    return Latin1.parse(unescape(encodeURIComponent(utf8Str)));\n  },\n};\n\n/**\n * Abstract buffered block algorithm template.\n *\n * The property blockSize must be implemented in a concrete subtype.\n *\n * @property {number} _minBufferSize\n *\n *     The number of blocks that should be kept unprocessed in the buffer. Default: 0\n */\nexport class BufferedBlockAlgorithm extends Base {\n  constructor() {\n    super();\n    this._minBufferSize = 0;\n  }\n\n  /**\n   * Resets this block algorithm's data buffer to its initial state.\n   *\n   * @example\n   *\n   *     bufferedBlockAlgorithm.reset();\n   */\n  reset() {\n    // Initial values\n    this._data = new WordArray();\n    this._nDataBytes = 0;\n  }\n\n  /**\n   * Adds new data to this block algorithm's buffer.\n   *\n   * @param {WordArray|string} data\n   *\n   *     The data to append. Strings are converted to a WordArray using UTF-8.\n   *\n   * @example\n   *\n   *     bufferedBlockAlgorithm._append('data');\n   *     bufferedBlockAlgorithm._append(wordArray);\n   */\n  _append(data) {\n    let m_data = data;\n\n    // Convert string to WordArray, else assume WordArray already\n    if (typeof m_data === 'string') {\n      m_data = Utf8.parse(m_data);\n    }\n\n    // Append\n    this._data.concat(m_data);\n    this._nDataBytes += m_data.sigBytes;\n  }\n\n  /**\n   * Processes available data blocks.\n   *\n   * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.\n   *\n   * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.\n   *\n   * @return {WordArray} The processed data.\n   *\n   * @example\n   *\n   *     var processedData = bufferedBlockAlgorithm._process();\n   *     var processedData = bufferedBlockAlgorithm._process(!!'flush');\n   */\n  _process(doFlush) {\n    let processedWords;\n\n    // Shortcuts\n    const { _data: data, blockSize } = this;\n    const dataWords = data.words;\n    const dataSigBytes = data.sigBytes;\n    const blockSizeBytes = blockSize * 4;\n\n    // Count blocks ready\n    let nBlocksReady = dataSigBytes / blockSizeBytes;\n    if (doFlush) {\n      // Round up to include partial blocks\n      nBlocksReady = Math.ceil(nBlocksReady);\n    } else {\n      // Round down to include only full blocks,\n      // less the number of blocks that must remain in the buffer\n      nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);\n    }\n\n    // Count words ready\n    const nWordsReady = nBlocksReady * blockSize;\n\n    // Count bytes ready\n    const nBytesReady = Math.min(nWordsReady * 4, dataSigBytes);\n\n    // Process blocks\n    if (nWordsReady) {\n      for (let offset = 0; offset < nWordsReady; offset += blockSize) {\n        // Perform concrete-algorithm logic\n        this._doProcessBlock(dataWords, offset);\n      }\n\n      // Remove processed words\n      processedWords = dataWords.splice(0, nWordsReady);\n      data.sigBytes -= nBytesReady;\n    }\n\n    // Return processed words\n    return new WordArray(processedWords, nBytesReady);\n  }\n\n  /**\n   * Creates a copy of this object.\n   *\n   * @return {Object} The clone.\n   *\n   * @example\n   *\n   *     var clone = bufferedBlockAlgorithm.clone();\n   */\n  clone() {\n    const clone = super.clone.call(this);\n    clone._data = this._data.clone();\n\n    return clone;\n  }\n}\n\n/**\n * Abstract hasher template.\n *\n * @property {number} blockSize\n *\n *     The number of 32-bit words this hasher operates on. Default: 16 (512 bits)\n */\nexport class Hasher extends BufferedBlockAlgorithm {\n  constructor(cfg) {\n    super();\n\n    this.blockSize = 512 / 32;\n\n    /**\n     * Configuration options.\n     */\n    this.cfg = Object.assign(new Base(), cfg);\n\n    // Set initial values\n    this.reset();\n  }\n\n  /**\n   * Creates a shortcut function to a hasher's object interface.\n   *\n   * @param {Hasher} SubHasher The hasher to create a helper for.\n   *\n   * @return {Function} The shortcut function.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);\n   */\n  static _createHelper(SubHasher) {\n    return (message, cfg) => new SubHasher(cfg).finalize(message);\n  }\n\n  /**\n   * Creates a shortcut function to the HMAC's object interface.\n   *\n   * @param {Hasher} SubHasher The hasher to use in this HMAC helper.\n   *\n   * @return {Function} The shortcut function.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);\n   */\n  static _createHmacHelper(SubHasher) {\n    return (message, key) => new HMAC(SubHasher, key).finalize(message);\n  }\n\n  /**\n   * Resets this hasher to its initial state.\n   *\n   * @example\n   *\n   *     hasher.reset();\n   */\n  reset() {\n    // Reset data buffer\n    super.reset.call(this);\n\n    // Perform concrete-hasher logic\n    this._doReset();\n  }\n\n  /**\n   * Updates this hasher with a message.\n   *\n   * @param {WordArray|string} messageUpdate The message to append.\n   *\n   * @return {Hasher} This hasher.\n   *\n   * @example\n   *\n   *     hasher.update('message');\n   *     hasher.update(wordArray);\n   */\n  update(messageUpdate) {\n    // Append\n    this._append(messageUpdate);\n\n    // Update the hash\n    this._process();\n\n    // Chainable\n    return this;\n  }\n\n  /**\n   * Finalizes the hash computation.\n   * Note that the finalize operation is effectively a destructive, read-once operation.\n   *\n   * @param {WordArray|string} messageUpdate (Optional) A final message update.\n   *\n   * @return {WordArray} The hash.\n   *\n   * @example\n   *\n   *     var hash = hasher.finalize();\n   *     var hash = hasher.finalize('message');\n   *     var hash = hasher.finalize(wordArray);\n   */\n  finalize(messageUpdate) {\n    // Final message update\n    if (messageUpdate) {\n      this._append(messageUpdate);\n    }\n\n    // Perform concrete-hasher logic\n    const hash = this._doFinalize();\n\n    return hash;\n  }\n}\n\n/**\n * HMAC algorithm.\n */\nexport class HMAC extends Base {\n  /**\n   * Initializes a newly created HMAC.\n   *\n   * @param {Hasher} SubHasher The hash algorithm to use.\n   * @param {WordArray|string} key The secret key.\n   *\n   * @example\n   *\n   *     var hmacHasher = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, key);\n   */\n  constructor(SubHasher, key) {\n    super();\n\n    const hasher = new SubHasher();\n    this._hasher = hasher;\n\n    // Convert string to WordArray, else assume WordArray already\n    let _key = key;\n    if (typeof _key === 'string') {\n      _key = Utf8.parse(_key);\n    }\n\n    // Shortcuts\n    const hasherBlockSize = hasher.blockSize;\n    const hasherBlockSizeBytes = hasherBlockSize * 4;\n\n    // Allow arbitrary length keys\n    if (_key.sigBytes > hasherBlockSizeBytes) {\n      _key = hasher.finalize(key);\n    }\n\n    // Clamp excess bits\n    _key.clamp();\n\n    // Clone key for inner and outer pads\n    const oKey = _key.clone();\n    this._oKey = oKey;\n    const iKey = _key.clone();\n    this._iKey = iKey;\n\n    // Shortcuts\n    const oKeyWords = oKey.words;\n    const iKeyWords = iKey.words;\n\n    // XOR keys with pad constants\n    for (let i = 0; i < hasherBlockSize; i += 1) {\n      oKeyWords[i] ^= 0x5c5c5c5c;\n      iKeyWords[i] ^= 0x36363636;\n    }\n    oKey.sigBytes = hasherBlockSizeBytes;\n    iKey.sigBytes = hasherBlockSizeBytes;\n\n    // Set initial values\n    this.reset();\n  }\n\n  /**\n   * Resets this HMAC to its initial state.\n   *\n   * @example\n   *\n   *     hmacHasher.reset();\n   */\n  reset() {\n    // Shortcut\n    const hasher = this._hasher;\n\n    // Reset\n    hasher.reset();\n    hasher.update(this._iKey);\n  }\n\n  /**\n   * Updates this HMAC with a message.\n   *\n   * @param {WordArray|string} messageUpdate The message to append.\n   *\n   * @return {HMAC} This HMAC instance.\n   *\n   * @example\n   *\n   *     hmacHasher.update('message');\n   *     hmacHasher.update(wordArray);\n   */\n  update(messageUpdate) {\n    this._hasher.update(messageUpdate);\n\n    // Chainable\n    return this;\n  }\n\n  /**\n   * Finalizes the HMAC computation.\n   * Note that the finalize operation is effectively a destructive, read-once operation.\n   *\n   * @param {WordArray|string} messageUpdate (Optional) A final message update.\n   *\n   * @return {WordArray} The HMAC.\n   *\n   * @example\n   *\n   *     var hmac = hmacHasher.finalize();\n   *     var hmac = hmacHasher.finalize('message');\n   *     var hmac = hmacHasher.finalize(wordArray);\n   */\n  finalize(messageUpdate) {\n    // Shortcut\n    const hasher = this._hasher;\n\n    // Compute HMAC\n    const innerHash = hasher.finalize(messageUpdate);\n    hasher.reset();\n    const hmac = hasher.finalize(this._oKey.clone().concat(innerHash));\n\n    return hmac;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}