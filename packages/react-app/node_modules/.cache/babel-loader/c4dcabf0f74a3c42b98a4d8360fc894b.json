{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\n/*\n  ~ What it does? ~\n\n  Enables you to keep track of events\n\n  ~ How can I use? ~\n\n  const setPurposeEvents = useEventListener(readContracts, \"YourContract\", \"SetPurpose\", localProvider, 1);\n\n  ~ Features ~\n\n  - Provide readContracts by loading contracts (see more on ContractLoader.js)\n  - Specify the name of the contract, in this case it is \"YourContract\"\n  - Specify the name of the event in the contract, in this case we keep track of \"SetPurpose\" event\n  - Specify the provider\n*/\n\nexport default function useEventListener(contracts, contractName, eventName, provider, startBlock, args) {\n  _s();\n\n  const [updates, setUpdates] = useState([]);\n  useEffect(() => {\n    if (typeof provider !== \"undefined\" && typeof startBlock !== \"undefined\") {\n      // if you want to read _all_ events from your contracts, set this to the block number it is deployed\n      provider.resetEventsBlock(startBlock);\n    }\n\n    if (contracts && contractName && contracts[contractName]) {\n      try {\n        contracts[contractName].on(eventName, (...args) => {\n          const blockNumber = args[args.length - 1].blockNumber;\n          setUpdates(messages => [{\n            blockNumber,\n            ...args.pop().args\n          }, ...messages]);\n        });\n        return () => {\n          contracts[contractName].removeListener(eventName);\n        };\n      } catch (e) {\n        console.log(e);\n      }\n    }\n  }, [provider, startBlock, contracts, contractName, eventName]);\n  return updates;\n}\n\n_s(useEventListener, \"fVrOiUJT6HOXWZMzGi+YrfallHw=\");","map":{"version":3,"sources":["/Users/chrisbuonocore/personal/hackathons/hackfs21/packages/react-app/src/hooks/EventListener.js"],"names":["useEffect","useState","useEventListener","contracts","contractName","eventName","provider","startBlock","args","updates","setUpdates","resetEventsBlock","on","blockNumber","length","messages","pop","removeListener","e","console","log"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,SAASC,gBAAT,CAA0BC,SAA1B,EAAqCC,YAArC,EAAmDC,SAAnD,EAA8DC,QAA9D,EAAwEC,UAAxE,EAAoFC,IAApF,EAA0F;AAAA;;AACvG,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBT,QAAQ,CAAC,EAAD,CAAtC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,OAAOM,QAAP,KAAoB,WAApB,IAAmC,OAAOC,UAAP,KAAsB,WAA7D,EAA0E;AACxE;AACAD,MAAAA,QAAQ,CAACK,gBAAT,CAA0BJ,UAA1B;AACD;;AACD,QAAIJ,SAAS,IAAIC,YAAb,IAA6BD,SAAS,CAACC,YAAD,CAA1C,EAA0D;AACxD,UAAI;AACFD,QAAAA,SAAS,CAACC,YAAD,CAAT,CAAwBQ,EAAxB,CAA2BP,SAA3B,EAAsC,CAAC,GAAGG,IAAJ,KAAa;AACjD,gBAAMK,WAAW,GAAGL,IAAI,CAACA,IAAI,CAACM,MAAL,GAAc,CAAf,CAAJ,CAAsBD,WAA1C;AACAH,UAAAA,UAAU,CAACK,QAAQ,IAAI,CAAC;AAAEF,YAAAA,WAAF;AAAe,eAAGL,IAAI,CAACQ,GAAL,GAAWR;AAA7B,WAAD,EAAsC,GAAGO,QAAzC,CAAb,CAAV;AACD,SAHD;AAIA,eAAO,MAAM;AACXZ,UAAAA,SAAS,CAACC,YAAD,CAAT,CAAwBa,cAAxB,CAAuCZ,SAAvC;AACD,SAFD;AAGD,OARD,CAQE,OAAOa,CAAP,EAAU;AACVC,QAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACD;AACF;AACF,GAlBQ,EAkBN,CAACZ,QAAD,EAAWC,UAAX,EAAuBJ,SAAvB,EAAkCC,YAAlC,EAAgDC,SAAhD,CAlBM,CAAT;AAoBA,SAAOI,OAAP;AACD;;GAxBuBP,gB","sourcesContent":["import { useEffect, useState } from \"react\";\n\n/*\n  ~ What it does? ~\n\n  Enables you to keep track of events\n\n  ~ How can I use? ~\n\n  const setPurposeEvents = useEventListener(readContracts, \"YourContract\", \"SetPurpose\", localProvider, 1);\n\n  ~ Features ~\n\n  - Provide readContracts by loading contracts (see more on ContractLoader.js)\n  - Specify the name of the contract, in this case it is \"YourContract\"\n  - Specify the name of the event in the contract, in this case we keep track of \"SetPurpose\" event\n  - Specify the provider\n*/\n\nexport default function useEventListener(contracts, contractName, eventName, provider, startBlock, args) {\n  const [updates, setUpdates] = useState([]);\n\n  useEffect(() => {\n    if (typeof provider !== \"undefined\" && typeof startBlock !== \"undefined\") {\n      // if you want to read _all_ events from your contracts, set this to the block number it is deployed\n      provider.resetEventsBlock(startBlock);\n    }\n    if (contracts && contractName && contracts[contractName]) {\n      try {\n        contracts[contractName].on(eventName, (...args) => {\n          const blockNumber = args[args.length - 1].blockNumber;\n          setUpdates(messages => [{ blockNumber, ...args.pop().args }, ...messages]);\n        });\n        return () => {\n          contracts[contractName].removeListener(eventName);\n        };\n      } catch (e) {\n        console.log(e);\n      }\n    }\n  }, [provider, startBlock, contracts, contractName, eventName]);\n\n  return updates;\n}\n"]},"metadata":{},"sourceType":"module"}