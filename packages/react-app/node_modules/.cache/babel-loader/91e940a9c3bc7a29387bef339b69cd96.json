{"ast":null,"code":"/*\n * Uses ethereumjs-tx to sign a transaction.\n *\n * The two callbacks a user needs to implement are:\n * - getAccounts() -- array of addresses supported\n * - getPrivateKey(address) -- return private key for a given address\n *\n * Optionally approveTransaction(), approveMessage() can be supplied too.\n */\nconst inherits = require('util').inherits;\n\nconst HookedWalletProvider = require('./hooked-wallet.js');\n\nconst EthTx = require('ethereumjs-tx');\n\nconst ethUtil = require('ethereumjs-util');\n\nconst sigUtil = require('eth-sig-util');\n\nmodule.exports = HookedWalletEthTxSubprovider;\ninherits(HookedWalletEthTxSubprovider, HookedWalletProvider);\n\nfunction HookedWalletEthTxSubprovider(opts) {\n  const self = this;\n  HookedWalletEthTxSubprovider.super_.call(self, opts);\n\n  self.signTransaction = function (txData, cb) {\n    // defaults\n    if (txData.gas !== undefined) txData.gasLimit = txData.gas;\n    txData.value = txData.value || '0x00';\n    txData.data = ethUtil.addHexPrefix(txData.data);\n    opts.getPrivateKey(txData.from, function (err, privateKey) {\n      if (err) return cb(err);\n      var tx = new EthTx(txData);\n      tx.sign(privateKey);\n      cb(null, '0x' + tx.serialize().toString('hex'));\n    });\n  };\n\n  self.signMessage = function (msgParams, cb) {\n    opts.getPrivateKey(msgParams.from, function (err, privateKey) {\n      if (err) return cb(err);\n      var dataBuff = ethUtil.toBuffer(msgParams.data);\n      var msgHash = ethUtil.hashPersonalMessage(dataBuff);\n      var sig = ethUtil.ecsign(msgHash, privateKey);\n      var serialized = ethUtil.bufferToHex(concatSig(sig.v, sig.r, sig.s));\n      cb(null, serialized);\n    });\n  };\n\n  self.signPersonalMessage = function (msgParams, cb) {\n    opts.getPrivateKey(msgParams.from, function (err, privateKey) {\n      if (err) return cb(err);\n      const serialized = sigUtil.personalSign(privateKey, msgParams);\n      cb(null, serialized);\n    });\n  };\n\n  self.signTypedMessage = function (msgParams, cb) {\n    opts.getPrivateKey(msgParams.from, function (err, privateKey) {\n      if (err) return cb(err);\n      const serialized = sigUtil.signTypedData(privateKey, msgParams);\n      cb(null, serialized);\n    });\n  };\n}\n\nfunction concatSig(v, r, s) {\n  r = ethUtil.fromSigned(r);\n  s = ethUtil.fromSigned(s);\n  v = ethUtil.bufferToInt(v);\n  r = ethUtil.toUnsigned(r).toString('hex').padStart(64, 0);\n  s = ethUtil.toUnsigned(s).toString('hex').padStart(64, 0);\n  v = ethUtil.stripHexPrefix(ethUtil.intToHex(v));\n  return ethUtil.addHexPrefix(r.concat(s, v).toString(\"hex\"));\n}","map":{"version":3,"sources":["/Users/chrisbuonocore/personal/hackathons/hackfs21/node_modules/burner-provider/node_modules/web3-provider-engine/subproviders/hooked-wallet-ethtx.js"],"names":["inherits","require","HookedWalletProvider","EthTx","ethUtil","sigUtil","module","exports","HookedWalletEthTxSubprovider","opts","self","super_","call","signTransaction","txData","cb","gas","undefined","gasLimit","value","data","addHexPrefix","getPrivateKey","from","err","privateKey","tx","sign","serialize","toString","signMessage","msgParams","dataBuff","toBuffer","msgHash","hashPersonalMessage","sig","ecsign","serialized","bufferToHex","concatSig","v","r","s","signPersonalMessage","personalSign","signTypedMessage","signTypedData","fromSigned","bufferToInt","toUnsigned","padStart","stripHexPrefix","intToHex","concat"],"mappings":"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","sourcesContent":["/*\n * Uses ethereumjs-tx to sign a transaction.\n *\n * The two callbacks a user needs to implement are:\n * - getAccounts() -- array of addresses supported\n * - getPrivateKey(address) -- return private key for a given address\n *\n * Optionally approveTransaction(), approveMessage() can be supplied too.\n */\n\nconst inherits = require('util').inherits\nconst HookedWalletProvider = require('./hooked-wallet.js')\nconst EthTx = require('ethereumjs-tx')\nconst ethUtil = require('ethereumjs-util')\nconst sigUtil = require('eth-sig-util')\n\nmodule.exports = HookedWalletEthTxSubprovider\n\ninherits(HookedWalletEthTxSubprovider, HookedWalletProvider)\n\nfunction HookedWalletEthTxSubprovider(opts) {\n  const self = this\n\n  HookedWalletEthTxSubprovider.super_.call(self, opts)\n\n  self.signTransaction = function(txData, cb) {\n    // defaults\n    if (txData.gas !== undefined) txData.gasLimit = txData.gas\n    txData.value = txData.value || '0x00'\n    txData.data = ethUtil.addHexPrefix(txData.data)\n\n    opts.getPrivateKey(txData.from, function(err, privateKey) {\n      if (err) return cb(err)\n\n      var tx = new EthTx(txData)\n      tx.sign(privateKey)\n      cb(null, '0x' + tx.serialize().toString('hex'))\n    })\n  }\n\n  self.signMessage = function(msgParams, cb) {\n    opts.getPrivateKey(msgParams.from, function(err, privateKey) {\n      if (err) return cb(err)\n      var dataBuff = ethUtil.toBuffer(msgParams.data)\n      var msgHash = ethUtil.hashPersonalMessage(dataBuff)\n      var sig = ethUtil.ecsign(msgHash, privateKey)\n      var serialized = ethUtil.bufferToHex(concatSig(sig.v, sig.r, sig.s))\n      cb(null, serialized)\n    })\n  }\n\n  self.signPersonalMessage = function(msgParams, cb) {\n    opts.getPrivateKey(msgParams.from, function(err, privateKey) {\n      if (err) return cb(err)\n      const serialized = sigUtil.personalSign(privateKey, msgParams)\n      cb(null, serialized)\n    })\n  }\n\n  self.signTypedMessage = function (msgParams, cb) {\n    opts.getPrivateKey(msgParams.from, function(err, privateKey) {\n      if (err) return cb(err)\n      const serialized = sigUtil.signTypedData(privateKey, msgParams)\n      cb(null, serialized)\n    })\n  }\n\n}\n\nfunction concatSig(v, r, s) {\n  r = ethUtil.fromSigned(r)\n  s = ethUtil.fromSigned(s)\n  v = ethUtil.bufferToInt(v)\n  r = ethUtil.toUnsigned(r).toString('hex').padStart(64, 0)\n  s = ethUtil.toUnsigned(s).toString('hex').padStart(64, 0)\n  v = ethUtil.stripHexPrefix(ethUtil.intToHex(v))\n  return ethUtil.addHexPrefix(r.concat(s, v).toString(\"hex\"))\n}\n"]},"metadata":{},"sourceType":"script"}