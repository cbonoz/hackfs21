{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { utils } from \"ethers\";\nimport { useEffect, useState } from \"react\";\n/*\n  ~ What it does? ~\n\n  Checks whether a contract exists on the blockchain, returns true if it exists, otherwise false\n\n  ~ How can I use? ~\n\n  const contractIsDeployed = useContractExistsAtAddress(localProvider, contractAddress);\n\n  ~ Features ~\n\n  - Provide contractAddress to check if the contract is deployed\n  - Change provider to check contract address on different chains (ex. mainnetProvider)\n*/\n\nconst useContractExistsAtAddress = (provider, contractAddress) => {\n  _s();\n\n  const [contractIsDeployed, setContractIsDeployed] = useState(false); // We can look at the blockchain and see what's stored at `contractAddress`\n  // If we find code then we know that a contract exists there.\n  // If we find nothing (0x0) then there is no contract deployed to that address\n\n  useEffect(() => {\n    // eslint-disable-next-line consistent-return\n    const checkDeployment = async () => {\n      if (!utils.isAddress(contractAddress)) return false;\n      const bytecode = await provider.getCode(contractAddress);\n      setContractIsDeployed(bytecode !== \"0x0\");\n    };\n\n    if (provider) checkDeployment();\n  }, [provider, contractAddress]);\n  return contractIsDeployed;\n};\n\n_s(useContractExistsAtAddress, \"nI/oZ8Nn3RIpYu7mO9kiuTR6r1I=\");\n\nexport default useContractExistsAtAddress;","map":{"version":3,"sources":["/Users/chrisbuonocore/personal/hackathons/hackfs21/packages/react-app/src/hooks/ContractExistsAtAddress.js"],"names":["utils","useEffect","useState","useContractExistsAtAddress","provider","contractAddress","contractIsDeployed","setContractIsDeployed","checkDeployment","isAddress","bytecode","getCode"],"mappings":";;AAAA,SAASA,KAAT,QAAsB,QAAtB;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,0BAA0B,GAAG,CAACC,QAAD,EAAWC,eAAX,KAA+B;AAAA;;AAChE,QAAM,CAACC,kBAAD,EAAqBC,qBAArB,IAA8CL,QAAQ,CAAC,KAAD,CAA5D,CADgE,CAGhE;AACA;AACA;;AACAD,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,UAAMO,eAAe,GAAG,YAAY;AAClC,UAAI,CAACR,KAAK,CAACS,SAAN,CAAgBJ,eAAhB,CAAL,EAAuC,OAAO,KAAP;AACvC,YAAMK,QAAQ,GAAG,MAAMN,QAAQ,CAACO,OAAT,CAAiBN,eAAjB,CAAvB;AACAE,MAAAA,qBAAqB,CAACG,QAAQ,KAAK,KAAd,CAArB;AACD,KAJD;;AAKA,QAAIN,QAAJ,EAAcI,eAAe;AAC9B,GARQ,EAQN,CAACJ,QAAD,EAAWC,eAAX,CARM,CAAT;AAUA,SAAOC,kBAAP;AACD,CAjBD;;GAAMH,0B;;AAmBN,eAAeA,0BAAf","sourcesContent":["import { utils } from \"ethers\";\nimport { useEffect, useState } from \"react\";\n\n/*\n  ~ What it does? ~\n\n  Checks whether a contract exists on the blockchain, returns true if it exists, otherwise false\n\n  ~ How can I use? ~\n\n  const contractIsDeployed = useContractExistsAtAddress(localProvider, contractAddress);\n\n  ~ Features ~\n\n  - Provide contractAddress to check if the contract is deployed\n  - Change provider to check contract address on different chains (ex. mainnetProvider)\n*/\n\nconst useContractExistsAtAddress = (provider, contractAddress) => {\n  const [contractIsDeployed, setContractIsDeployed] = useState(false);\n\n  // We can look at the blockchain and see what's stored at `contractAddress`\n  // If we find code then we know that a contract exists there.\n  // If we find nothing (0x0) then there is no contract deployed to that address\n  useEffect(() => {\n    // eslint-disable-next-line consistent-return\n    const checkDeployment = async () => {\n      if (!utils.isAddress(contractAddress)) return false;\n      const bytecode = await provider.getCode(contractAddress);\n      setContractIsDeployed(bytecode !== \"0x0\");\n    };\n    if (provider) checkDeployment();\n  }, [provider, contractAddress]);\n\n  return contractIsDeployed;\n};\n\nexport default useContractExistsAtAddress;\n"]},"metadata":{},"sourceType":"module"}