{"ast":null,"code":"var _jsxFileName = \"/Users/chrisbuonocore/personal/hackathons/hackfs21/packages/react-app/src/components/Contract/FunctionForm.jsx\",\n    _s = $RefreshSig$();\n\nimport { Button, Col, Divider, Input, Row, Tooltip } from \"antd\";\nimport React, { useState } from \"react\";\nimport Blockies from \"react-blockies\";\nimport { Transactor } from \"../../helpers\";\nimport tryToDisplay from \"./utils\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst {\n  utils,\n  BigNumber\n} = require(\"ethers\");\n\nexport default function FunctionForm({\n  contractFunction,\n  functionInfo,\n  provider,\n  gasPrice,\n  triggerRefresh\n}) {\n  _s();\n\n  const [form, setForm] = useState({});\n  const [txValue, setTxValue] = useState();\n  const [returnValue, setReturnValue] = useState();\n  const tx = Transactor(provider, gasPrice);\n  let inputIndex = 0;\n  const inputs = functionInfo.inputs.map(input => {\n    const key = functionInfo.name + \"_\" + input.name + \"_\" + input.type + \"_\" + inputIndex++;\n    let buttons = \"\";\n\n    if (input.type === \"bytes32\") {\n      buttons = /*#__PURE__*/_jsxDEV(Tooltip, {\n        placement: \"right\",\n        title: \"to bytes32\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          type: \"dashed\",\n          style: {\n            cursor: \"pointer\"\n          },\n          onClick: async () => {\n            if (utils.isHexString(form[key])) {\n              const formUpdate = { ...form\n              };\n              formUpdate[key] = utils.parseBytes32String(form[key]);\n              setForm(formUpdate);\n            } else {\n              const formUpdate = { ...form\n              };\n              formUpdate[key] = utils.formatBytes32String(form[key]);\n              setForm(formUpdate);\n            }\n          },\n          children: \"#\\uFE0F\\u20E3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }, this);\n    } else if (input.type === \"bytes\") {\n      buttons = /*#__PURE__*/_jsxDEV(Tooltip, {\n        placement: \"right\",\n        title: \"to hex\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          type: \"dashed\",\n          style: {\n            cursor: \"pointer\"\n          },\n          onClick: async () => {\n            if (utils.isHexString(form[key])) {\n              const formUpdate = { ...form\n              };\n              formUpdate[key] = utils.toUtf8String(form[key]);\n              setForm(formUpdate);\n            } else {\n              const formUpdate = { ...form\n              };\n              formUpdate[key] = utils.hexlify(utils.toUtf8Bytes(form[key]));\n              setForm(formUpdate);\n            }\n          },\n          children: \"#\\uFE0F\\u20E3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this);\n    } else if (input.type === \"uint256\") {\n      buttons = /*#__PURE__*/_jsxDEV(Tooltip, {\n        placement: \"right\",\n        title: \"* 10 ** 18\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          type: \"dashed\",\n          style: {\n            cursor: \"pointer\"\n          },\n          onClick: async () => {\n            const formUpdate = { ...form\n            };\n            formUpdate[key] = utils.parseEther(form[key]);\n            setForm(formUpdate);\n          },\n          children: \"\\u2734\\uFE0F\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this);\n    } else if (input.type === \"address\") {\n      const possibleAddress = form[key] && form[key].toLowerCase && form[key].toLowerCase().trim();\n\n      if (possibleAddress && possibleAddress.length === 42) {\n        buttons = /*#__PURE__*/_jsxDEV(Tooltip, {\n          placement: \"right\",\n          title: \"blockie\",\n          children: /*#__PURE__*/_jsxDEV(Blockies, {\n            seed: possibleAddress,\n            scale: 3\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this);\n      }\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        margin: 2\n      },\n      children: /*#__PURE__*/_jsxDEV(Input, {\n        size: \"large\",\n        placeholder: input.name ? input.type + \" \" + input.name : input.type,\n        autoComplete: \"off\",\n        value: form[key],\n        name: key,\n        onChange: event => {\n          const formUpdate = { ...form\n          };\n          formUpdate[event.target.name] = event.target.value;\n          setForm(formUpdate);\n        },\n        suffix: buttons\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this)\n    }, key, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this);\n  });\n\n  const txValueInput = /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      margin: 2\n    },\n    children: /*#__PURE__*/_jsxDEV(Input, {\n      placeholder: \"transaction value\",\n      onChange: e => setTxValue(e.target.value),\n      value: txValue,\n      addonAfter: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Row, {\n          children: [/*#__PURE__*/_jsxDEV(Col, {\n            span: 16,\n            children: /*#__PURE__*/_jsxDEV(Tooltip, {\n              placement: \"right\",\n              title: \" * 10^18 \",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                type: \"dashed\",\n                style: {\n                  cursor: \"pointer\"\n                },\n                onClick: async () => {\n                  const floatValue = parseFloat(txValue);\n                  if (floatValue) setTxValue(\"\" + floatValue * 10 ** 18);\n                },\n                children: \"\\u2733\\uFE0F\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 122,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Col, {\n            span: 16,\n            children: /*#__PURE__*/_jsxDEV(Tooltip, {\n              placement: \"right\",\n              title: \"number to hex\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                type: \"dashed\",\n                style: {\n                  cursor: \"pointer\"\n                },\n                onClick: async () => {\n                  setTxValue(BigNumber.from(txValue).toHexString());\n                },\n                children: \"#\\uFE0F\\u20E3\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 136,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 135,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this)\n  }, \"txValueInput\", false, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 5\n  }, this);\n\n  if (functionInfo.payable) {\n    inputs.push(txValueInput);\n  }\n\n  const buttonIcon = functionInfo.type === \"call\" ? /*#__PURE__*/_jsxDEV(Button, {\n    style: {\n      marginLeft: -32\n    },\n    children: \"Read\\uD83D\\uDCE1\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 160,\n    columnNumber: 7\n  }, this) : /*#__PURE__*/_jsxDEV(Button, {\n    style: {\n      marginLeft: -32\n    },\n    children: \"Send\\uD83D\\uDCB8\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 162,\n    columnNumber: 7\n  }, this);\n  inputs.push( /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      cursor: \"pointer\",\n      margin: 2\n    },\n    children: /*#__PURE__*/_jsxDEV(Input, {\n      onChange: e => setReturnValue(e.target.value),\n      defaultValue: \"\",\n      bordered: false,\n      disabled: true,\n      value: returnValue,\n      suffix: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: 50,\n          height: 30,\n          margin: 0\n        },\n        type: \"default\",\n        onClick: async () => {\n          let innerIndex = 0;\n          const args = functionInfo.inputs.map(input => {\n            const key = functionInfo.name + \"_\" + input.name + \"_\" + input.type + \"_\" + innerIndex++;\n            let value = form[key];\n\n            if (input.baseType === \"array\") {\n              value = JSON.parse(value);\n            } else if (input.type === \"bool\") {\n              if (value === \"true\" || value === \"1\" || value === \"0x1\" || value === \"0x01\" || value === \"0x0001\") {\n                value = 1;\n              } else {\n                value = 0;\n              }\n            }\n\n            return value;\n          });\n          let result;\n\n          if (functionInfo.stateMutability === \"view\" || functionInfo.stateMutability === \"pure\") {\n            const returned = await contractFunction(...args);\n            result = tryToDisplay(returned);\n          } else {\n            const overrides = {};\n\n            if (txValue) {\n              overrides.value = txValue; // ethers.utils.parseEther()\n            }\n\n            if (gasPrice) {\n              overrides.gasPrice = gasPrice;\n            } // Uncomment this if you want to skip the gas estimation for each transaction\n            // overrides.gasLimit = hexlify(1200000);\n            // console.log(\"Running with extras\",extras)\n\n\n            const returned = await tx(contractFunction(...args, overrides));\n            result = tryToDisplay(returned);\n          }\n\n          console.log(\"SETTING RESULT:\", result);\n          setReturnValue(result);\n          triggerRefresh(true);\n        },\n        children: buttonIcon\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }, this)\n  }, \"goButton\", false, {\n    fileName: _jsxFileName,\n    lineNumber: 165,\n    columnNumber: 5\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Row, {\n      children: [/*#__PURE__*/_jsxDEV(Col, {\n        span: 8,\n        style: {\n          textAlign: \"right\",\n          opacity: 0.333,\n          paddingRight: 6,\n          fontSize: 24\n        },\n        children: functionInfo.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        span: 16,\n        children: inputs\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 226,\n    columnNumber: 5\n  }, this);\n}\n\n_s(FunctionForm, \"b0jDw5H7XuKi4SNr9f+24uTw74I=\");\n\n_c = FunctionForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"FunctionForm\");","map":{"version":3,"sources":["/Users/chrisbuonocore/personal/hackathons/hackfs21/packages/react-app/src/components/Contract/FunctionForm.jsx"],"names":["Button","Col","Divider","Input","Row","Tooltip","React","useState","Blockies","Transactor","tryToDisplay","utils","BigNumber","require","FunctionForm","contractFunction","functionInfo","provider","gasPrice","triggerRefresh","form","setForm","txValue","setTxValue","returnValue","setReturnValue","tx","inputIndex","inputs","map","input","key","name","type","buttons","cursor","isHexString","formUpdate","parseBytes32String","formatBytes32String","toUtf8String","hexlify","toUtf8Bytes","parseEther","possibleAddress","toLowerCase","trim","length","margin","event","target","value","txValueInput","e","floatValue","parseFloat","from","toHexString","payable","push","buttonIcon","marginLeft","width","height","innerIndex","args","baseType","JSON","parse","result","stateMutability","returned","overrides","console","log","textAlign","opacity","paddingRight","fontSize"],"mappings":"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","sourcesContent":["import { Button, Col, Divider, Input, Row, Tooltip } from \"antd\";\nimport React, { useState } from \"react\";\nimport Blockies from \"react-blockies\";\nimport { Transactor } from \"../../helpers\";\nimport tryToDisplay from \"./utils\";\n\nconst { utils, BigNumber } = require(\"ethers\");\n\nexport default function FunctionForm({ contractFunction, functionInfo, provider, gasPrice, triggerRefresh }) {\n  const [form, setForm] = useState({});\n  const [txValue, setTxValue] = useState();\n  const [returnValue, setReturnValue] = useState();\n\n  const tx = Transactor(provider, gasPrice);\n\n  let inputIndex = 0;\n  const inputs = functionInfo.inputs.map(input => {\n    const key = functionInfo.name + \"_\" + input.name + \"_\" + input.type + \"_\" + inputIndex++;\n\n    let buttons = \"\";\n    if (input.type === \"bytes32\") {\n      buttons = (\n        <Tooltip placement=\"right\" title=\"to bytes32\">\n          <div\n            type=\"dashed\"\n            style={{ cursor: \"pointer\" }}\n            onClick={async () => {\n              if (utils.isHexString(form[key])) {\n                const formUpdate = { ...form };\n                formUpdate[key] = utils.parseBytes32String(form[key]);\n                setForm(formUpdate);\n              } else {\n                const formUpdate = { ...form };\n                formUpdate[key] = utils.formatBytes32String(form[key]);\n                setForm(formUpdate);\n              }\n            }}\n          >\n            #️⃣\n          </div>\n        </Tooltip>\n      );\n    } else if (input.type === \"bytes\") {\n      buttons = (\n        <Tooltip placement=\"right\" title=\"to hex\">\n          <div\n            type=\"dashed\"\n            style={{ cursor: \"pointer\" }}\n            onClick={async () => {\n              if (utils.isHexString(form[key])) {\n                const formUpdate = { ...form };\n                formUpdate[key] = utils.toUtf8String(form[key]);\n                setForm(formUpdate);\n              } else {\n                const formUpdate = { ...form };\n                formUpdate[key] = utils.hexlify(utils.toUtf8Bytes(form[key]));\n                setForm(formUpdate);\n              }\n            }}\n          >\n            #️⃣\n          </div>\n        </Tooltip>\n      );\n    } else if (input.type === \"uint256\") {\n      buttons = (\n        <Tooltip placement=\"right\" title=\"* 10 ** 18\">\n          <div\n            type=\"dashed\"\n            style={{ cursor: \"pointer\" }}\n            onClick={async () => {\n              const formUpdate = { ...form };\n              formUpdate[key] = utils.parseEther(form[key]);\n              setForm(formUpdate);\n            }}\n          >\n            ✴️\n          </div>\n        </Tooltip>\n      );\n    } else if (input.type === \"address\") {\n      const possibleAddress = form[key] && form[key].toLowerCase && form[key].toLowerCase().trim();\n      if (possibleAddress && possibleAddress.length === 42) {\n        buttons = (\n          <Tooltip placement=\"right\" title=\"blockie\">\n            <Blockies seed={possibleAddress} scale={3} />\n          </Tooltip>\n        );\n      }\n    }\n\n    return (\n      <div style={{ margin: 2 }} key={key}>\n        <Input\n          size=\"large\"\n          placeholder={input.name ? input.type + \" \" + input.name : input.type}\n          autoComplete=\"off\"\n          value={form[key]}\n          name={key}\n          onChange={event => {\n            const formUpdate = { ...form };\n            formUpdate[event.target.name] = event.target.value;\n            setForm(formUpdate);\n          }}\n          suffix={buttons}\n        />\n      </div>\n    );\n  });\n\n  const txValueInput = (\n    <div style={{ margin: 2 }} key=\"txValueInput\">\n      <Input\n        placeholder=\"transaction value\"\n        onChange={e => setTxValue(e.target.value)}\n        value={txValue}\n        addonAfter={\n          <div>\n            <Row>\n              <Col span={16}>\n                <Tooltip placement=\"right\" title=\" * 10^18 \">\n                  <div\n                    type=\"dashed\"\n                    style={{ cursor: \"pointer\" }}\n                    onClick={async () => {\n                      const floatValue = parseFloat(txValue);\n                      if (floatValue) setTxValue(\"\" + floatValue * 10 ** 18);\n                    }}\n                  >\n                    ✳️\n                  </div>\n                </Tooltip>\n              </Col>\n              <Col span={16}>\n                <Tooltip placement=\"right\" title=\"number to hex\">\n                  <div\n                    type=\"dashed\"\n                    style={{ cursor: \"pointer\" }}\n                    onClick={async () => {\n                      setTxValue(BigNumber.from(txValue).toHexString());\n                    }}\n                  >\n                    #️⃣\n                  </div>\n                </Tooltip>\n              </Col>\n            </Row>\n          </div>\n        }\n      />\n    </div>\n  );\n\n  if (functionInfo.payable) {\n    inputs.push(txValueInput);\n  }\n\n  const buttonIcon =\n    functionInfo.type === \"call\" ? (\n      <Button style={{ marginLeft: -32 }}>Read📡</Button>\n    ) : (\n      <Button style={{ marginLeft: -32 }}>Send💸</Button>\n    );\n  inputs.push(\n    <div style={{ cursor: \"pointer\", margin: 2 }} key=\"goButton\">\n      <Input\n        onChange={e => setReturnValue(e.target.value)}\n        defaultValue=\"\"\n        bordered={false}\n        disabled\n        value={returnValue}\n        suffix={\n          <div\n            style={{ width: 50, height: 30, margin: 0 }}\n            type=\"default\"\n            onClick={async () => {\n              let innerIndex = 0;\n              const args = functionInfo.inputs.map(input => {\n                const key = functionInfo.name + \"_\" + input.name + \"_\" + input.type + \"_\" + innerIndex++;\n                let value = form[key];\n                if (input.baseType === \"array\") {\n                  value = JSON.parse(value);\n                } else if (input.type === \"bool\") {\n                  if (value === \"true\" || value === \"1\" || value === \"0x1\" || value === \"0x01\" || value === \"0x0001\") {\n                    value = 1;\n                  } else {\n                    value = 0;\n                  }\n                }\n                return value;\n              });\n\n              let result;\n              if (functionInfo.stateMutability === \"view\" || functionInfo.stateMutability === \"pure\") {\n                const returned = await contractFunction(...args);\n                result = tryToDisplay(returned);\n              } else {\n                const overrides = {};\n                if (txValue) {\n                  overrides.value = txValue; // ethers.utils.parseEther()\n                }\n                if (gasPrice) {\n                  overrides.gasPrice = gasPrice;\n                }\n                // Uncomment this if you want to skip the gas estimation for each transaction\n                // overrides.gasLimit = hexlify(1200000);\n\n                // console.log(\"Running with extras\",extras)\n                const returned = await tx(contractFunction(...args, overrides));\n                result = tryToDisplay(returned);\n              }\n\n              console.log(\"SETTING RESULT:\", result);\n              setReturnValue(result);\n              triggerRefresh(true);\n            }}\n          >\n            {buttonIcon}\n          </div>\n        }\n      />\n    </div>,\n  );\n\n  return (\n    <div>\n      <Row>\n        <Col\n          span={8}\n          style={{\n            textAlign: \"right\",\n            opacity: 0.333,\n            paddingRight: 6,\n            fontSize: 24,\n          }}\n        >\n          {functionInfo.name}\n        </Col>\n        <Col span={16}>{inputs}</Col>\n      </Row>\n      <Divider />\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}