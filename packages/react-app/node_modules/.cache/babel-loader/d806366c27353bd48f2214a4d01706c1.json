{"ast":null,"code":"const safeStringify = require('fast-safe-stringify');\n/**\n * @class JsonRpcError\n * Error subclass implementing JSON RPC 2.0 errors and Ethereum RPC errors\n * per EIP 1474.\n * Permits any integer error code.\n */\n\n\nclass EthereumRpcError extends Error {\n  /**\n   * Create an Ethereum JSON RPC error.\n   * \n   * @param {number} code - The integer error code.\n   * @param {string} message - The string message.\n   * @param {any} [data] - The error data.\n   */\n  constructor(code, message, data) {\n    if (!Number.isInteger(code)) throw new Error('\"code\" must be an integer.');\n    if (!message || typeof message !== 'string') throw new Error('\"message\" must be a nonempty string.');\n    super(message);\n    this.code = code;\n    if (data !== undefined) this.data = data;\n  }\n  /**\n   * Returns a plain object with all public class properties.\n   * \n   * @returns {object} The serialized error. \n   */\n\n\n  serialize() {\n    const serialized = {\n      code: this.code,\n      message: this.message\n    };\n    if (this.data !== undefined) serialized.data = this.data;\n    if (this.stack) serialized.stack = this.stack;\n    return serialized;\n  }\n  /**\n   * Return a string representation of the serialized error, omitting\n   * any circular references.\n   * \n   * @returns {string} The serialized error as a string.\n   */\n\n\n  toString() {\n    return safeStringify(this.serialize(), stringifyReplacer, 2);\n  }\n\n}\n/**\n * @class EthereumRpcError\n * Error subclass implementing Ethereum Provider errors per EIP 1193.\n * Permits integer error codes in the [ 1000 <= 4999 ] range.\n */\n\n\nclass EthereumProviderError extends EthereumRpcError {\n  /**\n   * Create an Ethereum JSON RPC error.\n   * \n   * @param {number} code - The integer error code, in the [ 1000 <= 4999 ] range.\n   * @param {string} message - The string message.\n   * @param {any} [data] - The error data.\n   */\n  constructor(code, message, data) {\n    if (!isValidEthProviderCode(code)) {\n      throw new Error('\"code\" must be an integer such that: 1000 <= code <= 4999');\n    }\n\n    super(code, message, data);\n  }\n\n} // Internal\n\n\nfunction isValidEthProviderCode(code) {\n  return Number.isInteger(code) && code >= 1000 && code <= 4999;\n}\n\nfunction stringifyReplacer(_, value) {\n  if (value === '[Circular]') {\n    return;\n  }\n\n  return value;\n} // Exports\n\n\nmodule.exports = {\n  EthereumRpcError,\n  EthereumProviderError\n};","map":{"version":3,"sources":["/Users/chrisbuonocore/personal/hackathons/hackfs21/node_modules/eth-json-rpc-errors/src/classes.js"],"names":["safeStringify","require","EthereumRpcError","Error","constructor","code","message","data","Number","isInteger","undefined","serialize","serialized","stack","toString","stringifyReplacer","EthereumProviderError","isValidEthProviderCode","_","value","module","exports"],"mappings":"AACA,MAAMA,aAAa,GAAGC,OAAO,CAAC,qBAAD,CAA7B;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMC,gBAAN,SAA+BC,KAA/B,CAAqC;AAEnC;AACF;AACA;AACA;AACA;AACA;AACA;AACEC,EAAAA,WAAW,CAAEC,IAAF,EAAQC,OAAR,EAAiBC,IAAjB,EAAuB;AAEhC,QAAI,CAACC,MAAM,CAACC,SAAP,CAAiBJ,IAAjB,CAAL,EAA6B,MAAM,IAAIF,KAAJ,CACjC,4BADiC,CAAN;AAG7B,QAAI,CAACG,OAAD,IAAY,OAAOA,OAAP,KAAmB,QAAnC,EAA6C,MAAM,IAAIH,KAAJ,CACjD,sCADiD,CAAN;AAI7C,UAAMG,OAAN;AACA,SAAKD,IAAL,GAAYA,IAAZ;AACA,QAAIE,IAAI,KAAKG,SAAb,EAAwB,KAAKH,IAAL,GAAYA,IAAZ;AACzB;AAED;AACF;AACA;AACA;AACA;;;AACEI,EAAAA,SAAS,GAAG;AACV,UAAMC,UAAU,GAAG;AACjBP,MAAAA,IAAI,EAAE,KAAKA,IADM;AAEjBC,MAAAA,OAAO,EAAE,KAAKA;AAFG,KAAnB;AAIA,QAAI,KAAKC,IAAL,KAAcG,SAAlB,EAA6BE,UAAU,CAACL,IAAX,GAAkB,KAAKA,IAAvB;AAC7B,QAAI,KAAKM,KAAT,EAAgBD,UAAU,CAACC,KAAX,GAAmB,KAAKA,KAAxB;AAChB,WAAOD,UAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACEE,EAAAA,QAAQ,GAAG;AACT,WAAOd,aAAa,CAClB,KAAKW,SAAL,EADkB,EAElBI,iBAFkB,EAGlB,CAHkB,CAApB;AAKD;;AAlDkC;AAqDrC;AACA;AACA;AACA;AACA;;;AACA,MAAMC,qBAAN,SAAoCd,gBAApC,CAAqD;AAEnD;AACF;AACA;AACA;AACA;AACA;AACA;AACEE,EAAAA,WAAW,CAACC,IAAD,EAAOC,OAAP,EAAgBC,IAAhB,EAAsB;AAE/B,QAAI,CAACU,sBAAsB,CAACZ,IAAD,CAA3B,EAAmC;AACjC,YAAM,IAAIF,KAAJ,CACJ,2DADI,CAAN;AAGD;;AAED,UAAME,IAAN,EAAYC,OAAZ,EAAqBC,IAArB;AACD;;AAlBkD,C,CAqBrD;;;AAEA,SAASU,sBAAT,CAAgCZ,IAAhC,EAAsC;AACpC,SAAOG,MAAM,CAACC,SAAP,CAAiBJ,IAAjB,KAA0BA,IAAI,IAAI,IAAlC,IAA0CA,IAAI,IAAI,IAAzD;AACD;;AAED,SAASU,iBAAT,CAA2BG,CAA3B,EAA8BC,KAA9B,EAAqC;AACnC,MAAIA,KAAK,KAAK,YAAd,EAA4B;AAC1B;AACD;;AACD,SAAOA,KAAP;AACD,C,CAED;;;AAEAC,MAAM,CAACC,OAAP,GAAkB;AAChBnB,EAAAA,gBADgB;AAEhBc,EAAAA;AAFgB,CAAlB","sourcesContent":["\nconst safeStringify = require('fast-safe-stringify')\n\n/**\n * @class JsonRpcError\n * Error subclass implementing JSON RPC 2.0 errors and Ethereum RPC errors\n * per EIP 1474.\n * Permits any integer error code.\n */\nclass EthereumRpcError extends Error {\n\n  /**\n   * Create an Ethereum JSON RPC error.\n   * \n   * @param {number} code - The integer error code.\n   * @param {string} message - The string message.\n   * @param {any} [data] - The error data.\n   */\n  constructor (code, message, data) {\n\n    if (!Number.isInteger(code)) throw new Error(\n      '\"code\" must be an integer.'\n    )\n    if (!message || typeof message !== 'string') throw new Error(\n      '\"message\" must be a nonempty string.'\n    )\n\n    super(message)\n    this.code = code\n    if (data !== undefined) this.data = data\n  }\n\n  /**\n   * Returns a plain object with all public class properties.\n   * \n   * @returns {object} The serialized error. \n   */\n  serialize() {\n    const serialized = {\n      code: this.code,\n      message: this.message,\n    }\n    if (this.data !== undefined) serialized.data = this.data\n    if (this.stack) serialized.stack = this.stack\n    return serialized\n  }\n\n  /**\n   * Return a string representation of the serialized error, omitting\n   * any circular references.\n   * \n   * @returns {string} The serialized error as a string.\n   */\n  toString() {\n    return safeStringify(\n      this.serialize(),\n      stringifyReplacer,\n      2\n    )\n  }\n}\n\n/**\n * @class EthereumRpcError\n * Error subclass implementing Ethereum Provider errors per EIP 1193.\n * Permits integer error codes in the [ 1000 <= 4999 ] range.\n */\nclass EthereumProviderError extends EthereumRpcError {\n\n  /**\n   * Create an Ethereum JSON RPC error.\n   * \n   * @param {number} code - The integer error code, in the [ 1000 <= 4999 ] range.\n   * @param {string} message - The string message.\n   * @param {any} [data] - The error data.\n   */\n  constructor(code, message, data) {\n\n    if (!isValidEthProviderCode(code)) {\n      throw new Error(\n        '\"code\" must be an integer such that: 1000 <= code <= 4999'\n      )\n    }\n\n    super(code, message, data)\n  }\n}\n\n// Internal\n\nfunction isValidEthProviderCode(code) {\n  return Number.isInteger(code) && code >= 1000 && code <= 4999\n}\n\nfunction stringifyReplacer(_, value) {\n  if (value === '[Circular]') {\n    return\n  }\n  return value\n}\n\n// Exports\n\nmodule.exports =  {\n  EthereumRpcError,\n  EthereumProviderError\n}\n"]},"metadata":{},"sourceType":"script"}