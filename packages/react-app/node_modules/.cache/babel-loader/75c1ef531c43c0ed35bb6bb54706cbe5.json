{"ast":null,"code":"const xhr = process.browser ? require('xhr') : require('request');\n\nconst inherits = require('util').inherits;\n\nconst createPayload = require('../util/create-payload.js');\n\nconst Subprovider = require('./subprovider.js');\n\nconst {\n  ethErrors,\n  serializeError\n} = require('eth-json-rpc-errors');\n\nmodule.exports = RpcSource;\ninherits(RpcSource, Subprovider);\n\nfunction RpcSource(opts) {\n  const self = this;\n  self.rpcUrl = opts.rpcUrl;\n}\n\nRpcSource.prototype.handleRequest = function (payload, next, end) {\n  const self = this;\n  const targetUrl = self.rpcUrl; // overwrite id to conflict with other concurrent users\n\n  const sanitizedPayload = sanitizePayload(payload);\n  const newPayload = createPayload(sanitizedPayload);\n  xhr({\n    uri: targetUrl,\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(newPayload),\n    rejectUnauthorized: false,\n    timeout: 20000\n  }, function (err, res, body) {\n    if (err) return end(serializeError(err)); // check for error code\n\n    switch (res.statusCode) {\n      case 405:\n        return end(ethErrors.rpc.methodNotFound());\n\n      case 504:\n        // Gateway timeout\n        return function () {\n          let msg = `Gateway timeout. The request took too long to process. `;\n          msg += `This can happen when querying logs over too wide a block range.`;\n          const err = new Error(msg);\n          return end(serializeError(err));\n        }();\n\n      case 429:\n        // Too many requests (rate limiting)\n        return function () {\n          const err = new Error(`Too Many Requests`);\n          return end(serializeError(err));\n        }();\n\n      default:\n        if (res.statusCode != 200) {\n          const msg = 'Unknown Error: ' + res.body;\n          const err = new Error(msg);\n          return end(serializeError(err));\n        }\n\n    } // parse response\n\n\n    let data;\n\n    try {\n      data = JSON.parse(body);\n    } catch (err) {\n      console.error(err.stack);\n      return end(serializeError(err));\n    }\n\n    if (data.error) return end(data.error);\n    end(null, data.result);\n  });\n}; // drops any non-standard params\n\n\nfunction sanitizePayload(payload) {\n  return {\n    id: payload.id,\n    jsonrpc: payload.jsonrpc,\n    method: payload.method,\n    params: payload.params\n  };\n}","map":{"version":3,"sources":["/Users/chrisbuonocore/personal/hackathons/hackfs21/node_modules/burner-provider/node_modules/web3-provider-engine/subproviders/rpc.js"],"names":["xhr","process","browser","require","inherits","createPayload","Subprovider","ethErrors","serializeError","module","exports","RpcSource","opts","self","rpcUrl","prototype","handleRequest","payload","next","end","targetUrl","sanitizedPayload","sanitizePayload","newPayload","uri","method","headers","body","JSON","stringify","rejectUnauthorized","timeout","err","res","statusCode","rpc","methodNotFound","msg","Error","data","parse","console","error","stack","result","id","jsonrpc","params"],"mappings":"AAAA,MAAMA,GAAG,GAAGC,OAAO,CAACC,OAAR,GAAkBC,OAAO,CAAC,KAAD,CAAzB,GAAmCA,OAAO,CAAC,SAAD,CAAtD;;AACA,MAAMC,QAAQ,GAAGD,OAAO,CAAC,MAAD,CAAP,CAAgBC,QAAjC;;AACA,MAAMC,aAAa,GAAGF,OAAO,CAAC,2BAAD,CAA7B;;AACA,MAAMG,WAAW,GAAGH,OAAO,CAAC,kBAAD,CAA3B;;AACA,MAAM;AAAEI,EAAAA,SAAF;AAAaC,EAAAA;AAAb,IAAgCL,OAAO,CAAC,qBAAD,CAA7C;;AAGAM,MAAM,CAACC,OAAP,GAAiBC,SAAjB;AAEAP,QAAQ,CAACO,SAAD,EAAYL,WAAZ,CAAR;;AAEA,SAASK,SAAT,CAAmBC,IAAnB,EAAyB;AACvB,QAAMC,IAAI,GAAG,IAAb;AACAA,EAAAA,IAAI,CAACC,MAAL,GAAcF,IAAI,CAACE,MAAnB;AACD;;AAEDH,SAAS,CAACI,SAAV,CAAoBC,aAApB,GAAoC,UAASC,OAAT,EAAkBC,IAAlB,EAAwBC,GAAxB,EAA4B;AAC9D,QAAMN,IAAI,GAAG,IAAb;AACA,QAAMO,SAAS,GAAGP,IAAI,CAACC,MAAvB,CAF8D,CAI9D;;AACA,QAAMO,gBAAgB,GAAGC,eAAe,CAACL,OAAD,CAAxC;AACA,QAAMM,UAAU,GAAGlB,aAAa,CAACgB,gBAAD,CAAhC;AAEArB,EAAAA,GAAG,CAAC;AACFwB,IAAAA,GAAG,EAAEJ,SADH;AAEFK,IAAAA,MAAM,EAAE,MAFN;AAGFC,IAAAA,OAAO,EAAE;AACP,gBAAU,kBADH;AAEP,sBAAgB;AAFT,KAHP;AAOFC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,UAAf,CAPJ;AAQFO,IAAAA,kBAAkB,EAAE,KARlB;AASFC,IAAAA,OAAO,EAAE;AATP,GAAD,EAUA,UAASC,GAAT,EAAcC,GAAd,EAAmBN,IAAnB,EAAyB;AAC1B,QAAIK,GAAJ,EAAS,OAAOb,GAAG,CAACX,cAAc,CAACwB,GAAD,CAAf,CAAV,CADiB,CAG1B;;AACA,YAAQC,GAAG,CAACC,UAAZ;AACE,WAAK,GAAL;AACE,eAAOf,GAAG,CAACZ,SAAS,CAAC4B,GAAV,CAAcC,cAAd,EAAD,CAAV;;AACF,WAAK,GAAL;AAAU;AACR,eAAQ,YAAU;AAChB,cAAIC,GAAG,GAAI,yDAAX;AACAA,UAAAA,GAAG,IAAK,iEAAR;AACA,gBAAML,GAAG,GAAG,IAAIM,KAAJ,CAAUD,GAAV,CAAZ;AACA,iBAAOlB,GAAG,CAACX,cAAc,CAACwB,GAAD,CAAf,CAAV;AACD,SALM,EAAP;;AAMF,WAAK,GAAL;AAAU;AACR,eAAQ,YAAU;AAChB,gBAAMA,GAAG,GAAG,IAAIM,KAAJ,CAAW,mBAAX,CAAZ;AACA,iBAAOnB,GAAG,CAACX,cAAc,CAACwB,GAAD,CAAf,CAAV;AACD,SAHM,EAAP;;AAIF;AACE,YAAIC,GAAG,CAACC,UAAJ,IAAkB,GAAtB,EAA2B;AACzB,gBAAMG,GAAG,GAAG,oBAAoBJ,GAAG,CAACN,IAApC;AACA,gBAAMK,GAAG,GAAG,IAAIM,KAAJ,CAAUD,GAAV,CAAZ;AACA,iBAAOlB,GAAG,CAACX,cAAc,CAACwB,GAAD,CAAf,CAAV;AACD;;AApBL,KAJ0B,CA2B1B;;;AACA,QAAIO,IAAJ;;AACA,QAAI;AACFA,MAAAA,IAAI,GAAGX,IAAI,CAACY,KAAL,CAAWb,IAAX,CAAP;AACD,KAFD,CAEE,OAAOK,GAAP,EAAY;AACZS,MAAAA,OAAO,CAACC,KAAR,CAAcV,GAAG,CAACW,KAAlB;AACA,aAAOxB,GAAG,CAACX,cAAc,CAACwB,GAAD,CAAf,CAAV;AACD;;AACD,QAAIO,IAAI,CAACG,KAAT,EAAgB,OAAOvB,GAAG,CAACoB,IAAI,CAACG,KAAN,CAAV;AAEhBvB,IAAAA,GAAG,CAAC,IAAD,EAAOoB,IAAI,CAACK,MAAZ,CAAH;AACD,GAhDE,CAAH;AAiDD,CAzDD,C,CA2DA;;;AACA,SAAStB,eAAT,CAA0BL,OAA1B,EAAmC;AACjC,SAAO;AACL4B,IAAAA,EAAE,EAAE5B,OAAO,CAAC4B,EADP;AAELC,IAAAA,OAAO,EAAE7B,OAAO,CAAC6B,OAFZ;AAGLrB,IAAAA,MAAM,EAAER,OAAO,CAACQ,MAHX;AAILsB,IAAAA,MAAM,EAAE9B,OAAO,CAAC8B;AAJX,GAAP;AAMD","sourcesContent":["const xhr = process.browser ? require('xhr') : require('request')\nconst inherits = require('util').inherits\nconst createPayload = require('../util/create-payload.js')\nconst Subprovider = require('./subprovider.js')\nconst { ethErrors, serializeError } = require('eth-json-rpc-errors')\n\n\nmodule.exports = RpcSource\n\ninherits(RpcSource, Subprovider)\n\nfunction RpcSource(opts) {\n  const self = this\n  self.rpcUrl = opts.rpcUrl\n}\n\nRpcSource.prototype.handleRequest = function(payload, next, end){\n  const self = this\n  const targetUrl = self.rpcUrl\n\n  // overwrite id to conflict with other concurrent users\n  const sanitizedPayload = sanitizePayload(payload)\n  const newPayload = createPayload(sanitizedPayload)\n\n  xhr({\n    uri: targetUrl,\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(newPayload),\n    rejectUnauthorized: false,\n    timeout: 20000,\n  }, function(err, res, body) {\n    if (err) return end(serializeError(err))\n\n    // check for error code\n    switch (res.statusCode) {\n      case 405:\n        return end(ethErrors.rpc.methodNotFound())\n      case 504: // Gateway timeout\n        return (function(){\n          let msg = `Gateway timeout. The request took too long to process. `\n          msg += `This can happen when querying logs over too wide a block range.`\n          const err = new Error(msg)\n          return end(serializeError(err))\n        })()\n      case 429: // Too many requests (rate limiting)\n        return (function(){\n          const err = new Error(`Too Many Requests`)\n          return end(serializeError(err))\n        })()\n      default:\n        if (res.statusCode != 200) {\n          const msg = 'Unknown Error: ' + res.body\n          const err = new Error(msg)\n          return end(serializeError(err))\n        }\n    }\n\n    // parse response\n    let data\n    try {\n      data = JSON.parse(body)\n    } catch (err) {\n      console.error(err.stack)\n      return end(serializeError(err))\n    }\n    if (data.error) return end(data.error)\n\n    end(null, data.result)\n  })\n}\n\n// drops any non-standard params\nfunction sanitizePayload (payload) {\n  return {\n    id: payload.id,\n    jsonrpc: payload.jsonrpc,\n    method: payload.method,\n    params: payload.params,\n  }\n}"]},"metadata":{},"sourceType":"script"}