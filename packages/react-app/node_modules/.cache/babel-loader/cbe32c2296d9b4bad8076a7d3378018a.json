{"ast":null,"code":"import { WordArray, Hasher } from './core.js';\nimport { X64Word } from './x64-core.js'; // Constants tables\n\nconst RHO_OFFSETS = [];\nconst PI_INDEXES = [];\nconst ROUND_CONSTANTS = []; // Compute Constants\n// Compute rho offset constants\n\nlet _x = 1;\nlet _y = 0;\n\nfor (let t = 0; t < 24; t += 1) {\n  RHO_OFFSETS[_x + 5 * _y] = (t + 1) * (t + 2) / 2 % 64;\n  const newX = _y % 5;\n  const newY = (2 * _x + 3 * _y) % 5;\n  _x = newX;\n  _y = newY;\n} // Compute pi index constants\n\n\nfor (let x = 0; x < 5; x += 1) {\n  for (let y = 0; y < 5; y += 1) {\n    PI_INDEXES[x + 5 * y] = y + (2 * x + 3 * y) % 5 * 5;\n  }\n} // Compute round constants\n\n\nlet LFSR = 0x01;\n\nfor (let i = 0; i < 24; i += 1) {\n  let roundConstantMsw = 0;\n  let roundConstantLsw = 0;\n\n  for (let j = 0; j < 7; j += 1) {\n    if (LFSR & 0x01) {\n      const bitPosition = (1 << j) - 1;\n\n      if (bitPosition < 32) {\n        roundConstantLsw ^= 1 << bitPosition;\n      } else\n        /* if (bitPosition >= 32) */\n        {\n          roundConstantMsw ^= 1 << bitPosition - 32;\n        }\n    } // Compute next LFSR\n\n\n    if (LFSR & 0x80) {\n      // Primitive polynomial over GF(2): x^8 + x^6 + x^5 + x^4 + 1\n      LFSR = LFSR << 1 ^ 0x71;\n    } else {\n      LFSR <<= 1;\n    }\n  }\n\n  ROUND_CONSTANTS[i] = X64Word.create(roundConstantMsw, roundConstantLsw);\n} // Reusable objects for temporary values\n\n\nconst T = [];\n\nfor (let i = 0; i < 25; i += 1) {\n  T[i] = X64Word.create();\n}\n/**\n * SHA-3 hash algorithm.\n */\n\n\nexport class SHA3Algo extends Hasher {\n  constructor(cfg) {\n    /**\n     * Configuration options.\n     *\n     * @property {number} outputLength\n     *   The desired number of bits in the output hash.\n     *   Only values permitted are: 224, 256, 384, 512.\n     *   Default: 512\n     */\n    super(Object.assign({\n      outputLength: 512\n    }, cfg));\n  }\n\n  _doReset() {\n    this._state = [];\n    const state = this._state;\n\n    for (let i = 0; i < 25; i += 1) {\n      state[i] = new X64Word();\n    }\n\n    this.blockSize = (1600 - 2 * this.cfg.outputLength) / 32;\n  }\n\n  _doProcessBlock(M, offset) {\n    // Shortcuts\n    const state = this._state;\n    const nBlockSizeLanes = this.blockSize / 2; // Absorb\n\n    for (let i = 0; i < nBlockSizeLanes; i += 1) {\n      // Shortcuts\n      let M2i = M[offset + 2 * i];\n      let M2i1 = M[offset + 2 * i + 1]; // Swap endian\n\n      M2i = (M2i << 8 | M2i >>> 24) & 0x00ff00ff | (M2i << 24 | M2i >>> 8) & 0xff00ff00;\n      M2i1 = (M2i1 << 8 | M2i1 >>> 24) & 0x00ff00ff | (M2i1 << 24 | M2i1 >>> 8) & 0xff00ff00; // Absorb message into state\n\n      const lane = state[i];\n      lane.high ^= M2i1;\n      lane.low ^= M2i;\n    } // Rounds\n\n\n    for (let round = 0; round < 24; round += 1) {\n      // Theta\n      for (let x = 0; x < 5; x += 1) {\n        // Mix column lanes\n        let tMsw = 0;\n        let tLsw = 0;\n\n        for (let y = 0; y < 5; y += 1) {\n          const lane = state[x + 5 * y];\n          tMsw ^= lane.high;\n          tLsw ^= lane.low;\n        } // Temporary values\n\n\n        const Tx = T[x];\n        Tx.high = tMsw;\n        Tx.low = tLsw;\n      }\n\n      for (let x = 0; x < 5; x += 1) {\n        // Shortcuts\n        const Tx4 = T[(x + 4) % 5];\n        const Tx1 = T[(x + 1) % 5];\n        const Tx1Msw = Tx1.high;\n        const Tx1Lsw = Tx1.low; // Mix surrounding columns\n\n        const tMsw = Tx4.high ^ (Tx1Msw << 1 | Tx1Lsw >>> 31);\n        const tLsw = Tx4.low ^ (Tx1Lsw << 1 | Tx1Msw >>> 31);\n\n        for (let y = 0; y < 5; y += 1) {\n          const lane = state[x + 5 * y];\n          lane.high ^= tMsw;\n          lane.low ^= tLsw;\n        }\n      } // Rho Pi\n\n\n      for (let laneIndex = 1; laneIndex < 25; laneIndex += 1) {\n        let tMsw;\n        let tLsw; // Shortcuts\n\n        const lane = state[laneIndex];\n        const laneMsw = lane.high;\n        const laneLsw = lane.low;\n        const rhoOffset = RHO_OFFSETS[laneIndex]; // Rotate lanes\n\n        if (rhoOffset < 32) {\n          tMsw = laneMsw << rhoOffset | laneLsw >>> 32 - rhoOffset;\n          tLsw = laneLsw << rhoOffset | laneMsw >>> 32 - rhoOffset;\n        } else\n          /* if (rhoOffset >= 32) */\n          {\n            tMsw = laneLsw << rhoOffset - 32 | laneMsw >>> 64 - rhoOffset;\n            tLsw = laneMsw << rhoOffset - 32 | laneLsw >>> 64 - rhoOffset;\n          } // Transpose lanes\n\n\n        const TPiLane = T[PI_INDEXES[laneIndex]];\n        TPiLane.high = tMsw;\n        TPiLane.low = tLsw;\n      } // Rho pi at x = y = 0\n\n\n      const T0 = T[0];\n      const state0 = state[0];\n      T0.high = state0.high;\n      T0.low = state0.low; // Chi\n\n      for (let x = 0; x < 5; x += 1) {\n        for (let y = 0; y < 5; y += 1) {\n          // Shortcuts\n          const laneIndex = x + 5 * y;\n          const lane = state[laneIndex];\n          const TLane = T[laneIndex];\n          const Tx1Lane = T[(x + 1) % 5 + 5 * y];\n          const Tx2Lane = T[(x + 2) % 5 + 5 * y]; // Mix rows\n\n          lane.high = TLane.high ^ ~Tx1Lane.high & Tx2Lane.high;\n          lane.low = TLane.low ^ ~Tx1Lane.low & Tx2Lane.low;\n        }\n      } // Iota\n\n\n      const lane = state[0];\n      const roundConstant = ROUND_CONSTANTS[round];\n      lane.high ^= roundConstant.high;\n      lane.low ^= roundConstant.low;\n    }\n  }\n\n  _doFinalize() {\n    // Shortcuts\n    const data = this._data;\n    const dataWords = data.words;\n    const nBitsLeft = data.sigBytes * 8;\n    const blockSizeBits = this.blockSize * 32; // Add padding\n\n    dataWords[nBitsLeft >>> 5] |= 0x1 << 24 - nBitsLeft % 32;\n    dataWords[(Math.ceil((nBitsLeft + 1) / blockSizeBits) * blockSizeBits >>> 5) - 1] |= 0x80;\n    data.sigBytes = dataWords.length * 4; // Hash final blocks\n\n    this._process(); // Shortcuts\n\n\n    const state = this._state;\n    const outputLengthBytes = this.cfg.outputLength / 8;\n    const outputLengthLanes = outputLengthBytes / 8; // Squeeze\n\n    const hashWords = [];\n\n    for (let i = 0; i < outputLengthLanes; i += 1) {\n      // Shortcuts\n      const lane = state[i];\n      let laneMsw = lane.high;\n      let laneLsw = lane.low; // Swap endian\n\n      laneMsw = (laneMsw << 8 | laneMsw >>> 24) & 0x00ff00ff | (laneMsw << 24 | laneMsw >>> 8) & 0xff00ff00;\n      laneLsw = (laneLsw << 8 | laneLsw >>> 24) & 0x00ff00ff | (laneLsw << 24 | laneLsw >>> 8) & 0xff00ff00; // Squeeze state to retrieve hash\n\n      hashWords.push(laneLsw);\n      hashWords.push(laneMsw);\n    } // Return final computed hash\n\n\n    return new WordArray(hashWords, outputLengthBytes);\n  }\n\n  clone() {\n    const clone = super.clone.call(this);\n    clone._state = this._state.slice(0);\n    const state = clone._state;\n\n    for (let i = 0; i < 25; i += 1) {\n      state[i] = state[i].clone();\n    }\n\n    return clone;\n  }\n\n}\n/**\n * Shortcut function to the hasher's object interface.\n *\n * @param {WordArray|string} message The message to hash.\n *\n * @return {WordArray} The hash.\n *\n * @static\n *\n * @example\n *\n *     var hash = CryptoJS.SHA3('message');\n *     var hash = CryptoJS.SHA3(wordArray);\n */\n\nexport const SHA3 = Hasher._createHelper(SHA3Algo);\n/**\n * Shortcut function to the HMAC's object interface.\n *\n * @param {WordArray|string} message The message to hash.\n * @param {WordArray|string} key The secret key.\n *\n * @return {WordArray} The HMAC.\n *\n * @static\n *\n * @example\n *\n *     var hmac = CryptoJS.HmacSHA3(message, key);\n */\n\nexport const HmacSHA3 = Hasher._createHmacHelper(SHA3Algo);","map":{"version":3,"sources":["/Users/chrisbuonocore/personal/hackathons/hackfs21/node_modules/crypto-es/lib/sha3.js"],"names":["WordArray","Hasher","X64Word","RHO_OFFSETS","PI_INDEXES","ROUND_CONSTANTS","_x","_y","t","newX","newY","x","y","LFSR","i","roundConstantMsw","roundConstantLsw","j","bitPosition","create","T","SHA3Algo","constructor","cfg","Object","assign","outputLength","_doReset","_state","state","blockSize","_doProcessBlock","M","offset","nBlockSizeLanes","M2i","M2i1","lane","high","low","round","tMsw","tLsw","Tx","Tx4","Tx1","Tx1Msw","Tx1Lsw","laneIndex","laneMsw","laneLsw","rhoOffset","TPiLane","T0","state0","TLane","Tx1Lane","Tx2Lane","roundConstant","_doFinalize","data","_data","dataWords","words","nBitsLeft","sigBytes","blockSizeBits","Math","ceil","length","_process","outputLengthBytes","outputLengthLanes","hashWords","push","clone","call","slice","SHA3","_createHelper","HmacSHA3","_createHmacHelper"],"mappings":"AAAA,SACEA,SADF,EAEEC,MAFF,QAGO,WAHP;AAIA,SAASC,OAAT,QAAwB,eAAxB,C,CAEA;;AACA,MAAMC,WAAW,GAAG,EAApB;AACA,MAAMC,UAAU,GAAG,EAAnB;AACA,MAAMC,eAAe,GAAG,EAAxB,C,CAEA;AACA;;AACA,IAAIC,EAAE,GAAG,CAAT;AACA,IAAIC,EAAE,GAAG,CAAT;;AACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,IAAI,CAA7B,EAAgC;AAC9BL,EAAAA,WAAW,CAACG,EAAE,GAAG,IAAIC,EAAV,CAAX,GAA4B,CAACC,CAAC,GAAG,CAAL,KAAWA,CAAC,GAAG,CAAf,IAAoB,CAArB,GAA0B,EAArD;AAEA,QAAMC,IAAI,GAAGF,EAAE,GAAG,CAAlB;AACA,QAAMG,IAAI,GAAG,CAAC,IAAIJ,EAAJ,GAAS,IAAIC,EAAd,IAAoB,CAAjC;AACAD,EAAAA,EAAE,GAAGG,IAAL;AACAF,EAAAA,EAAE,GAAGG,IAAL;AACD,C,CAED;;;AACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,IAAI,CAA5B,EAA+B;AAC7B,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,IAAI,CAA5B,EAA+B;AAC7BR,IAAAA,UAAU,CAACO,CAAC,GAAG,IAAIC,CAAT,CAAV,GAAwBA,CAAC,GAAI,CAAC,IAAID,CAAJ,GAAQ,IAAIC,CAAb,IAAkB,CAAnB,GAAwB,CAApD;AACD;AACF,C,CAED;;;AACA,IAAIC,IAAI,GAAG,IAAX;;AACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,IAAI,CAA7B,EAAgC;AAC9B,MAAIC,gBAAgB,GAAG,CAAvB;AACA,MAAIC,gBAAgB,GAAG,CAAvB;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,IAAI,CAA5B,EAA+B;AAC7B,QAAIJ,IAAI,GAAG,IAAX,EAAiB;AACf,YAAMK,WAAW,GAAG,CAAC,KAAKD,CAAN,IAAW,CAA/B;;AACA,UAAIC,WAAW,GAAG,EAAlB,EAAsB;AACpBF,QAAAA,gBAAgB,IAAI,KAAKE,WAAzB;AACD,OAFD;AAEO;AAA6B;AAClCH,UAAAA,gBAAgB,IAAI,KAAMG,WAAW,GAAG,EAAxC;AACD;AACF,KAR4B,CAU7B;;;AACA,QAAIL,IAAI,GAAG,IAAX,EAAiB;AACf;AACAA,MAAAA,IAAI,GAAIA,IAAI,IAAI,CAAT,GAAc,IAArB;AACD,KAHD,MAGO;AACLA,MAAAA,IAAI,KAAK,CAAT;AACD;AACF;;AAEDR,EAAAA,eAAe,CAACS,CAAD,CAAf,GAAqBZ,OAAO,CAACiB,MAAR,CAAeJ,gBAAf,EAAiCC,gBAAjC,CAArB;AACD,C,CAED;;;AACA,MAAMI,CAAC,GAAG,EAAV;;AACA,KAAK,IAAIN,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,IAAI,CAA7B,EAAgC;AAC9BM,EAAAA,CAAC,CAACN,CAAD,CAAD,GAAOZ,OAAO,CAACiB,MAAR,EAAP;AACD;AAED;AACA;AACA;;;AACA,OAAO,MAAME,QAAN,SAAuBpB,MAAvB,CAA8B;AACnCqB,EAAAA,WAAW,CAACC,GAAD,EAAM;AACf;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACI,UAAMC,MAAM,CAACC,MAAP,CACJ;AAAEC,MAAAA,YAAY,EAAE;AAAhB,KADI,EAEJH,GAFI,CAAN;AAID;;AAEDI,EAAAA,QAAQ,GAAG;AACT,SAAKC,MAAL,GAAc,EAAd;AACA,UAAMC,KAAK,GAAG,KAAKD,MAAnB;;AACA,SAAK,IAAId,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,IAAI,CAA7B,EAAgC;AAC9Be,MAAAA,KAAK,CAACf,CAAD,CAAL,GAAW,IAAIZ,OAAJ,EAAX;AACD;;AAED,SAAK4B,SAAL,GAAiB,CAAC,OAAO,IAAI,KAAKP,GAAL,CAASG,YAArB,IAAqC,EAAtD;AACD;;AAEDK,EAAAA,eAAe,CAACC,CAAD,EAAIC,MAAJ,EAAY;AACzB;AACA,UAAMJ,KAAK,GAAG,KAAKD,MAAnB;AACA,UAAMM,eAAe,GAAG,KAAKJ,SAAL,GAAiB,CAAzC,CAHyB,CAKzB;;AACA,SAAK,IAAIhB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGoB,eAApB,EAAqCpB,CAAC,IAAI,CAA1C,EAA6C;AAC3C;AACA,UAAIqB,GAAG,GAAGH,CAAC,CAACC,MAAM,GAAG,IAAInB,CAAd,CAAX;AACA,UAAIsB,IAAI,GAAGJ,CAAC,CAACC,MAAM,GAAG,IAAInB,CAAb,GAAiB,CAAlB,CAAZ,CAH2C,CAK3C;;AACAqB,MAAAA,GAAG,GAAI,CAAEA,GAAG,IAAI,CAAR,GAAcA,GAAG,KAAK,EAAvB,IAA8B,UAA/B,GACD,CAAEA,GAAG,IAAI,EAAR,GAAeA,GAAG,KAAK,CAAxB,IAA8B,UADnC;AAEAC,MAAAA,IAAI,GAAI,CAAEA,IAAI,IAAI,CAAT,GAAeA,IAAI,KAAK,EAAzB,IAAgC,UAAjC,GACF,CAAEA,IAAI,IAAI,EAAT,GAAgBA,IAAI,KAAK,CAA1B,IAAgC,UADrC,CAR2C,CAW3C;;AACA,YAAMC,IAAI,GAAGR,KAAK,CAACf,CAAD,CAAlB;AACAuB,MAAAA,IAAI,CAACC,IAAL,IAAaF,IAAb;AACAC,MAAAA,IAAI,CAACE,GAAL,IAAYJ,GAAZ;AACD,KArBwB,CAuBzB;;;AACA,SAAK,IAAIK,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAG,EAA5B,EAAgCA,KAAK,IAAI,CAAzC,EAA4C;AAC1C;AACA,WAAK,IAAI7B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,IAAI,CAA5B,EAA+B;AAC7B;AACA,YAAI8B,IAAI,GAAG,CAAX;AACA,YAAIC,IAAI,GAAG,CAAX;;AACA,aAAK,IAAI9B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,IAAI,CAA5B,EAA+B;AAC7B,gBAAMyB,IAAI,GAAGR,KAAK,CAAClB,CAAC,GAAG,IAAIC,CAAT,CAAlB;AACA6B,UAAAA,IAAI,IAAIJ,IAAI,CAACC,IAAb;AACAI,UAAAA,IAAI,IAAIL,IAAI,CAACE,GAAb;AACD,SAR4B,CAU7B;;;AACA,cAAMI,EAAE,GAAGvB,CAAC,CAACT,CAAD,CAAZ;AACAgC,QAAAA,EAAE,CAACL,IAAH,GAAUG,IAAV;AACAE,QAAAA,EAAE,CAACJ,GAAH,GAASG,IAAT;AACD;;AACD,WAAK,IAAI/B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,IAAI,CAA5B,EAA+B;AAC7B;AACA,cAAMiC,GAAG,GAAGxB,CAAC,CAAC,CAACT,CAAC,GAAG,CAAL,IAAU,CAAX,CAAb;AACA,cAAMkC,GAAG,GAAGzB,CAAC,CAAC,CAACT,CAAC,GAAG,CAAL,IAAU,CAAX,CAAb;AACA,cAAMmC,MAAM,GAAGD,GAAG,CAACP,IAAnB;AACA,cAAMS,MAAM,GAAGF,GAAG,CAACN,GAAnB,CAL6B,CAO7B;;AACA,cAAME,IAAI,GAAGG,GAAG,CAACN,IAAJ,IAAaQ,MAAM,IAAI,CAAX,GAAiBC,MAAM,KAAK,EAAxC,CAAb;AACA,cAAML,IAAI,GAAGE,GAAG,CAACL,GAAJ,IAAYQ,MAAM,IAAI,CAAX,GAAiBD,MAAM,KAAK,EAAvC,CAAb;;AACA,aAAK,IAAIlC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,IAAI,CAA5B,EAA+B;AAC7B,gBAAMyB,IAAI,GAAGR,KAAK,CAAClB,CAAC,GAAG,IAAIC,CAAT,CAAlB;AACAyB,UAAAA,IAAI,CAACC,IAAL,IAAaG,IAAb;AACAJ,UAAAA,IAAI,CAACE,GAAL,IAAYG,IAAZ;AACD;AACF,OAhCyC,CAkC1C;;;AACA,WAAK,IAAIM,SAAS,GAAG,CAArB,EAAwBA,SAAS,GAAG,EAApC,EAAwCA,SAAS,IAAI,CAArD,EAAwD;AACtD,YAAIP,IAAJ;AACA,YAAIC,IAAJ,CAFsD,CAItD;;AACA,cAAML,IAAI,GAAGR,KAAK,CAACmB,SAAD,CAAlB;AACA,cAAMC,OAAO,GAAGZ,IAAI,CAACC,IAArB;AACA,cAAMY,OAAO,GAAGb,IAAI,CAACE,GAArB;AACA,cAAMY,SAAS,GAAGhD,WAAW,CAAC6C,SAAD,CAA7B,CARsD,CAUtD;;AACA,YAAIG,SAAS,GAAG,EAAhB,EAAoB;AAClBV,UAAAA,IAAI,GAAIQ,OAAO,IAAIE,SAAZ,GAA0BD,OAAO,KAAM,KAAKC,SAAnD;AACAT,UAAAA,IAAI,GAAIQ,OAAO,IAAIC,SAAZ,GAA0BF,OAAO,KAAM,KAAKE,SAAnD;AACD,SAHD;AAGO;AAA2B;AAChCV,YAAAA,IAAI,GAAIS,OAAO,IAAKC,SAAS,GAAG,EAAzB,GAAiCF,OAAO,KAAM,KAAKE,SAA1D;AACAT,YAAAA,IAAI,GAAIO,OAAO,IAAKE,SAAS,GAAG,EAAzB,GAAiCD,OAAO,KAAM,KAAKC,SAA1D;AACD,WAjBqD,CAmBtD;;;AACA,cAAMC,OAAO,GAAGhC,CAAC,CAAChB,UAAU,CAAC4C,SAAD,CAAX,CAAjB;AACAI,QAAAA,OAAO,CAACd,IAAR,GAAeG,IAAf;AACAW,QAAAA,OAAO,CAACb,GAAR,GAAcG,IAAd;AACD,OA1DyC,CA4D1C;;;AACA,YAAMW,EAAE,GAAGjC,CAAC,CAAC,CAAD,CAAZ;AACA,YAAMkC,MAAM,GAAGzB,KAAK,CAAC,CAAD,CAApB;AACAwB,MAAAA,EAAE,CAACf,IAAH,GAAUgB,MAAM,CAAChB,IAAjB;AACAe,MAAAA,EAAE,CAACd,GAAH,GAASe,MAAM,CAACf,GAAhB,CAhE0C,CAkE1C;;AACA,WAAK,IAAI5B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,IAAI,CAA5B,EAA+B;AAC7B,aAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,IAAI,CAA5B,EAA+B;AAC7B;AACA,gBAAMoC,SAAS,GAAGrC,CAAC,GAAG,IAAIC,CAA1B;AACA,gBAAMyB,IAAI,GAAGR,KAAK,CAACmB,SAAD,CAAlB;AACA,gBAAMO,KAAK,GAAGnC,CAAC,CAAC4B,SAAD,CAAf;AACA,gBAAMQ,OAAO,GAAGpC,CAAC,CAAE,CAACT,CAAC,GAAG,CAAL,IAAU,CAAX,GAAgB,IAAIC,CAArB,CAAjB;AACA,gBAAM6C,OAAO,GAAGrC,CAAC,CAAE,CAACT,CAAC,GAAG,CAAL,IAAU,CAAX,GAAgB,IAAIC,CAArB,CAAjB,CAN6B,CAQ7B;;AACAyB,UAAAA,IAAI,CAACC,IAAL,GAAYiB,KAAK,CAACjB,IAAN,GAAc,CAACkB,OAAO,CAAClB,IAAT,GAAgBmB,OAAO,CAACnB,IAAlD;AACAD,UAAAA,IAAI,CAACE,GAAL,GAAWgB,KAAK,CAAChB,GAAN,GAAa,CAACiB,OAAO,CAACjB,GAAT,GAAekB,OAAO,CAAClB,GAA/C;AACD;AACF,OAhFyC,CAkF1C;;;AACA,YAAMF,IAAI,GAAGR,KAAK,CAAC,CAAD,CAAlB;AACA,YAAM6B,aAAa,GAAGrD,eAAe,CAACmC,KAAD,CAArC;AACAH,MAAAA,IAAI,CAACC,IAAL,IAAaoB,aAAa,CAACpB,IAA3B;AACAD,MAAAA,IAAI,CAACE,GAAL,IAAYmB,aAAa,CAACnB,GAA1B;AACD;AACF;;AAEDoB,EAAAA,WAAW,GAAG;AACZ;AACA,UAAMC,IAAI,GAAG,KAAKC,KAAlB;AACA,UAAMC,SAAS,GAAGF,IAAI,CAACG,KAAvB;AACA,UAAMC,SAAS,GAAGJ,IAAI,CAACK,QAAL,GAAgB,CAAlC;AACA,UAAMC,aAAa,GAAG,KAAKpC,SAAL,GAAiB,EAAvC,CALY,CAOZ;;AACAgC,IAAAA,SAAS,CAACE,SAAS,KAAK,CAAf,CAAT,IAA8B,OAAQ,KAAMA,SAAS,GAAG,EAAxD;AACAF,IAAAA,SAAS,CAAC,CAAEK,IAAI,CAACC,IAAL,CAAU,CAACJ,SAAS,GAAG,CAAb,IAAkBE,aAA5B,IAA6CA,aAA9C,KAAiE,CAAlE,IAAuE,CAAxE,CAAT,IAAuF,IAAvF;AACAN,IAAAA,IAAI,CAACK,QAAL,GAAgBH,SAAS,CAACO,MAAV,GAAmB,CAAnC,CAVY,CAYZ;;AACA,SAAKC,QAAL,GAbY,CAeZ;;;AACA,UAAMzC,KAAK,GAAG,KAAKD,MAAnB;AACA,UAAM2C,iBAAiB,GAAG,KAAKhD,GAAL,CAASG,YAAT,GAAwB,CAAlD;AACA,UAAM8C,iBAAiB,GAAGD,iBAAiB,GAAG,CAA9C,CAlBY,CAoBZ;;AACA,UAAME,SAAS,GAAG,EAAlB;;AACA,SAAK,IAAI3D,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG0D,iBAApB,EAAuC1D,CAAC,IAAI,CAA5C,EAA+C;AAC7C;AACA,YAAMuB,IAAI,GAAGR,KAAK,CAACf,CAAD,CAAlB;AACA,UAAImC,OAAO,GAAGZ,IAAI,CAACC,IAAnB;AACA,UAAIY,OAAO,GAAGb,IAAI,CAACE,GAAnB,CAJ6C,CAM7C;;AACAU,MAAAA,OAAO,GAAI,CAAEA,OAAO,IAAI,CAAZ,GAAkBA,OAAO,KAAK,EAA/B,IAAsC,UAAvC,GACL,CAAEA,OAAO,IAAI,EAAZ,GAAmBA,OAAO,KAAK,CAAhC,IAAsC,UAD3C;AAEAC,MAAAA,OAAO,GAAI,CAAEA,OAAO,IAAI,CAAZ,GAAkBA,OAAO,KAAK,EAA/B,IAAsC,UAAvC,GACL,CAAEA,OAAO,IAAI,EAAZ,GAAmBA,OAAO,KAAK,CAAhC,IAAsC,UAD3C,CAT6C,CAY7C;;AACAuB,MAAAA,SAAS,CAACC,IAAV,CAAexB,OAAf;AACAuB,MAAAA,SAAS,CAACC,IAAV,CAAezB,OAAf;AACD,KArCW,CAuCZ;;;AACA,WAAO,IAAIjD,SAAJ,CAAcyE,SAAd,EAAyBF,iBAAzB,CAAP;AACD;;AAEDI,EAAAA,KAAK,GAAG;AACN,UAAMA,KAAK,GAAG,MAAMA,KAAN,CAAYC,IAAZ,CAAiB,IAAjB,CAAd;AAEAD,IAAAA,KAAK,CAAC/C,MAAN,GAAe,KAAKA,MAAL,CAAYiD,KAAZ,CAAkB,CAAlB,CAAf;AACA,UAAMhD,KAAK,GAAG8C,KAAK,CAAC/C,MAApB;;AACA,SAAK,IAAId,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,IAAI,CAA7B,EAAgC;AAC9Be,MAAAA,KAAK,CAACf,CAAD,CAAL,GAAWe,KAAK,CAACf,CAAD,CAAL,CAAS6D,KAAT,EAAX;AACD;;AAED,WAAOA,KAAP;AACD;;AAjMkC;AAoMrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMG,IAAI,GAAG7E,MAAM,CAAC8E,aAAP,CAAqB1D,QAArB,CAAb;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAM2D,QAAQ,GAAG/E,MAAM,CAACgF,iBAAP,CAAyB5D,QAAzB,CAAjB","sourcesContent":["import {\n  WordArray,\n  Hasher,\n} from './core.js';\nimport { X64Word } from './x64-core.js';\n\n// Constants tables\nconst RHO_OFFSETS = [];\nconst PI_INDEXES = [];\nconst ROUND_CONSTANTS = [];\n\n// Compute Constants\n// Compute rho offset constants\nlet _x = 1;\nlet _y = 0;\nfor (let t = 0; t < 24; t += 1) {\n  RHO_OFFSETS[_x + 5 * _y] = ((t + 1) * (t + 2) / 2) % 64;\n\n  const newX = _y % 5;\n  const newY = (2 * _x + 3 * _y) % 5;\n  _x = newX;\n  _y = newY;\n}\n\n// Compute pi index constants\nfor (let x = 0; x < 5; x += 1) {\n  for (let y = 0; y < 5; y += 1) {\n    PI_INDEXES[x + 5 * y] = y + ((2 * x + 3 * y) % 5) * 5;\n  }\n}\n\n// Compute round constants\nlet LFSR = 0x01;\nfor (let i = 0; i < 24; i += 1) {\n  let roundConstantMsw = 0;\n  let roundConstantLsw = 0;\n\n  for (let j = 0; j < 7; j += 1) {\n    if (LFSR & 0x01) {\n      const bitPosition = (1 << j) - 1;\n      if (bitPosition < 32) {\n        roundConstantLsw ^= 1 << bitPosition;\n      } else /* if (bitPosition >= 32) */ {\n        roundConstantMsw ^= 1 << (bitPosition - 32);\n      }\n    }\n\n    // Compute next LFSR\n    if (LFSR & 0x80) {\n      // Primitive polynomial over GF(2): x^8 + x^6 + x^5 + x^4 + 1\n      LFSR = (LFSR << 1) ^ 0x71;\n    } else {\n      LFSR <<= 1;\n    }\n  }\n\n  ROUND_CONSTANTS[i] = X64Word.create(roundConstantMsw, roundConstantLsw);\n}\n\n// Reusable objects for temporary values\nconst T = [];\nfor (let i = 0; i < 25; i += 1) {\n  T[i] = X64Word.create();\n}\n\n/**\n * SHA-3 hash algorithm.\n */\nexport class SHA3Algo extends Hasher {\n  constructor(cfg) {\n    /**\n     * Configuration options.\n     *\n     * @property {number} outputLength\n     *   The desired number of bits in the output hash.\n     *   Only values permitted are: 224, 256, 384, 512.\n     *   Default: 512\n     */\n    super(Object.assign(\n      { outputLength: 512 },\n      cfg,\n    ));\n  }\n\n  _doReset() {\n    this._state = [];\n    const state = this._state;\n    for (let i = 0; i < 25; i += 1) {\n      state[i] = new X64Word();\n    }\n\n    this.blockSize = (1600 - 2 * this.cfg.outputLength) / 32;\n  }\n\n  _doProcessBlock(M, offset) {\n    // Shortcuts\n    const state = this._state;\n    const nBlockSizeLanes = this.blockSize / 2;\n\n    // Absorb\n    for (let i = 0; i < nBlockSizeLanes; i += 1) {\n      // Shortcuts\n      let M2i = M[offset + 2 * i];\n      let M2i1 = M[offset + 2 * i + 1];\n\n      // Swap endian\n      M2i = (((M2i << 8) | (M2i >>> 24)) & 0x00ff00ff)\n        | (((M2i << 24) | (M2i >>> 8)) & 0xff00ff00);\n      M2i1 = (((M2i1 << 8) | (M2i1 >>> 24)) & 0x00ff00ff)\n        | (((M2i1 << 24) | (M2i1 >>> 8)) & 0xff00ff00);\n\n      // Absorb message into state\n      const lane = state[i];\n      lane.high ^= M2i1;\n      lane.low ^= M2i;\n    }\n\n    // Rounds\n    for (let round = 0; round < 24; round += 1) {\n      // Theta\n      for (let x = 0; x < 5; x += 1) {\n        // Mix column lanes\n        let tMsw = 0;\n        let tLsw = 0;\n        for (let y = 0; y < 5; y += 1) {\n          const lane = state[x + 5 * y];\n          tMsw ^= lane.high;\n          tLsw ^= lane.low;\n        }\n\n        // Temporary values\n        const Tx = T[x];\n        Tx.high = tMsw;\n        Tx.low = tLsw;\n      }\n      for (let x = 0; x < 5; x += 1) {\n        // Shortcuts\n        const Tx4 = T[(x + 4) % 5];\n        const Tx1 = T[(x + 1) % 5];\n        const Tx1Msw = Tx1.high;\n        const Tx1Lsw = Tx1.low;\n\n        // Mix surrounding columns\n        const tMsw = Tx4.high ^ ((Tx1Msw << 1) | (Tx1Lsw >>> 31));\n        const tLsw = Tx4.low ^ ((Tx1Lsw << 1) | (Tx1Msw >>> 31));\n        for (let y = 0; y < 5; y += 1) {\n          const lane = state[x + 5 * y];\n          lane.high ^= tMsw;\n          lane.low ^= tLsw;\n        }\n      }\n\n      // Rho Pi\n      for (let laneIndex = 1; laneIndex < 25; laneIndex += 1) {\n        let tMsw;\n        let tLsw;\n\n        // Shortcuts\n        const lane = state[laneIndex];\n        const laneMsw = lane.high;\n        const laneLsw = lane.low;\n        const rhoOffset = RHO_OFFSETS[laneIndex];\n\n        // Rotate lanes\n        if (rhoOffset < 32) {\n          tMsw = (laneMsw << rhoOffset) | (laneLsw >>> (32 - rhoOffset));\n          tLsw = (laneLsw << rhoOffset) | (laneMsw >>> (32 - rhoOffset));\n        } else /* if (rhoOffset >= 32) */ {\n          tMsw = (laneLsw << (rhoOffset - 32)) | (laneMsw >>> (64 - rhoOffset));\n          tLsw = (laneMsw << (rhoOffset - 32)) | (laneLsw >>> (64 - rhoOffset));\n        }\n\n        // Transpose lanes\n        const TPiLane = T[PI_INDEXES[laneIndex]];\n        TPiLane.high = tMsw;\n        TPiLane.low = tLsw;\n      }\n\n      // Rho pi at x = y = 0\n      const T0 = T[0];\n      const state0 = state[0];\n      T0.high = state0.high;\n      T0.low = state0.low;\n\n      // Chi\n      for (let x = 0; x < 5; x += 1) {\n        for (let y = 0; y < 5; y += 1) {\n          // Shortcuts\n          const laneIndex = x + 5 * y;\n          const lane = state[laneIndex];\n          const TLane = T[laneIndex];\n          const Tx1Lane = T[((x + 1) % 5) + 5 * y];\n          const Tx2Lane = T[((x + 2) % 5) + 5 * y];\n\n          // Mix rows\n          lane.high = TLane.high ^ (~Tx1Lane.high & Tx2Lane.high);\n          lane.low = TLane.low ^ (~Tx1Lane.low & Tx2Lane.low);\n        }\n      }\n\n      // Iota\n      const lane = state[0];\n      const roundConstant = ROUND_CONSTANTS[round];\n      lane.high ^= roundConstant.high;\n      lane.low ^= roundConstant.low;\n    }\n  }\n\n  _doFinalize() {\n    // Shortcuts\n    const data = this._data;\n    const dataWords = data.words;\n    const nBitsLeft = data.sigBytes * 8;\n    const blockSizeBits = this.blockSize * 32;\n\n    // Add padding\n    dataWords[nBitsLeft >>> 5] |= 0x1 << (24 - (nBitsLeft % 32));\n    dataWords[((Math.ceil((nBitsLeft + 1) / blockSizeBits) * blockSizeBits) >>> 5) - 1] |= 0x80;\n    data.sigBytes = dataWords.length * 4;\n\n    // Hash final blocks\n    this._process();\n\n    // Shortcuts\n    const state = this._state;\n    const outputLengthBytes = this.cfg.outputLength / 8;\n    const outputLengthLanes = outputLengthBytes / 8;\n\n    // Squeeze\n    const hashWords = [];\n    for (let i = 0; i < outputLengthLanes; i += 1) {\n      // Shortcuts\n      const lane = state[i];\n      let laneMsw = lane.high;\n      let laneLsw = lane.low;\n\n      // Swap endian\n      laneMsw = (((laneMsw << 8) | (laneMsw >>> 24)) & 0x00ff00ff)\n        | (((laneMsw << 24) | (laneMsw >>> 8)) & 0xff00ff00);\n      laneLsw = (((laneLsw << 8) | (laneLsw >>> 24)) & 0x00ff00ff)\n        | (((laneLsw << 24) | (laneLsw >>> 8)) & 0xff00ff00);\n\n      // Squeeze state to retrieve hash\n      hashWords.push(laneLsw);\n      hashWords.push(laneMsw);\n    }\n\n    // Return final computed hash\n    return new WordArray(hashWords, outputLengthBytes);\n  }\n\n  clone() {\n    const clone = super.clone.call(this);\n\n    clone._state = this._state.slice(0);\n    const state = clone._state;\n    for (let i = 0; i < 25; i += 1) {\n      state[i] = state[i].clone();\n    }\n\n    return clone;\n  }\n}\n\n/**\n * Shortcut function to the hasher's object interface.\n *\n * @param {WordArray|string} message The message to hash.\n *\n * @return {WordArray} The hash.\n *\n * @static\n *\n * @example\n *\n *     var hash = CryptoJS.SHA3('message');\n *     var hash = CryptoJS.SHA3(wordArray);\n */\nexport const SHA3 = Hasher._createHelper(SHA3Algo);\n\n/**\n * Shortcut function to the HMAC's object interface.\n *\n * @param {WordArray|string} message The message to hash.\n * @param {WordArray|string} key The secret key.\n *\n * @return {WordArray} The HMAC.\n *\n * @static\n *\n * @example\n *\n *     var hmac = CryptoJS.HmacSHA3(message, key);\n */\nexport const HmacSHA3 = Hasher._createHmacHelper(SHA3Algo);\n"]},"metadata":{},"sourceType":"module"}