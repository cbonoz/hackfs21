{"ast":null,"code":"'use strict';\n\nvar _require = require('ethereum-cryptography/hdkey'),\n    HDKey = _require.HDKey;\n\nvar Wallet = require('./index.js');\n\nfunction EthereumHDKey() {}\n/*\n * Horrible wrapping.\n */\n\n\nfunction fromHDKey(hdkey) {\n  var ret = new EthereumHDKey();\n  ret._hdkey = hdkey;\n  return ret;\n}\n\nEthereumHDKey.fromMasterSeed = function (seedBuffer) {\n  return fromHDKey(HDKey.fromMasterSeed(seedBuffer));\n};\n\nEthereumHDKey.fromExtendedKey = function (base58key) {\n  return fromHDKey(HDKey.fromExtendedKey(base58key));\n};\n\nEthereumHDKey.prototype.privateExtendedKey = function () {\n  if (!this._hdkey.privateExtendedKey) {\n    throw new Error('This is a public key only wallet');\n  }\n\n  return this._hdkey.privateExtendedKey;\n};\n\nEthereumHDKey.prototype.publicExtendedKey = function () {\n  return this._hdkey.publicExtendedKey;\n};\n\nEthereumHDKey.prototype.derivePath = function (path) {\n  return fromHDKey(this._hdkey.derive(path));\n};\n\nEthereumHDKey.prototype.deriveChild = function (index) {\n  return fromHDKey(this._hdkey.deriveChild(index));\n};\n\nEthereumHDKey.prototype.getWallet = function () {\n  if (this._hdkey._privateKey) {\n    return Wallet.fromPrivateKey(this._hdkey._privateKey);\n  } else {\n    return Wallet.fromPublicKey(this._hdkey._publicKey, true);\n  }\n};\n\nmodule.exports = EthereumHDKey;","map":{"version":3,"sources":["/Users/chrisbuonocore/personal/hackathons/hackfs21/node_modules/ethereumjs-wallet/hdkey.js"],"names":["_require","require","HDKey","Wallet","EthereumHDKey","fromHDKey","hdkey","ret","_hdkey","fromMasterSeed","seedBuffer","fromExtendedKey","base58key","prototype","privateExtendedKey","Error","publicExtendedKey","derivePath","path","derive","deriveChild","index","getWallet","_privateKey","fromPrivateKey","fromPublicKey","_publicKey","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,6BAAD,CAAtB;AAAA,IACIC,KAAK,GAAGF,QAAQ,CAACE,KADrB;;AAGA,IAAIC,MAAM,GAAGF,OAAO,CAAC,YAAD,CAApB;;AAEA,SAASG,aAAT,GAAyB,CAAE;AAE3B;AACA;AACA;;;AACA,SAASC,SAAT,CAAmBC,KAAnB,EAA0B;AACxB,MAAIC,GAAG,GAAG,IAAIH,aAAJ,EAAV;AACAG,EAAAA,GAAG,CAACC,MAAJ,GAAaF,KAAb;AACA,SAAOC,GAAP;AACD;;AAEDH,aAAa,CAACK,cAAd,GAA+B,UAAUC,UAAV,EAAsB;AACnD,SAAOL,SAAS,CAACH,KAAK,CAACO,cAAN,CAAqBC,UAArB,CAAD,CAAhB;AACD,CAFD;;AAIAN,aAAa,CAACO,eAAd,GAAgC,UAAUC,SAAV,EAAqB;AACnD,SAAOP,SAAS,CAACH,KAAK,CAACS,eAAN,CAAsBC,SAAtB,CAAD,CAAhB;AACD,CAFD;;AAIAR,aAAa,CAACS,SAAd,CAAwBC,kBAAxB,GAA6C,YAAY;AACvD,MAAI,CAAC,KAAKN,MAAL,CAAYM,kBAAjB,EAAqC;AACnC,UAAM,IAAIC,KAAJ,CAAU,kCAAV,CAAN;AACD;;AACD,SAAO,KAAKP,MAAL,CAAYM,kBAAnB;AACD,CALD;;AAOAV,aAAa,CAACS,SAAd,CAAwBG,iBAAxB,GAA4C,YAAY;AACtD,SAAO,KAAKR,MAAL,CAAYQ,iBAAnB;AACD,CAFD;;AAIAZ,aAAa,CAACS,SAAd,CAAwBI,UAAxB,GAAqC,UAAUC,IAAV,EAAgB;AACnD,SAAOb,SAAS,CAAC,KAAKG,MAAL,CAAYW,MAAZ,CAAmBD,IAAnB,CAAD,CAAhB;AACD,CAFD;;AAIAd,aAAa,CAACS,SAAd,CAAwBO,WAAxB,GAAsC,UAAUC,KAAV,EAAiB;AACrD,SAAOhB,SAAS,CAAC,KAAKG,MAAL,CAAYY,WAAZ,CAAwBC,KAAxB,CAAD,CAAhB;AACD,CAFD;;AAIAjB,aAAa,CAACS,SAAd,CAAwBS,SAAxB,GAAoC,YAAY;AAC9C,MAAI,KAAKd,MAAL,CAAYe,WAAhB,EAA6B;AAC3B,WAAOpB,MAAM,CAACqB,cAAP,CAAsB,KAAKhB,MAAL,CAAYe,WAAlC,CAAP;AACD,GAFD,MAEO;AACL,WAAOpB,MAAM,CAACsB,aAAP,CAAqB,KAAKjB,MAAL,CAAYkB,UAAjC,EAA6C,IAA7C,CAAP;AACD;AACF,CAND;;AAQAC,MAAM,CAACC,OAAP,GAAiBxB,aAAjB","sourcesContent":["'use strict';\n\nvar _require = require('ethereum-cryptography/hdkey'),\n    HDKey = _require.HDKey;\n\nvar Wallet = require('./index.js');\n\nfunction EthereumHDKey() {}\n\n/*\n * Horrible wrapping.\n */\nfunction fromHDKey(hdkey) {\n  var ret = new EthereumHDKey();\n  ret._hdkey = hdkey;\n  return ret;\n}\n\nEthereumHDKey.fromMasterSeed = function (seedBuffer) {\n  return fromHDKey(HDKey.fromMasterSeed(seedBuffer));\n};\n\nEthereumHDKey.fromExtendedKey = function (base58key) {\n  return fromHDKey(HDKey.fromExtendedKey(base58key));\n};\n\nEthereumHDKey.prototype.privateExtendedKey = function () {\n  if (!this._hdkey.privateExtendedKey) {\n    throw new Error('This is a public key only wallet');\n  }\n  return this._hdkey.privateExtendedKey;\n};\n\nEthereumHDKey.prototype.publicExtendedKey = function () {\n  return this._hdkey.publicExtendedKey;\n};\n\nEthereumHDKey.prototype.derivePath = function (path) {\n  return fromHDKey(this._hdkey.derive(path));\n};\n\nEthereumHDKey.prototype.deriveChild = function (index) {\n  return fromHDKey(this._hdkey.deriveChild(index));\n};\n\nEthereumHDKey.prototype.getWallet = function () {\n  if (this._hdkey._privateKey) {\n    return Wallet.fromPrivateKey(this._hdkey._privateKey);\n  } else {\n    return Wallet.fromPublicKey(this._hdkey._publicKey, true);\n  }\n};\n\nmodule.exports = EthereumHDKey;"]},"metadata":{},"sourceType":"script"}