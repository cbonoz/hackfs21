{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useRef } from \"react\"; // helper hook to call a function regularly in time intervals\n\nexport default function usePoller(fn, delay, extraWatch) {\n  _s();\n\n  const savedCallback = useRef(); // Remember the latest fn.\n\n  useEffect(() => {\n    savedCallback.current = fn;\n  }, [fn]); // Set up the interval.\n  // eslint-disable-next-line consistent-return\n\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n\n    if (delay !== null) {\n      const id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]); // run at start too\n\n  useEffect(() => {\n    fn();\n  }, [extraWatch]);\n}\n\n_s(usePoller, \"rZob0JEmSEepRn30PyhsVaJk+nA=\");","map":{"version":3,"sources":["/Users/chrisbuonocore/personal/hackathons/hackfs21/packages/react-app/src/hooks/Poller.js"],"names":["useEffect","useRef","usePoller","fn","delay","extraWatch","savedCallback","current","tick","id","setInterval","clearInterval"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,MAApB,QAAkC,OAAlC,C,CAEA;;AAEA,eAAe,SAASC,SAAT,CAAmBC,EAAnB,EAAuBC,KAAvB,EAA8BC,UAA9B,EAA0C;AAAA;;AACvD,QAAMC,aAAa,GAAGL,MAAM,EAA5B,CADuD,CAEvD;;AACAD,EAAAA,SAAS,CAAC,MAAM;AACdM,IAAAA,aAAa,CAACC,OAAd,GAAwBJ,EAAxB;AACD,GAFQ,EAEN,CAACA,EAAD,CAFM,CAAT,CAHuD,CAMvD;AACA;;AACAH,EAAAA,SAAS,CAAC,MAAM;AACd,aAASQ,IAAT,GAAgB;AACdF,MAAAA,aAAa,CAACC,OAAd;AACD;;AACD,QAAIH,KAAK,KAAK,IAAd,EAAoB;AAClB,YAAMK,EAAE,GAAGC,WAAW,CAACF,IAAD,EAAOJ,KAAP,CAAtB;AACA,aAAO,MAAMO,aAAa,CAACF,EAAD,CAA1B;AACD;AACF,GARQ,EAQN,CAACL,KAAD,CARM,CAAT,CARuD,CAiBvD;;AACAJ,EAAAA,SAAS,CAAC,MAAM;AACdG,IAAAA,EAAE;AACH,GAFQ,EAEN,CAACE,UAAD,CAFM,CAAT;AAGD;;GArBuBH,S","sourcesContent":["import { useEffect, useRef } from \"react\";\n\n// helper hook to call a function regularly in time intervals\n\nexport default function usePoller(fn, delay, extraWatch) {\n  const savedCallback = useRef();\n  // Remember the latest fn.\n  useEffect(() => {\n    savedCallback.current = fn;\n  }, [fn]);\n  // Set up the interval.\n  // eslint-disable-next-line consistent-return\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      const id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n  // run at start too\n  useEffect(() => {\n    fn();\n  }, [extraWatch]);\n}\n"]},"metadata":{},"sourceType":"module"}