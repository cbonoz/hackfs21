{"ast":null,"code":"import { WordArray } from './core.js';\n/**\n * ISO 10126 padding strategy.\n */\n\nexport const Iso10126 = {\n  pad(data, blockSize) {\n    // Shortcut\n    const blockSizeBytes = blockSize * 4; // Count padding bytes\n\n    const nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes; // Pad\n\n    data.concat(WordArray.random(nPaddingBytes - 1)).concat(WordArray.create([nPaddingBytes << 24], 1));\n  },\n\n  unpad(data) {\n    const _data = data; // Get number of padding bytes from last byte\n\n    const nPaddingBytes = _data.words[_data.sigBytes - 1 >>> 2] & 0xff; // Remove padding\n\n    _data.sigBytes -= nPaddingBytes;\n  }\n\n};","map":{"version":3,"sources":["/Users/chrisbuonocore/personal/hackathons/hackfs21/node_modules/crypto-es/lib/pad-iso10126.js"],"names":["WordArray","Iso10126","pad","data","blockSize","blockSizeBytes","nPaddingBytes","sigBytes","concat","random","create","unpad","_data","words"],"mappings":"AAAA,SACEA,SADF,QAEO,WAFP;AAIA;AACA;AACA;;AACA,OAAO,MAAMC,QAAQ,GAAG;AACtBC,EAAAA,GAAG,CAACC,IAAD,EAAOC,SAAP,EAAkB;AACnB;AACA,UAAMC,cAAc,GAAGD,SAAS,GAAG,CAAnC,CAFmB,CAInB;;AACA,UAAME,aAAa,GAAGD,cAAc,GAAIF,IAAI,CAACI,QAAL,GAAgBF,cAAxD,CALmB,CAOnB;;AACAF,IAAAA,IAAI,CACDK,MADH,CACUR,SAAS,CAACS,MAAV,CAAiBH,aAAa,GAAG,CAAjC,CADV,EAEGE,MAFH,CAEUR,SAAS,CAACU,MAAV,CAAiB,CAACJ,aAAa,IAAI,EAAlB,CAAjB,EAAwC,CAAxC,CAFV;AAGD,GAZqB;;AActBK,EAAAA,KAAK,CAACR,IAAD,EAAO;AACV,UAAMS,KAAK,GAAGT,IAAd,CADU,CAEV;;AACA,UAAMG,aAAa,GAAGM,KAAK,CAACC,KAAN,CAAaD,KAAK,CAACL,QAAN,GAAiB,CAAlB,KAAyB,CAArC,IAA0C,IAAhE,CAHU,CAKV;;AACAK,IAAAA,KAAK,CAACL,QAAN,IAAkBD,aAAlB;AACD;;AArBqB,CAAjB","sourcesContent":["import {\n  WordArray,\n} from './core.js';\n\n/**\n * ISO 10126 padding strategy.\n */\nexport const Iso10126 = {\n  pad(data, blockSize) {\n    // Shortcut\n    const blockSizeBytes = blockSize * 4;\n\n    // Count padding bytes\n    const nPaddingBytes = blockSizeBytes - (data.sigBytes % blockSizeBytes);\n\n    // Pad\n    data\n      .concat(WordArray.random(nPaddingBytes - 1))\n      .concat(WordArray.create([nPaddingBytes << 24], 1));\n  },\n\n  unpad(data) {\n    const _data = data;\n    // Get number of padding bytes from last byte\n    const nPaddingBytes = _data.words[(_data.sigBytes - 1) >>> 2] & 0xff;\n\n    // Remove padding\n    _data.sigBytes -= nPaddingBytes;\n  },\n};\n"]},"metadata":{},"sourceType":"module"}