{"ast":null,"code":"import { visit } from 'graphql';\nexport function getASTNodeAtPosition(query, ast, point) {\n  const offset = pointToOffset(query, point);\n  let nodeContainingPosition;\n  visit(ast, {\n    enter(node) {\n      if (node.kind !== 'Name' && node.loc && node.loc.start <= offset && offset <= node.loc.end) {\n        nodeContainingPosition = node;\n      } else {\n        return false;\n      }\n    },\n\n    leave(node) {\n      if (node.loc && node.loc.start <= offset && offset <= node.loc.end) {\n        return false;\n      }\n    }\n\n  });\n  return nodeContainingPosition;\n}\nexport function pointToOffset(text, point) {\n  const linesUntilPosition = text.split('\\n').slice(0, point.line);\n  return point.character + linesUntilPosition.map(line => line.length + 1).reduce((a, b) => a + b, 0);\n}","map":{"version":3,"sources":["../src/getASTNodeAtPosition.ts"],"names":[],"mappings":"AAYA,SAAS,KAAT,QAAsB,SAAtB;AAEA,OAAM,SAAU,oBAAV,CACJ,KADI,EAEJ,GAFI,EAGJ,KAHI,EAGY;AAEhB,QAAM,MAAM,GAAG,aAAa,CAAC,KAAD,EAAQ,KAAR,CAA5B;AACA,MAAI,sBAAJ;AACA,EAAA,KAAK,CAAC,GAAD,EAAM;AACT,IAAA,KAAK,CAAC,IAAD,EAAK;AACR,UACE,IAAI,CAAC,IAAL,KAAc,MAAd,IACA,IAAI,CAAC,GADL,IAEA,IAAI,CAAC,GAAL,CAAS,KAAT,IAAkB,MAFlB,IAGA,MAAM,IAAI,IAAI,CAAC,GAAL,CAAS,GAJrB,EAKE;AACA,QAAA,sBAAsB,GAAG,IAAzB;AACD,OAPD,MAOO;AACL,eAAO,KAAP;AACD;AACF,KAZQ;;AAaT,IAAA,KAAK,CAAC,IAAD,EAAK;AACR,UAAI,IAAI,CAAC,GAAL,IAAY,IAAI,CAAC,GAAL,CAAS,KAAT,IAAkB,MAA9B,IAAwC,MAAM,IAAI,IAAI,CAAC,GAAL,CAAS,GAA/D,EAAoE;AAClE,eAAO,KAAP;AACD;AACF;;AAjBQ,GAAN,CAAL;AAoBA,SAAO,sBAAP;AACD;AAED,OAAM,SAAU,aAAV,CAAwB,IAAxB,EAAsC,KAAtC,EAAsD;AAC1D,QAAM,kBAAkB,GAAG,IAAI,CAAC,KAAL,CAAW,IAAX,EAAiB,KAAjB,CAAuB,CAAvB,EAA0B,KAAK,CAAC,IAAhC,CAA3B;AACA,SACE,KAAK,CAAC,SAAN,GACA,kBAAkB,CACf,GADH,CAEI,IAAI,IAAI,IAAI,CAAC,MAAL,GAAc,CAF1B,EAIG,MAJH,CAIU,CAAC,CAAD,EAAI,CAAJ,KAAU,CAAC,GAAG,CAJxB,EAI2B,CAJ3B,CAFF;AAQD","sourceRoot":"","sourcesContent":["import { visit } from 'graphql';\nexport function getASTNodeAtPosition(query, ast, point) {\n    const offset = pointToOffset(query, point);\n    let nodeContainingPosition;\n    visit(ast, {\n        enter(node) {\n            if (node.kind !== 'Name' &&\n                node.loc &&\n                node.loc.start <= offset &&\n                offset <= node.loc.end) {\n                nodeContainingPosition = node;\n            }\n            else {\n                return false;\n            }\n        },\n        leave(node) {\n            if (node.loc && node.loc.start <= offset && offset <= node.loc.end) {\n                return false;\n            }\n        },\n    });\n    return nodeContainingPosition;\n}\nexport function pointToOffset(text, point) {\n    const linesUntilPosition = text.split('\\n').slice(0, point.line);\n    return (point.character +\n        linesUntilPosition\n            .map(line => line.length + 1)\n            .reduce((a, b) => a + b, 0));\n}\n//# sourceMappingURL=getASTNodeAtPosition.js.map"]},"metadata":{},"sourceType":"module"}