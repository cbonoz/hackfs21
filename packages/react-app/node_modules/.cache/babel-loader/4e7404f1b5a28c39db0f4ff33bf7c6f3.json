{"ast":null,"code":"var _jsxFileName = \"/Users/chrisbuonocore/personal/hackathons/hackfs21/packages/react-app/src/components/AddressInput.jsx\",\n    _s = $RefreshSig$();\n\nimport { CameraOutlined, QrcodeOutlined } from \"@ant-design/icons\";\nimport { Badge, Input } from \"antd\";\nimport { useLookupAddress } from \"eth-hooks\";\nimport React, { useCallback, useState } from \"react\";\nimport QrReader from \"react-qr-reader\";\nimport Blockie from \"./Blockie\"; // probably we need to change value={toAddress} to address={toAddress}\n\n/*\n  ~ What it does? ~\n\n  Displays an address input with QR scan option\n\n  ~ How can I use? ~\n\n  <AddressInput\n    autoFocus\n    ensProvider={mainnetProvider}\n    placeholder=\"Enter address\"\n    value={toAddress}\n    onChange={setToAddress}\n  />\n\n  ~ Features ~\n\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\n  - Provide placeholder=\"Enter address\" value for the input\n  - Value of the address input is stored in value={toAddress}\n  - Control input change by onChange={setToAddress}\n                          or onChange={address => { setToAddress(address);}}\n*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function AddressInput(props) {\n  _s();\n\n  const [value, setValue] = useState(props.value);\n  const [scan, setScan] = useState(false);\n  const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\n  const ens = useLookupAddress(props.ensProvider, currentValue);\n\n  const scannerButton = /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      marginTop: 4,\n      cursor: \"pointer\"\n    },\n    onClick: () => {\n      setScan(!scan);\n    },\n    children: [/*#__PURE__*/_jsxDEV(Badge, {\n      count: /*#__PURE__*/_jsxDEV(CameraOutlined, {\n        style: {\n          fontSize: 9\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 21\n      }, this),\n      children: /*#__PURE__*/_jsxDEV(QrcodeOutlined, {\n        style: {\n          fontSize: 18\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), \" \", \"Scan\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n\n  const {\n    ensProvider,\n    onChange\n  } = props;\n  const updateAddress = useCallback(async newValue => {\n    if (typeof newValue !== \"undefined\") {\n      let address = newValue;\n\n      if (address.indexOf(\".eth\") > 0 || address.indexOf(\".xyz\") > 0) {\n        try {\n          const possibleAddress = await ensProvider.resolveName(address);\n\n          if (possibleAddress) {\n            address = possibleAddress;\n          } // eslint-disable-next-line no-empty\n\n        } catch (e) {}\n      }\n\n      setValue(address);\n\n      if (typeof onChange === \"function\") {\n        onChange(address);\n      }\n    }\n  }, [ensProvider, onChange]);\n  const scanner = scan ? /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      zIndex: 256,\n      position: \"absolute\",\n      left: 0,\n      top: 0,\n      width: \"100%\"\n    },\n    onClick: () => {\n      setScan(false);\n    },\n    children: /*#__PURE__*/_jsxDEV(QrReader, {\n      delay: 250,\n      resolution: 1200,\n      onError: e => {\n        console.log(\"SCAN ERROR\", e);\n        setScan(false);\n      },\n      onScan: newValue => {\n        if (newValue) {\n          console.log(\"SCAN VALUE\", newValue);\n          let possibleNewValue = newValue;\n\n          if (possibleNewValue.indexOf(\"/\") >= 0) {\n            possibleNewValue = possibleNewValue.substr(possibleNewValue.lastIndexOf(\"0x\"));\n            console.log(\"CLEANED VALUE\", possibleNewValue);\n          }\n\n          setScan(false);\n          updateAddress(possibleNewValue);\n        }\n      },\n      style: {\n        width: \"100%\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this) : \"\";\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [scanner, /*#__PURE__*/_jsxDEV(Input, {\n      id: \"0xAddress\" // name it something other than address for auto fill doxxing\n      ,\n      name: \"0xAddress\" // name it something other than address for auto fill doxxing\n      ,\n      autoComplete: \"off\",\n      autoFocus: props.autoFocus,\n      placeholder: props.placeholder ? props.placeholder : \"address\",\n      prefix: /*#__PURE__*/_jsxDEV(Blockie, {\n        address: currentValue,\n        size: 8,\n        scale: 3\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 17\n      }, this),\n      value: ens || currentValue,\n      addonAfter: scannerButton,\n      onChange: e => {\n        updateAddress(e.target.value);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 5\n  }, this);\n}\n\n_s(AddressInput, \"+Y1/HWX+XHKssCkvQS70MSIqFjc=\", false, function () {\n  return [useLookupAddress];\n});\n\n_c = AddressInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddressInput\");","map":{"version":3,"sources":["/Users/chrisbuonocore/personal/hackathons/hackfs21/packages/react-app/src/components/AddressInput.jsx"],"names":["CameraOutlined","QrcodeOutlined","Badge","Input","useLookupAddress","React","useCallback","useState","QrReader","Blockie","AddressInput","props","value","setValue","scan","setScan","currentValue","ens","ensProvider","scannerButton","marginTop","cursor","fontSize","onChange","updateAddress","newValue","address","indexOf","possibleAddress","resolveName","e","scanner","zIndex","position","left","top","width","console","log","possibleNewValue","substr","lastIndexOf","autoFocus","placeholder","target"],"mappings":"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","sourcesContent":["import { CameraOutlined, QrcodeOutlined } from \"@ant-design/icons\";\nimport { Badge, Input } from \"antd\";\nimport { useLookupAddress } from \"eth-hooks\";\nimport React, { useCallback, useState } from \"react\";\nimport QrReader from \"react-qr-reader\";\nimport Blockie from \"./Blockie\";\n\n// probably we need to change value={toAddress} to address={toAddress}\n\n/*\n  ~ What it does? ~\n\n  Displays an address input with QR scan option\n\n  ~ How can I use? ~\n\n  <AddressInput\n    autoFocus\n    ensProvider={mainnetProvider}\n    placeholder=\"Enter address\"\n    value={toAddress}\n    onChange={setToAddress}\n  />\n\n  ~ Features ~\n\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\n  - Provide placeholder=\"Enter address\" value for the input\n  - Value of the address input is stored in value={toAddress}\n  - Control input change by onChange={setToAddress}\n                          or onChange={address => { setToAddress(address);}}\n*/\n\nexport default function AddressInput(props) {\n  const [value, setValue] = useState(props.value);\n  const [scan, setScan] = useState(false);\n\n  const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\n  const ens = useLookupAddress(props.ensProvider, currentValue);\n\n  const scannerButton = (\n    <div\n      style={{ marginTop: 4, cursor: \"pointer\" }}\n      onClick={() => {\n        setScan(!scan);\n      }}\n    >\n      <Badge count={<CameraOutlined style={{ fontSize: 9 }} />}>\n        <QrcodeOutlined style={{ fontSize: 18 }} />\n      </Badge>{\" \"}\n      Scan\n    </div>\n  );\n\n  const { ensProvider, onChange } = props;\n  const updateAddress = useCallback(\n    async newValue => {\n      if (typeof newValue !== \"undefined\") {\n        let address = newValue;\n        if (address.indexOf(\".eth\") > 0 || address.indexOf(\".xyz\") > 0) {\n          try {\n            const possibleAddress = await ensProvider.resolveName(address);\n            if (possibleAddress) {\n              address = possibleAddress;\n            }\n            // eslint-disable-next-line no-empty\n          } catch (e) {}\n        }\n        setValue(address);\n        if (typeof onChange === \"function\") {\n          onChange(address);\n        }\n      }\n    },\n    [ensProvider, onChange],\n  );\n\n  const scanner = scan ? (\n    <div\n      style={{\n        zIndex: 256,\n        position: \"absolute\",\n        left: 0,\n        top: 0,\n        width: \"100%\",\n      }}\n      onClick={() => {\n        setScan(false);\n      }}\n    >\n      <QrReader\n        delay={250}\n        resolution={1200}\n        onError={e => {\n          console.log(\"SCAN ERROR\", e);\n          setScan(false);\n        }}\n        onScan={newValue => {\n          if (newValue) {\n            console.log(\"SCAN VALUE\", newValue);\n            let possibleNewValue = newValue;\n            if (possibleNewValue.indexOf(\"/\") >= 0) {\n              possibleNewValue = possibleNewValue.substr(possibleNewValue.lastIndexOf(\"0x\"));\n              console.log(\"CLEANED VALUE\", possibleNewValue);\n            }\n            setScan(false);\n            updateAddress(possibleNewValue);\n          }\n        }}\n        style={{ width: \"100%\" }}\n      />\n    </div>\n  ) : (\n    \"\"\n  );\n\n  return (\n    <div>\n      {scanner}\n      <Input\n        id=\"0xAddress\" // name it something other than address for auto fill doxxing\n        name=\"0xAddress\" // name it something other than address for auto fill doxxing\n        autoComplete=\"off\"\n        autoFocus={props.autoFocus}\n        placeholder={props.placeholder ? props.placeholder : \"address\"}\n        prefix={<Blockie address={currentValue} size={8} scale={3} />}\n        value={ens || currentValue}\n        addonAfter={scannerButton}\n        onChange={e => {\n          updateAddress(e.target.value);\n        }}\n      />\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}