{"ast":null,"code":"const {\n  EthereumRpcError,\n  EthereumProviderError\n} = require('./src/classes');\n\nconst {\n  serializeError,\n  getMessageFromCode\n} = require('./src/utils');\n\nconst ethErrors = require('./src/errors');\n\nconst ERROR_CODES = require('./src/errorCodes.json');\n\nmodule.exports = {\n  ethErrors,\n  EthereumRpcError,\n  EthereumProviderError,\n  serializeError,\n  getMessageFromCode,\n\n  /** @type ErrorCodes */\n  ERROR_CODES\n}; // Types\n\n/**\n * @typedef {Object} EthereumProviderErrorCodes\n * @property {number} userRejectedRequest\n * @property {number} unauthorized\n * @property {number} unsupportedMethod\n */\n\n/**\n * @typedef {Object} EthereumRpcErrorCodes\n * @property {number} parse\n * @property {number} invalidRequest\n * @property {number} invalidParams\n * @property {number} methodNotFound\n * @property {number} internal\n * @property {number} invalidInput\n * @property {number} resourceNotFound\n * @property {number} resourceUnavailable\n * @property {number} transactionRejected\n * @property {number} methodNotSupported\n */\n\n/**\n * @typedef ErrorCodes\n * @property {EthereumRpcErrorCodes} rpc\n * @property {EthereumProviderErrorCodes} provider\n */","map":{"version":3,"sources":["/Users/chrisbuonocore/personal/hackathons/hackfs21/node_modules/eth-json-rpc-errors/index.js"],"names":["EthereumRpcError","EthereumProviderError","require","serializeError","getMessageFromCode","ethErrors","ERROR_CODES","module","exports"],"mappings":"AACA,MAAM;AAAEA,EAAAA,gBAAF;AAAoBC,EAAAA;AAApB,IAA8CC,OAAO,CAAC,eAAD,CAA3D;;AACA,MAAM;AACJC,EAAAA,cADI;AACYC,EAAAA;AADZ,IAEFF,OAAO,CAAC,aAAD,CAFX;;AAGA,MAAMG,SAAS,GAAGH,OAAO,CAAC,cAAD,CAAzB;;AACA,MAAMI,WAAW,GAAGJ,OAAO,CAAC,uBAAD,CAA3B;;AAEAK,MAAM,CAACC,OAAP,GAAiB;AACfH,EAAAA,SADe;AAEfL,EAAAA,gBAFe;AAGfC,EAAAA,qBAHe;AAIfE,EAAAA,cAJe;AAKfC,EAAAA,kBALe;;AAMf;AACAE,EAAAA;AAPe,CAAjB,C,CAUA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","sourcesContent":["\nconst { EthereumRpcError, EthereumProviderError } = require('./src/classes')\nconst {\n  serializeError, getMessageFromCode,\n} = require('./src/utils')\nconst ethErrors = require('./src/errors')\nconst ERROR_CODES = require('./src/errorCodes.json')\n\nmodule.exports = {\n  ethErrors,\n  EthereumRpcError,\n  EthereumProviderError,\n  serializeError,\n  getMessageFromCode,\n  /** @type ErrorCodes */\n  ERROR_CODES,\n}\n\n// Types\n\n/**\n * @typedef {Object} EthereumProviderErrorCodes\n * @property {number} userRejectedRequest\n * @property {number} unauthorized\n * @property {number} unsupportedMethod\n */\n\n/**\n * @typedef {Object} EthereumRpcErrorCodes\n * @property {number} parse\n * @property {number} invalidRequest\n * @property {number} invalidParams\n * @property {number} methodNotFound\n * @property {number} internal\n * @property {number} invalidInput\n * @property {number} resourceNotFound\n * @property {number} resourceUnavailable\n * @property {number} transactionRejected\n * @property {number} methodNotSupported\n */\n\n/**\n * @typedef ErrorCodes\n * @property {EthereumRpcErrorCodes} rpc\n * @property {EthereumProviderErrorCodes} provider\n */\n"]},"metadata":{},"sourceType":"script"}