{"ast":null,"code":"import { CipherParams } from './cipher-core.js';\nimport { Hex } from './core.js';\nexport const HexFormatter = {\n  /**\n   * Converts the ciphertext of a cipher params object to a hexadecimally encoded string.\n   *\n   * @param {CipherParams} cipherParams The cipher params object.\n   *\n   * @return {string} The hexadecimally encoded string.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     var hexString = CryptoJS.format.Hex.stringify(cipherParams);\n   */\n  stringify(cipherParams) {\n    return cipherParams.ciphertext.toString(Hex);\n  },\n\n  /**\n   * Converts a hexadecimally encoded ciphertext string to a cipher params object.\n   *\n   * @param {string} input The hexadecimally encoded string.\n   *\n   * @return {CipherParams} The cipher params object.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     var cipherParams = CryptoJS.format.Hex.parse(hexString);\n   */\n  parse(input) {\n    const ciphertext = Hex.parse(input);\n    return CipherParams.create({\n      ciphertext\n    });\n  }\n\n};","map":{"version":3,"sources":["/Users/chrisbuonocore/personal/hackathons/hackfs21/node_modules/crypto-es/lib/format-hex.js"],"names":["CipherParams","Hex","HexFormatter","stringify","cipherParams","ciphertext","toString","parse","input","create"],"mappings":"AAAA,SACEA,YADF,QAEO,kBAFP;AAGA,SACEC,GADF,QAEO,WAFP;AAIA,OAAO,MAAMC,YAAY,GAAG;AAC1B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEC,EAAAA,SAAS,CAACC,YAAD,EAAe;AACtB,WAAOA,YAAY,CAACC,UAAb,CAAwBC,QAAxB,CAAiCL,GAAjC,CAAP;AACD,GAhByB;;AAkB1B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEM,EAAAA,KAAK,CAACC,KAAD,EAAQ;AACX,UAAMH,UAAU,GAAGJ,GAAG,CAACM,KAAJ,CAAUC,KAAV,CAAnB;AACA,WAAOR,YAAY,CAACS,MAAb,CAAoB;AAAEJ,MAAAA;AAAF,KAApB,CAAP;AACD;;AAlCyB,CAArB","sourcesContent":["import {\n  CipherParams,\n} from './cipher-core.js';\nimport {\n  Hex,\n} from './core.js';\n\nexport const HexFormatter = {\n  /**\n   * Converts the ciphertext of a cipher params object to a hexadecimally encoded string.\n   *\n   * @param {CipherParams} cipherParams The cipher params object.\n   *\n   * @return {string} The hexadecimally encoded string.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     var hexString = CryptoJS.format.Hex.stringify(cipherParams);\n   */\n  stringify(cipherParams) {\n    return cipherParams.ciphertext.toString(Hex);\n  },\n\n  /**\n   * Converts a hexadecimally encoded ciphertext string to a cipher params object.\n   *\n   * @param {string} input The hexadecimally encoded string.\n   *\n   * @return {CipherParams} The cipher params object.\n   *\n   * @static\n   *\n   * @example\n   *\n   *     var cipherParams = CryptoJS.format.Hex.parse(hexString);\n   */\n  parse(input) {\n    const ciphertext = Hex.parse(input);\n    return CipherParams.create({ ciphertext });\n  },\n};\n"]},"metadata":{},"sourceType":"module"}