{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useState, useEffect } from \"react\";\nimport useOnBlock from \"./OnBlock\";\nimport usePoller from \"./Poller\";\n/*\n  ~ What it does? ~\n\n  Gets your balance in ETH from given address and provider\n\n  ~ How can I use? ~\n\n  const yourLocalBalance = useBalance(localProvider, address);\n\n  ~ Features ~\n\n  - Provide address and get balance corresponding to given address\n  - Change provider to access balance on different chains (ex. mainnetProvider)\n  - If no pollTime is passed, the balance will update on every new block\n*/\n\nconst DEBUG = false;\nexport default function useBalance(provider, address, pollTime = 0) {\n  _s();\n\n  const [balance, setBalance] = useState();\n  const pollBalance = useCallback(async (provider, address) => {\n    if (provider && address) {\n      const newBalance = await provider.getBalance(address);\n\n      if (newBalance !== balance) {\n        setBalance(newBalance);\n      }\n    }\n  }, [provider, address]); // Only pass a provider to watch on a block if there is no pollTime\n\n  useOnBlock(pollTime === 0 && provider, () => {\n    if (provider && address && pollTime === 0) {\n      pollBalance(provider, address);\n    }\n  }); // Update balance when the address or provider changes\n\n  useEffect(() => {\n    if (address && provider) pollBalance(provider, address);\n  }, [address, provider, pollBalance]); // Use a poller if a pollTime is provided\n\n  usePoller(async () => {\n    if (provider && address && pollTime > 0) {\n      if (DEBUG) console.log(\"polling!\", address);\n      pollBalance();\n    }\n  }, pollTime, provider && address);\n  return balance;\n}\n\n_s(useBalance, \"dI9sIOfa/1wFvhHUBDatOgwy61Y=\", false, function () {\n  return [useOnBlock, usePoller];\n});","map":{"version":3,"sources":["/Users/chrisbuonocore/personal/hackathons/hackfs21/packages/react-app/src/hooks/Balance.js"],"names":["useCallback","useState","useEffect","useOnBlock","usePoller","DEBUG","useBalance","provider","address","pollTime","balance","setBalance","pollBalance","newBalance","getBalance","console","log"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,QAAtB,EAAgCC,SAAhC,QAAiD,OAAjD;AACA,OAAOC,UAAP,MAAuB,WAAvB;AACA,OAAOC,SAAP,MAAsB,UAAtB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,KAAK,GAAG,KAAd;AAEA,eAAe,SAASC,UAAT,CAAoBC,QAApB,EAA8BC,OAA9B,EAAuCC,QAAQ,GAAG,CAAlD,EAAqD;AAAA;;AAClE,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBV,QAAQ,EAAtC;AAEA,QAAMW,WAAW,GAAGZ,WAAW,CAC7B,OAAOO,QAAP,EAAiBC,OAAjB,KAA6B;AAC3B,QAAID,QAAQ,IAAIC,OAAhB,EAAyB;AACvB,YAAMK,UAAU,GAAG,MAAMN,QAAQ,CAACO,UAAT,CAAoBN,OAApB,CAAzB;;AACA,UAAIK,UAAU,KAAKH,OAAnB,EAA4B;AAC1BC,QAAAA,UAAU,CAACE,UAAD,CAAV;AACD;AACF;AACF,GAR4B,EAS7B,CAACN,QAAD,EAAWC,OAAX,CAT6B,CAA/B,CAHkE,CAelE;;AACAL,EAAAA,UAAU,CAACM,QAAQ,KAAK,CAAb,IAAkBF,QAAnB,EAA6B,MAAM;AAC3C,QAAIA,QAAQ,IAAIC,OAAZ,IAAuBC,QAAQ,KAAK,CAAxC,EAA2C;AACzCG,MAAAA,WAAW,CAACL,QAAD,EAAWC,OAAX,CAAX;AACD;AACF,GAJS,CAAV,CAhBkE,CAsBlE;;AACAN,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIM,OAAO,IAAID,QAAf,EAAyBK,WAAW,CAACL,QAAD,EAAWC,OAAX,CAAX;AAC1B,GAFQ,EAEN,CAACA,OAAD,EAAUD,QAAV,EAAoBK,WAApB,CAFM,CAAT,CAvBkE,CA2BlE;;AACAR,EAAAA,SAAS,CACP,YAAY;AACV,QAAIG,QAAQ,IAAIC,OAAZ,IAAuBC,QAAQ,GAAG,CAAtC,EAAyC;AACvC,UAAIJ,KAAJ,EAAWU,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBR,OAAxB;AACXI,MAAAA,WAAW;AACZ;AACF,GANM,EAOPH,QAPO,EAQPF,QAAQ,IAAIC,OARL,CAAT;AAWA,SAAOE,OAAP;AACD;;GAxCuBJ,U;UAgBtBH,U,EAYAC,S","sourcesContent":["import { useCallback, useState, useEffect } from \"react\";\nimport useOnBlock from \"./OnBlock\";\nimport usePoller from \"./Poller\";\n\n/*\n  ~ What it does? ~\n\n  Gets your balance in ETH from given address and provider\n\n  ~ How can I use? ~\n\n  const yourLocalBalance = useBalance(localProvider, address);\n\n  ~ Features ~\n\n  - Provide address and get balance corresponding to given address\n  - Change provider to access balance on different chains (ex. mainnetProvider)\n  - If no pollTime is passed, the balance will update on every new block\n*/\n\nconst DEBUG = false;\n\nexport default function useBalance(provider, address, pollTime = 0) {\n  const [balance, setBalance] = useState();\n\n  const pollBalance = useCallback(\n    async (provider, address) => {\n      if (provider && address) {\n        const newBalance = await provider.getBalance(address);\n        if (newBalance !== balance) {\n          setBalance(newBalance);\n        }\n      }\n    },\n    [provider, address],\n  );\n\n  // Only pass a provider to watch on a block if there is no pollTime\n  useOnBlock(pollTime === 0 && provider, () => {\n    if (provider && address && pollTime === 0) {\n      pollBalance(provider, address);\n    }\n  });\n\n  // Update balance when the address or provider changes\n  useEffect(() => {\n    if (address && provider) pollBalance(provider, address);\n  }, [address, provider, pollBalance]);\n\n  // Use a poller if a pollTime is provided\n  usePoller(\n    async () => {\n      if (provider && address && pollTime > 0) {\n        if (DEBUG) console.log(\"polling!\", address);\n        pollBalance();\n      }\n    },\n    pollTime,\n    provider && address,\n  );\n\n  return balance;\n}\n"]},"metadata":{},"sourceType":"module"}