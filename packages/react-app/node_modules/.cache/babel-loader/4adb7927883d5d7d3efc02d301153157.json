{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useMemo, useState } from \"react\";\nimport useBurnerSigner from \"./BurnerSigner\";\n/*\n  ~ What it does? ~\n\n  Gets user provider\n\n  ~ How can I use? ~\n\n  const userProvider = useUserProvider(injectedProvider, localProvider);\n\n  ~ Features ~\n\n  - Specify the injected provider from Metamask\n  - Specify the local provider\n  - Usage examples:\n    const tx = Transactor(userSigner, gasPrice)\n*/\n\nconst useUserSigner = (injectedProvider, localProvider) => {\n  _s();\n\n  const [signer, setSigner] = useState();\n  const burnerSigner = useBurnerSigner(localProvider);\n  useMemo(() => {\n    if (injectedProvider) {\n      console.log(\"ðŸ¦Š Using injected provider\");\n      const injectedSigner = injectedProvider._isProvider ? injectedProvider.getSigner() : injectedProvider;\n      setSigner(injectedSigner);\n    } else if (!localProvider) setSigner();else {\n      if (window.location.pathname && window.location.pathname.indexOf(\"/pk\") >= 0) {\n        const incomingPK = window.location.hash.replace(\"#\", \"\");\n        let rawPK;\n\n        if (incomingPK.length === 64 || incomingPK.length === 66) {\n          console.log(\"ðŸ”‘ Incoming Private Key...\");\n          rawPK = incomingPK;\n          window.history.pushState({}, \"\", \"/\");\n          const currentPrivateKey = window.localStorage.getItem(\"metaPrivateKey\");\n\n          if (currentPrivateKey && currentPrivateKey !== rawPK) {\n            window.localStorage.setItem(\"metaPrivateKey_backup\" + Date.now(), currentPrivateKey);\n          }\n\n          window.localStorage.setItem(\"metaPrivateKey\", rawPK);\n        }\n      }\n\n      console.log(\"ðŸ”¥ Using burner signer\", burnerSigner);\n      setSigner(burnerSigner);\n    }\n  }, [injectedProvider, localProvider, burnerSigner]);\n  return signer;\n};\n\n_s(useUserSigner, \"fB9VnNHSe9J2X9Q72++FabtpO7E=\", false, function () {\n  return [useBurnerSigner];\n});\n\nexport default useUserSigner;","map":{"version":3,"sources":["/Users/chrisbuonocore/personal/hackathons/hackfs21/packages/react-app/src/hooks/UserSigner.js"],"names":["useMemo","useState","useBurnerSigner","useUserSigner","injectedProvider","localProvider","signer","setSigner","burnerSigner","console","log","injectedSigner","_isProvider","getSigner","window","location","pathname","indexOf","incomingPK","hash","replace","rawPK","length","history","pushState","currentPrivateKey","localStorage","getItem","setItem","Date","now"],"mappings":";;AAAA,SAASA,OAAT,EAAkBC,QAAlB,QAAkC,OAAlC;AACA,OAAOC,eAAP,MAA4B,gBAA5B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,aAAa,GAAG,CAACC,gBAAD,EAAmBC,aAAnB,KAAqC;AAAA;;AACzD,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBN,QAAQ,EAApC;AACA,QAAMO,YAAY,GAAGN,eAAe,CAACG,aAAD,CAApC;AAEAL,EAAAA,OAAO,CAAC,MAAM;AACZ,QAAII,gBAAJ,EAAsB;AACpBK,MAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ;AACA,YAAMC,cAAc,GAAGP,gBAAgB,CAACQ,WAAjB,GAA+BR,gBAAgB,CAACS,SAAjB,EAA/B,GAA8DT,gBAArF;AACAG,MAAAA,SAAS,CAACI,cAAD,CAAT;AACD,KAJD,MAIO,IAAI,CAACN,aAAL,EAAoBE,SAAS,GAA7B,KACF;AACH,UAAIO,MAAM,CAACC,QAAP,CAAgBC,QAAhB,IAA4BF,MAAM,CAACC,QAAP,CAAgBC,QAAhB,CAAyBC,OAAzB,CAAiC,KAAjC,KAA2C,CAA3E,EAA8E;AAC5E,cAAMC,UAAU,GAAGJ,MAAM,CAACC,QAAP,CAAgBI,IAAhB,CAAqBC,OAArB,CAA6B,GAA7B,EAAkC,EAAlC,CAAnB;AACA,YAAIC,KAAJ;;AACA,YAAIH,UAAU,CAACI,MAAX,KAAsB,EAAtB,IAA4BJ,UAAU,CAACI,MAAX,KAAsB,EAAtD,EAA0D;AACxDb,UAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ;AACAW,UAAAA,KAAK,GAAGH,UAAR;AACAJ,UAAAA,MAAM,CAACS,OAAP,CAAeC,SAAf,CAAyB,EAAzB,EAA6B,EAA7B,EAAiC,GAAjC;AACA,gBAAMC,iBAAiB,GAAGX,MAAM,CAACY,YAAP,CAAoBC,OAApB,CAA4B,gBAA5B,CAA1B;;AACA,cAAIF,iBAAiB,IAAIA,iBAAiB,KAAKJ,KAA/C,EAAsD;AACpDP,YAAAA,MAAM,CAACY,YAAP,CAAoBE,OAApB,CAA4B,0BAA0BC,IAAI,CAACC,GAAL,EAAtD,EAAkEL,iBAAlE;AACD;;AACDX,UAAAA,MAAM,CAACY,YAAP,CAAoBE,OAApB,CAA4B,gBAA5B,EAA8CP,KAA9C;AACD;AACF;;AAEDZ,MAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAsCF,YAAtC;AACAD,MAAAA,SAAS,CAACC,YAAD,CAAT;AACD;AACF,GAzBM,EAyBJ,CAACJ,gBAAD,EAAmBC,aAAnB,EAAkCG,YAAlC,CAzBI,CAAP;AA2BA,SAAOF,MAAP;AACD,CAhCD;;GAAMH,a;UAEiBD,e;;;AAgCvB,eAAeC,aAAf","sourcesContent":["import { useMemo, useState } from \"react\";\nimport useBurnerSigner from \"./BurnerSigner\";\n\n/*\n  ~ What it does? ~\n\n  Gets user provider\n\n  ~ How can I use? ~\n\n  const userProvider = useUserProvider(injectedProvider, localProvider);\n\n  ~ Features ~\n\n  - Specify the injected provider from Metamask\n  - Specify the local provider\n  - Usage examples:\n    const tx = Transactor(userSigner, gasPrice)\n*/\n\nconst useUserSigner = (injectedProvider, localProvider) => {\n  const [signer, setSigner] = useState();\n  const burnerSigner = useBurnerSigner(localProvider);\n\n  useMemo(() => {\n    if (injectedProvider) {\n      console.log(\"ðŸ¦Š Using injected provider\");\n      const injectedSigner = injectedProvider._isProvider ? injectedProvider.getSigner() : injectedProvider;\n      setSigner(injectedSigner);\n    } else if (!localProvider) setSigner();\n    else {\n      if (window.location.pathname && window.location.pathname.indexOf(\"/pk\") >= 0) {\n        const incomingPK = window.location.hash.replace(\"#\", \"\");\n        let rawPK;\n        if (incomingPK.length === 64 || incomingPK.length === 66) {\n          console.log(\"ðŸ”‘ Incoming Private Key...\");\n          rawPK = incomingPK;\n          window.history.pushState({}, \"\", \"/\");\n          const currentPrivateKey = window.localStorage.getItem(\"metaPrivateKey\");\n          if (currentPrivateKey && currentPrivateKey !== rawPK) {\n            window.localStorage.setItem(\"metaPrivateKey_backup\" + Date.now(), currentPrivateKey);\n          }\n          window.localStorage.setItem(\"metaPrivateKey\", rawPK);\n        }\n      }\n\n      console.log(\"ðŸ”¥ Using burner signer\", burnerSigner);\n      setSigner(burnerSigner);\n    }\n  }, [injectedProvider, localProvider, burnerSigner]);\n\n  return signer;\n};\n\nexport default useUserSigner;\n"]},"metadata":{},"sourceType":"module"}