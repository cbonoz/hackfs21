{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { constants } from \"ethers\";\nimport { useEffect, useState } from \"react\";\n/*\n  ~ What it does? ~\n\n  Gets address from given ENS name and provider\n\n  ~ How can I use? ~\n\n  const addressFromENS = useResolveName(mainnetProvider, \"austingriffith.eth\");\n\n  ~ Features ~\n\n  - Specify mainnetProvider\n  - Provide ENS name and get address corresponding to given ENS name\n*/\n\nconst useResolveName = (provider, ensName) => {\n  _s();\n\n  const [address, setAddress] = useState(constants.AddressZero);\n  useEffect(() => {\n    if (provider) {\n      provider.resolveName(ensName).then(resolvedAddress => setAddress(resolvedAddress));\n    }\n  }, [provider, ensName]);\n  return address;\n};\n\n_s(useResolveName, \"QNER7cEOZu6SpjStifdJ66rXWLU=\");\n\nexport default useResolveName;","map":{"version":3,"sources":["/Users/chrisbuonocore/personal/hackathons/hackfs21/packages/react-app/src/hooks/ResolveName.js"],"names":["constants","useEffect","useState","useResolveName","provider","ensName","address","setAddress","AddressZero","resolveName","then","resolvedAddress"],"mappings":";;AAAA,SAASA,SAAT,QAA0B,QAA1B;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,cAAc,GAAG,CAACC,QAAD,EAAWC,OAAX,KAAuB;AAAA;;AAC5C,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBL,QAAQ,CAACF,SAAS,CAACQ,WAAX,CAAtC;AAEAP,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIG,QAAJ,EAAc;AACZA,MAAAA,QAAQ,CAACK,WAAT,CAAqBJ,OAArB,EAA8BK,IAA9B,CAAmCC,eAAe,IAAIJ,UAAU,CAACI,eAAD,CAAhE;AACD;AACF,GAJQ,EAIN,CAACP,QAAD,EAAWC,OAAX,CAJM,CAAT;AAMA,SAAOC,OAAP;AACD,CAVD;;GAAMH,c;;AAYN,eAAeA,cAAf","sourcesContent":["import { constants } from \"ethers\";\nimport { useEffect, useState } from \"react\";\n\n/*\n  ~ What it does? ~\n\n  Gets address from given ENS name and provider\n\n  ~ How can I use? ~\n\n  const addressFromENS = useResolveName(mainnetProvider, \"austingriffith.eth\");\n\n  ~ Features ~\n\n  - Specify mainnetProvider\n  - Provide ENS name and get address corresponding to given ENS name\n*/\n\nconst useResolveName = (provider, ensName) => {\n  const [address, setAddress] = useState(constants.AddressZero);\n\n  useEffect(() => {\n    if (provider) {\n      provider.resolveName(ensName).then(resolvedAddress => setAddress(resolvedAddress));\n    }\n  }, [provider, ensName]);\n\n  return address;\n};\n\nexport default useResolveName;\n"]},"metadata":{},"sourceType":"module"}