{"ast":null,"code":"\"use strict\";\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  result[\"default\"] = mod;\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar secp256k1 = __importStar(require(\"secp256k1\"));\n\nfunction privateKeyVerify(privateKey) {\n  return secp256k1.privateKeyVerify(privateKey);\n}\n\nexports.privateKeyVerify = privateKeyVerify;\n\nfunction publicKeyCreate(privateKey, compressed) {\n  if (compressed === void 0) {\n    compressed = true;\n  }\n\n  return Buffer.from(secp256k1.publicKeyCreate(privateKey, compressed));\n}\n\nexports.publicKeyCreate = publicKeyCreate;\n\nfunction publicKeyVerify(publicKey) {\n  return secp256k1.publicKeyVerify(publicKey);\n}\n\nexports.publicKeyVerify = publicKeyVerify;\n\nfunction publicKeyConvert(publicKey, compressed) {\n  if (compressed === void 0) {\n    compressed = true;\n  }\n\n  return Buffer.from(secp256k1.publicKeyConvert(publicKey, compressed));\n}\n\nexports.publicKeyConvert = publicKeyConvert;\n\nfunction privateKeyTweakAdd(publicKey, tweak) {\n  return Buffer.from(secp256k1.privateKeyTweakAdd(Buffer.from(publicKey), tweak));\n}\n\nexports.privateKeyTweakAdd = privateKeyTweakAdd;\n\nfunction publicKeyTweakAdd(publicKey, tweak, compressed) {\n  if (compressed === void 0) {\n    compressed = true;\n  }\n\n  return Buffer.from(secp256k1.publicKeyTweakAdd(Buffer.from(publicKey), tweak, compressed));\n}\n\nexports.publicKeyTweakAdd = publicKeyTweakAdd;\n\nfunction sign(message, privateKey) {\n  var ret = secp256k1.ecdsaSign(message, privateKey);\n  return {\n    signature: Buffer.from(ret.signature),\n    recovery: ret.recid\n  };\n}\n\nexports.sign = sign;\n\nfunction verify(message, signature, publicKey) {\n  return secp256k1.ecdsaVerify(signature, message, publicKey);\n}\n\nexports.verify = verify;","map":{"version":3,"sources":["../src/shims/hdkey-secp256k1v3.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,IAAA,SAAA,GAAA,YAAA,CAAA,OAAA,CAAA,WAAA,CAAA,CAAA;;AAEA,SAAgB,gBAAhB,CAAiC,UAAjC,EAAmD;AACjD,SAAO,SAAS,CAAC,gBAAV,CAA2B,UAA3B,CAAP;AACD;;AAFD,OAAA,CAAA,gBAAA,GAAA,gBAAA;;AAIA,SAAgB,eAAhB,CAAgC,UAAhC,EAAoD,UAApD,EAAqE;AAAjB,MAAA,UAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,UAAA,GAAA,IAAA;AAAiB;;AACnE,SAAO,MAAM,CAAC,IAAP,CAAY,SAAS,CAAC,eAAV,CAA0B,UAA1B,EAAsC,UAAtC,CAAZ,CAAP;AACD;;AAFD,OAAA,CAAA,eAAA,GAAA,eAAA;;AAIA,SAAgB,eAAhB,CAAgC,SAAhC,EAAiD;AAC/C,SAAO,SAAS,CAAC,eAAV,CAA0B,SAA1B,CAAP;AACD;;AAFD,OAAA,CAAA,eAAA,GAAA,eAAA;;AAIA,SAAgB,gBAAhB,CAAiC,SAAjC,EAAoD,UAApD,EAAqE;AAAjB,MAAA,UAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,UAAA,GAAA,IAAA;AAAiB;;AACnE,SAAO,MAAM,CAAC,IAAP,CAAY,SAAS,CAAC,gBAAV,CAA2B,SAA3B,EAAsC,UAAtC,CAAZ,CAAP;AACD;;AAFD,OAAA,CAAA,gBAAA,GAAA,gBAAA;;AAIA,SAAgB,kBAAhB,CAAmC,SAAnC,EAAsD,KAAtD,EAAmE;AACjE,SAAO,MAAM,CAAC,IAAP,CACL,SAAS,CAAC,kBAAV,CAA6B,MAAM,CAAC,IAAP,CAAY,SAAZ,CAA7B,EAAqD,KAArD,CADK,CAAP;AAGD;;AAJD,OAAA,CAAA,kBAAA,GAAA,kBAAA;;AAMA,SAAgB,iBAAhB,CACE,SADF,EAEE,KAFF,EAGE,UAHF,EAGmB;AAAjB,MAAA,UAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,UAAA,GAAA,IAAA;AAAiB;;AAEjB,SAAO,MAAM,CAAC,IAAP,CACL,SAAS,CAAC,iBAAV,CAA4B,MAAM,CAAC,IAAP,CAAY,SAAZ,CAA5B,EAAoD,KAApD,EAA2D,UAA3D,CADK,CAAP;AAGD;;AARD,OAAA,CAAA,iBAAA,GAAA,iBAAA;;AAUA,SAAgB,IAAhB,CACE,OADF,EAEE,UAFF,EAEoB;AAElB,MAAM,GAAG,GAAG,SAAS,CAAC,SAAV,CAAoB,OAApB,EAA6B,UAA7B,CAAZ;AACA,SAAO;AAAE,IAAA,SAAS,EAAE,MAAM,CAAC,IAAP,CAAY,GAAG,CAAC,SAAhB,CAAb;AAAyC,IAAA,QAAQ,EAAE,GAAG,CAAC;AAAvD,GAAP;AACD;;AAND,OAAA,CAAA,IAAA,GAAA,IAAA;;AAQA,SAAgB,MAAhB,CACE,OADF,EAEE,SAFF,EAGE,SAHF,EAGmB;AAEjB,SAAO,SAAS,CAAC,WAAV,CAAsB,SAAtB,EAAiC,OAAjC,EAA0C,SAA1C,CAAP;AACD;;AAND,OAAA,CAAA,MAAA,GAAA,MAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar secp256k1 = __importStar(require(\"secp256k1\"));\nfunction privateKeyVerify(privateKey) {\n    return secp256k1.privateKeyVerify(privateKey);\n}\nexports.privateKeyVerify = privateKeyVerify;\nfunction publicKeyCreate(privateKey, compressed) {\n    if (compressed === void 0) { compressed = true; }\n    return Buffer.from(secp256k1.publicKeyCreate(privateKey, compressed));\n}\nexports.publicKeyCreate = publicKeyCreate;\nfunction publicKeyVerify(publicKey) {\n    return secp256k1.publicKeyVerify(publicKey);\n}\nexports.publicKeyVerify = publicKeyVerify;\nfunction publicKeyConvert(publicKey, compressed) {\n    if (compressed === void 0) { compressed = true; }\n    return Buffer.from(secp256k1.publicKeyConvert(publicKey, compressed));\n}\nexports.publicKeyConvert = publicKeyConvert;\nfunction privateKeyTweakAdd(publicKey, tweak) {\n    return Buffer.from(secp256k1.privateKeyTweakAdd(Buffer.from(publicKey), tweak));\n}\nexports.privateKeyTweakAdd = privateKeyTweakAdd;\nfunction publicKeyTweakAdd(publicKey, tweak, compressed) {\n    if (compressed === void 0) { compressed = true; }\n    return Buffer.from(secp256k1.publicKeyTweakAdd(Buffer.from(publicKey), tweak, compressed));\n}\nexports.publicKeyTweakAdd = publicKeyTweakAdd;\nfunction sign(message, privateKey) {\n    var ret = secp256k1.ecdsaSign(message, privateKey);\n    return { signature: Buffer.from(ret.signature), recovery: ret.recid };\n}\nexports.sign = sign;\nfunction verify(message, signature, publicKey) {\n    return secp256k1.ecdsaVerify(signature, message, publicKey);\n}\nexports.verify = verify;\n//# sourceMappingURL=hdkey-secp256k1v3.js.map"]},"metadata":{},"sourceType":"script"}