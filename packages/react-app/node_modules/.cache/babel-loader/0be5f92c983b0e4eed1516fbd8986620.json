{"ast":null,"code":"\"use strict\"; // Copyright (c) 2018-2020 WalletLink.org <https://www.walletlink.org/>\n// Copyright (c) 2018-2020 Coinbase, Inc. <https://www.coinbase.com/>\n// Licensed under the Apache License, version 2.0\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Session = void 0;\n\nconst crypto_1 = __importDefault(require(\"crypto\"));\n\nconst rxjs_1 = require(\"rxjs\");\n\nconst operators_1 = require(\"rxjs/operators\");\n\nconst STORAGE_KEY_SESSION_ID = \"session:id\";\nconst STORAGE_KEY_SESSION_SECRET = \"session:secret\";\nconst STORAGE_KEY_SESSION_LINKED = \"session:linked\";\n\nclass Session {\n  constructor(storage, id, secret, linked) {\n    this._storage = storage;\n    this._id = id || crypto_1.default.randomBytes(16).toString(\"hex\");\n    this._secret = secret || crypto_1.default.randomBytes(32).toString(\"hex\");\n    this._key = crypto_1.default.createHash(\"sha256\").update(`${this._id}, ${this._secret} WalletLink`, \"ascii\").digest(\"hex\");\n    this._linked = !!linked;\n  }\n\n  static load(storage) {\n    const id = storage.getItem(STORAGE_KEY_SESSION_ID);\n    const linked = storage.getItem(STORAGE_KEY_SESSION_LINKED);\n    const secret = storage.getItem(STORAGE_KEY_SESSION_SECRET);\n\n    if (id && secret) {\n      return new Session(storage, id, secret, linked === \"1\");\n    }\n\n    return null;\n  }\n\n  static clear(storage) {\n    storage.removeItem(STORAGE_KEY_SESSION_SECRET);\n    storage.removeItem(STORAGE_KEY_SESSION_ID);\n    storage.removeItem(STORAGE_KEY_SESSION_LINKED);\n  }\n\n  static get persistedSessionIdChange$() {\n    return rxjs_1.fromEvent(window, \"storage\").pipe(operators_1.filter(evt => evt.key === STORAGE_KEY_SESSION_ID), operators_1.map(evt => ({\n      oldValue: evt.oldValue || null,\n      newValue: evt.newValue || null\n    })));\n  }\n\n  get id() {\n    return this._id;\n  }\n\n  get secret() {\n    return this._secret;\n  }\n\n  get key() {\n    return this._key;\n  }\n\n  get linked() {\n    return this._linked;\n  }\n\n  set linked(val) {\n    this._linked = val;\n    this.persistLinked();\n  }\n\n  save() {\n    this._storage.setItem(STORAGE_KEY_SESSION_ID, this._id);\n\n    this._storage.setItem(STORAGE_KEY_SESSION_SECRET, this._secret);\n\n    this.persistLinked();\n    return this;\n  }\n\n  persistLinked() {\n    this._storage.setItem(STORAGE_KEY_SESSION_LINKED, this._linked ? \"1\" : \"0\");\n  }\n\n}\n\nexports.Session = Session;","map":{"version":3,"sources":["/Users/chrisbuonocore/personal/hackathons/hackfs21/node_modules/walletlink/dist/relay/Session.js"],"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","Session","crypto_1","require","rxjs_1","operators_1","STORAGE_KEY_SESSION_ID","STORAGE_KEY_SESSION_SECRET","STORAGE_KEY_SESSION_LINKED","constructor","storage","id","secret","linked","_storage","_id","default","randomBytes","toString","_secret","_key","createHash","update","digest","_linked","load","getItem","clear","removeItem","persistedSessionIdChange$","fromEvent","window","pipe","filter","evt","key","map","oldValue","newValue","val","persistLinked","save","setItem"],"mappings":"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","sourcesContent":["\"use strict\";\n// Copyright (c) 2018-2020 WalletLink.org <https://www.walletlink.org/>\n// Copyright (c) 2018-2020 Coinbase, Inc. <https://www.coinbase.com/>\n// Licensed under the Apache License, version 2.0\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Session = void 0;\nconst crypto_1 = __importDefault(require(\"crypto\"));\nconst rxjs_1 = require(\"rxjs\");\nconst operators_1 = require(\"rxjs/operators\");\nconst STORAGE_KEY_SESSION_ID = \"session:id\";\nconst STORAGE_KEY_SESSION_SECRET = \"session:secret\";\nconst STORAGE_KEY_SESSION_LINKED = \"session:linked\";\nclass Session {\n    constructor(storage, id, secret, linked) {\n        this._storage = storage;\n        this._id = id || crypto_1.default.randomBytes(16).toString(\"hex\");\n        this._secret = secret || crypto_1.default.randomBytes(32).toString(\"hex\");\n        this._key = crypto_1.default\n            .createHash(\"sha256\")\n            .update(`${this._id}, ${this._secret} WalletLink`, \"ascii\")\n            .digest(\"hex\");\n        this._linked = !!linked;\n    }\n    static load(storage) {\n        const id = storage.getItem(STORAGE_KEY_SESSION_ID);\n        const linked = storage.getItem(STORAGE_KEY_SESSION_LINKED);\n        const secret = storage.getItem(STORAGE_KEY_SESSION_SECRET);\n        if (id && secret) {\n            return new Session(storage, id, secret, linked === \"1\");\n        }\n        return null;\n    }\n    static clear(storage) {\n        storage.removeItem(STORAGE_KEY_SESSION_SECRET);\n        storage.removeItem(STORAGE_KEY_SESSION_ID);\n        storage.removeItem(STORAGE_KEY_SESSION_LINKED);\n    }\n    static get persistedSessionIdChange$() {\n        return rxjs_1.fromEvent(window, \"storage\").pipe(operators_1.filter(evt => evt.key === STORAGE_KEY_SESSION_ID), operators_1.map(evt => ({\n            oldValue: evt.oldValue || null,\n            newValue: evt.newValue || null\n        })));\n    }\n    get id() {\n        return this._id;\n    }\n    get secret() {\n        return this._secret;\n    }\n    get key() {\n        return this._key;\n    }\n    get linked() {\n        return this._linked;\n    }\n    set linked(val) {\n        this._linked = val;\n        this.persistLinked();\n    }\n    save() {\n        this._storage.setItem(STORAGE_KEY_SESSION_ID, this._id);\n        this._storage.setItem(STORAGE_KEY_SESSION_SECRET, this._secret);\n        this.persistLinked();\n        return this;\n    }\n    persistLinked() {\n        this._storage.setItem(STORAGE_KEY_SESSION_LINKED, this._linked ? \"1\" : \"0\");\n    }\n}\nexports.Session = Session;\n"]},"metadata":{},"sourceType":"script"}