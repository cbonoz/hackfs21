{"ast":null,"code":"\"use strict\"; // Copyright (c) 2018-2020 WalletLink.org <https://www.walletlink.org/>\n// Copyright (c) 2018-2020 Coinbase, Inc. <https://www.coinbase.com/>\n// Licensed under the Apache License, version 2.0\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RxWebSocket = exports.ConnectionState = void 0;\n\nconst rxjs_1 = require(\"rxjs\");\n\nconst operators_1 = require(\"rxjs/operators\");\n\nvar ConnectionState;\n\n(function (ConnectionState) {\n  ConnectionState[ConnectionState[\"DISCONNECTED\"] = 0] = \"DISCONNECTED\";\n  ConnectionState[ConnectionState[\"CONNECTING\"] = 1] = \"CONNECTING\";\n  ConnectionState[ConnectionState[\"CONNECTED\"] = 2] = \"CONNECTED\";\n})(ConnectionState = exports.ConnectionState || (exports.ConnectionState = {}));\n/**\n * Rx-ified WebSocket\n */\n\n\nclass RxWebSocket {\n  /**\n   * Constructor\n   * @param url WebSocket server URL\n   * @param [WebSocketClass] Custom WebSocket implementation\n   */\n  constructor(url, WebSocketClass = WebSocket) {\n    this.WebSocketClass = WebSocketClass;\n    this.webSocket = null;\n    this.connectionStateSubject = new rxjs_1.BehaviorSubject(ConnectionState.DISCONNECTED);\n    this.incomingDataSubject = new rxjs_1.Subject();\n    this.url = url.replace(/^http/, \"ws\");\n  }\n  /**\n   * Make a websocket connection\n   * @returns an Observable that completes when connected\n   */\n\n\n  connect() {\n    if (this.webSocket) {\n      return rxjs_1.throwError(new Error(\"webSocket object is not null\"));\n    }\n\n    return new rxjs_1.Observable(obs => {\n      let webSocket;\n\n      try {\n        this.webSocket = webSocket = new this.WebSocketClass(this.url);\n      } catch (err) {\n        obs.error(err);\n        return;\n      }\n\n      this.connectionStateSubject.next(ConnectionState.CONNECTING);\n\n      webSocket.onclose = evt => {\n        this.clearWebSocket();\n        obs.error(new Error(`websocket error ${evt.code}: ${evt.reason}`));\n        this.connectionStateSubject.next(ConnectionState.DISCONNECTED);\n      };\n\n      webSocket.onopen = _ => {\n        obs.next();\n        obs.complete();\n        this.connectionStateSubject.next(ConnectionState.CONNECTED);\n      };\n\n      webSocket.onmessage = evt => {\n        this.incomingDataSubject.next(evt.data);\n      };\n    }).pipe(operators_1.take(1));\n  }\n  /**\n   * Disconnect from server\n   */\n\n\n  disconnect() {\n    const {\n      webSocket\n    } = this;\n\n    if (!webSocket) {\n      return;\n    }\n\n    this.clearWebSocket();\n    this.connectionStateSubject.next(ConnectionState.DISCONNECTED);\n\n    try {\n      webSocket.close();\n    } catch (_a) {}\n  }\n  /**\n   * Emit current connection state and subsequent changes\n   * @returns an Observable for the connection state\n   */\n\n\n  get connectionState$() {\n    return this.connectionStateSubject.asObservable();\n  }\n  /**\n   * Emit incoming data from server\n   * @returns an Observable for the data received\n   */\n\n\n  get incomingData$() {\n    return this.incomingDataSubject.asObservable();\n  }\n  /**\n   * Emit incoming JSON data from server. non-JSON data are ignored\n   * @returns an Observable for parsed JSON data\n   */\n\n\n  get incomingJSONData$() {\n    return this.incomingData$.pipe(operators_1.flatMap(m => {\n      let j;\n\n      try {\n        j = JSON.parse(m);\n      } catch (err) {\n        return rxjs_1.empty();\n      }\n\n      return rxjs_1.of(j);\n    }));\n  }\n  /**\n   * Send data to server\n   * @param data text to send\n   */\n\n\n  sendData(data) {\n    const {\n      webSocket\n    } = this;\n\n    if (!webSocket) {\n      throw new Error(\"websocket is not connected\");\n    }\n\n    webSocket.send(data);\n  }\n\n  clearWebSocket() {\n    const {\n      webSocket\n    } = this;\n\n    if (!webSocket) {\n      return;\n    }\n\n    this.webSocket = null;\n    webSocket.onclose = null;\n    webSocket.onerror = null;\n    webSocket.onmessage = null;\n    webSocket.onopen = null;\n  }\n\n}\n\nexports.RxWebSocket = RxWebSocket;","map":{"version":3,"sources":["/Users/chrisbuonocore/personal/hackathons/hackfs21/node_modules/walletlink/dist/connection/RxWebSocket.js"],"names":["Object","defineProperty","exports","value","RxWebSocket","ConnectionState","rxjs_1","require","operators_1","constructor","url","WebSocketClass","WebSocket","webSocket","connectionStateSubject","BehaviorSubject","DISCONNECTED","incomingDataSubject","Subject","replace","connect","throwError","Error","Observable","obs","err","error","next","CONNECTING","onclose","evt","clearWebSocket","code","reason","onopen","_","complete","CONNECTED","onmessage","data","pipe","take","disconnect","close","_a","connectionState$","asObservable","incomingData$","incomingJSONData$","flatMap","m","j","JSON","parse","empty","of","sendData","send","onerror"],"mappings":"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","sourcesContent":["\"use strict\";\n// Copyright (c) 2018-2020 WalletLink.org <https://www.walletlink.org/>\n// Copyright (c) 2018-2020 Coinbase, Inc. <https://www.coinbase.com/>\n// Licensed under the Apache License, version 2.0\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RxWebSocket = exports.ConnectionState = void 0;\nconst rxjs_1 = require(\"rxjs\");\nconst operators_1 = require(\"rxjs/operators\");\nvar ConnectionState;\n(function (ConnectionState) {\n    ConnectionState[ConnectionState[\"DISCONNECTED\"] = 0] = \"DISCONNECTED\";\n    ConnectionState[ConnectionState[\"CONNECTING\"] = 1] = \"CONNECTING\";\n    ConnectionState[ConnectionState[\"CONNECTED\"] = 2] = \"CONNECTED\";\n})(ConnectionState = exports.ConnectionState || (exports.ConnectionState = {}));\n/**\n * Rx-ified WebSocket\n */\nclass RxWebSocket {\n    /**\n     * Constructor\n     * @param url WebSocket server URL\n     * @param [WebSocketClass] Custom WebSocket implementation\n     */\n    constructor(url, WebSocketClass = WebSocket) {\n        this.WebSocketClass = WebSocketClass;\n        this.webSocket = null;\n        this.connectionStateSubject = new rxjs_1.BehaviorSubject(ConnectionState.DISCONNECTED);\n        this.incomingDataSubject = new rxjs_1.Subject();\n        this.url = url.replace(/^http/, \"ws\");\n    }\n    /**\n     * Make a websocket connection\n     * @returns an Observable that completes when connected\n     */\n    connect() {\n        if (this.webSocket) {\n            return rxjs_1.throwError(new Error(\"webSocket object is not null\"));\n        }\n        return new rxjs_1.Observable(obs => {\n            let webSocket;\n            try {\n                this.webSocket = webSocket = new this.WebSocketClass(this.url);\n            }\n            catch (err) {\n                obs.error(err);\n                return;\n            }\n            this.connectionStateSubject.next(ConnectionState.CONNECTING);\n            webSocket.onclose = evt => {\n                this.clearWebSocket();\n                obs.error(new Error(`websocket error ${evt.code}: ${evt.reason}`));\n                this.connectionStateSubject.next(ConnectionState.DISCONNECTED);\n            };\n            webSocket.onopen = _ => {\n                obs.next();\n                obs.complete();\n                this.connectionStateSubject.next(ConnectionState.CONNECTED);\n            };\n            webSocket.onmessage = evt => {\n                this.incomingDataSubject.next(evt.data);\n            };\n        }).pipe(operators_1.take(1));\n    }\n    /**\n     * Disconnect from server\n     */\n    disconnect() {\n        const { webSocket } = this;\n        if (!webSocket) {\n            return;\n        }\n        this.clearWebSocket();\n        this.connectionStateSubject.next(ConnectionState.DISCONNECTED);\n        try {\n            webSocket.close();\n        }\n        catch (_a) { }\n    }\n    /**\n     * Emit current connection state and subsequent changes\n     * @returns an Observable for the connection state\n     */\n    get connectionState$() {\n        return this.connectionStateSubject.asObservable();\n    }\n    /**\n     * Emit incoming data from server\n     * @returns an Observable for the data received\n     */\n    get incomingData$() {\n        return this.incomingDataSubject.asObservable();\n    }\n    /**\n     * Emit incoming JSON data from server. non-JSON data are ignored\n     * @returns an Observable for parsed JSON data\n     */\n    get incomingJSONData$() {\n        return this.incomingData$.pipe(operators_1.flatMap(m => {\n            let j;\n            try {\n                j = JSON.parse(m);\n            }\n            catch (err) {\n                return rxjs_1.empty();\n            }\n            return rxjs_1.of(j);\n        }));\n    }\n    /**\n     * Send data to server\n     * @param data text to send\n     */\n    sendData(data) {\n        const { webSocket } = this;\n        if (!webSocket) {\n            throw new Error(\"websocket is not connected\");\n        }\n        webSocket.send(data);\n    }\n    clearWebSocket() {\n        const { webSocket } = this;\n        if (!webSocket) {\n            return;\n        }\n        this.webSocket = null;\n        webSocket.onclose = null;\n        webSocket.onerror = null;\n        webSocket.onmessage = null;\n        webSocket.onopen = null;\n    }\n}\nexports.RxWebSocket = RxWebSocket;\n"]},"metadata":{},"sourceType":"script"}