{"ast":null,"code":"// Parse backticks\n'use strict';\n\nmodule.exports = function backtick(state, silent) {\n  var start,\n      max,\n      marker,\n      matchStart,\n      matchEnd,\n      token,\n      pos = state.pos,\n      ch = state.src.charCodeAt(pos);\n\n  if (ch !== 0x60\n  /* ` */\n  ) {\n    return false;\n  }\n\n  start = pos;\n  pos++;\n  max = state.posMax;\n\n  while (pos < max && state.src.charCodeAt(pos) === 0x60\n  /* ` */\n  ) {\n    pos++;\n  }\n\n  marker = state.src.slice(start, pos);\n  matchStart = matchEnd = pos;\n\n  while ((matchStart = state.src.indexOf('`', matchEnd)) !== -1) {\n    matchEnd = matchStart + 1;\n\n    while (matchEnd < max && state.src.charCodeAt(matchEnd) === 0x60\n    /* ` */\n    ) {\n      matchEnd++;\n    }\n\n    if (matchEnd - matchStart === marker.length) {\n      if (!silent) {\n        token = state.push('code_inline', 'code', 0);\n        token.markup = marker;\n        token.content = state.src.slice(pos, matchStart).replace(/\\n/g, ' ').replace(/^ (.+) $/, '$1');\n      }\n\n      state.pos = matchEnd;\n      return true;\n    }\n  }\n\n  if (!silent) {\n    state.pending += marker;\n  }\n\n  state.pos += marker.length;\n  return true;\n};","map":{"version":3,"sources":["/Users/chrisbuonocore/personal/hackathons/hackfs21/node_modules/markdown-it/lib/rules_inline/backticks.js"],"names":["module","exports","backtick","state","silent","start","max","marker","matchStart","matchEnd","token","pos","ch","src","charCodeAt","posMax","slice","indexOf","length","push","markup","content","replace","pending"],"mappings":"AAAA;AAEA;;AAEAA,MAAM,CAACC,OAAP,GAAiB,SAASC,QAAT,CAAkBC,KAAlB,EAAyBC,MAAzB,EAAiC;AAChD,MAAIC,KAAJ;AAAA,MAAWC,GAAX;AAAA,MAAgBC,MAAhB;AAAA,MAAwBC,UAAxB;AAAA,MAAoCC,QAApC;AAAA,MAA8CC,KAA9C;AAAA,MACIC,GAAG,GAAGR,KAAK,CAACQ,GADhB;AAAA,MAEIC,EAAE,GAAGT,KAAK,CAACU,GAAN,CAAUC,UAAV,CAAqBH,GAArB,CAFT;;AAIA,MAAIC,EAAE,KAAK;AAAI;AAAf,IAAwB;AAAE,WAAO,KAAP;AAAe;;AAEzCP,EAAAA,KAAK,GAAGM,GAAR;AACAA,EAAAA,GAAG;AACHL,EAAAA,GAAG,GAAGH,KAAK,CAACY,MAAZ;;AAEA,SAAOJ,GAAG,GAAGL,GAAN,IAAaH,KAAK,CAACU,GAAN,CAAUC,UAAV,CAAqBH,GAArB,MAA8B;AAAI;AAAtD,IAA+D;AAAEA,IAAAA,GAAG;AAAK;;AAEzEJ,EAAAA,MAAM,GAAGJ,KAAK,CAACU,GAAN,CAAUG,KAAV,CAAgBX,KAAhB,EAAuBM,GAAvB,CAAT;AAEAH,EAAAA,UAAU,GAAGC,QAAQ,GAAGE,GAAxB;;AAEA,SAAO,CAACH,UAAU,GAAGL,KAAK,CAACU,GAAN,CAAUI,OAAV,CAAkB,GAAlB,EAAuBR,QAAvB,CAAd,MAAoD,CAAC,CAA5D,EAA+D;AAC7DA,IAAAA,QAAQ,GAAGD,UAAU,GAAG,CAAxB;;AAEA,WAAOC,QAAQ,GAAGH,GAAX,IAAkBH,KAAK,CAACU,GAAN,CAAUC,UAAV,CAAqBL,QAArB,MAAmC;AAAI;AAAhE,MAAyE;AAAEA,MAAAA,QAAQ;AAAK;;AAExF,QAAIA,QAAQ,GAAGD,UAAX,KAA0BD,MAAM,CAACW,MAArC,EAA6C;AAC3C,UAAI,CAACd,MAAL,EAAa;AACXM,QAAAA,KAAK,GAAWP,KAAK,CAACgB,IAAN,CAAW,aAAX,EAA0B,MAA1B,EAAkC,CAAlC,CAAhB;AACAT,QAAAA,KAAK,CAACU,MAAN,GAAgBb,MAAhB;AACAG,QAAAA,KAAK,CAACW,OAAN,GAAgBlB,KAAK,CAACU,GAAN,CAAUG,KAAV,CAAgBL,GAAhB,EAAqBH,UAArB,EACbc,OADa,CACL,KADK,EACE,GADF,EAEbA,OAFa,CAEL,UAFK,EAEO,IAFP,CAAhB;AAGD;;AACDnB,MAAAA,KAAK,CAACQ,GAAN,GAAYF,QAAZ;AACA,aAAO,IAAP;AACD;AACF;;AAED,MAAI,CAACL,MAAL,EAAa;AAAED,IAAAA,KAAK,CAACoB,OAAN,IAAiBhB,MAAjB;AAA0B;;AACzCJ,EAAAA,KAAK,CAACQ,GAAN,IAAaJ,MAAM,CAACW,MAApB;AACA,SAAO,IAAP;AACD,CAtCD","sourcesContent":["// Parse backticks\n\n'use strict';\n\nmodule.exports = function backtick(state, silent) {\n  var start, max, marker, matchStart, matchEnd, token,\n      pos = state.pos,\n      ch = state.src.charCodeAt(pos);\n\n  if (ch !== 0x60/* ` */) { return false; }\n\n  start = pos;\n  pos++;\n  max = state.posMax;\n\n  while (pos < max && state.src.charCodeAt(pos) === 0x60/* ` */) { pos++; }\n\n  marker = state.src.slice(start, pos);\n\n  matchStart = matchEnd = pos;\n\n  while ((matchStart = state.src.indexOf('`', matchEnd)) !== -1) {\n    matchEnd = matchStart + 1;\n\n    while (matchEnd < max && state.src.charCodeAt(matchEnd) === 0x60/* ` */) { matchEnd++; }\n\n    if (matchEnd - matchStart === marker.length) {\n      if (!silent) {\n        token         = state.push('code_inline', 'code', 0);\n        token.markup  = marker;\n        token.content = state.src.slice(pos, matchStart)\n          .replace(/\\n/g, ' ')\n          .replace(/^ (.+) $/, '$1');\n      }\n      state.pos = matchEnd;\n      return true;\n    }\n  }\n\n  if (!silent) { state.pending += marker; }\n  state.pos += marker.length;\n  return true;\n};\n"]},"metadata":{},"sourceType":"script"}