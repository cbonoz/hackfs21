{"ast":null,"code":"/**\n * ANSI X.923 padding strategy.\n */\nexport const AnsiX923 = {\n  pad(data, blockSize) {\n    const _data = data; // Shortcuts\n\n    const dataSigBytes = _data.sigBytes;\n    const blockSizeBytes = blockSize * 4; // Count padding bytes\n\n    const nPaddingBytes = blockSizeBytes - dataSigBytes % blockSizeBytes; // Compute last byte position\n\n    const lastBytePos = dataSigBytes + nPaddingBytes - 1; // Pad\n\n    _data.clamp();\n\n    _data.words[lastBytePos >>> 2] |= nPaddingBytes << 24 - lastBytePos % 4 * 8;\n    _data.sigBytes += nPaddingBytes;\n  },\n\n  unpad(data) {\n    const _data = data; // Get number of padding bytes from last byte\n\n    const nPaddingBytes = _data.words[_data.sigBytes - 1 >>> 2] & 0xff; // Remove padding\n\n    _data.sigBytes -= nPaddingBytes;\n  }\n\n};","map":{"version":3,"sources":["/Users/chrisbuonocore/personal/hackathons/hackfs21/node_modules/crypto-es/lib/pad-ansix923.js"],"names":["AnsiX923","pad","data","blockSize","_data","dataSigBytes","sigBytes","blockSizeBytes","nPaddingBytes","lastBytePos","clamp","words","unpad"],"mappings":"AAAA;AACA;AACA;AACA,OAAO,MAAMA,QAAQ,GAAG;AACtBC,EAAAA,GAAG,CAACC,IAAD,EAAOC,SAAP,EAAkB;AACnB,UAAMC,KAAK,GAAGF,IAAd,CADmB,CAGnB;;AACA,UAAMG,YAAY,GAAGD,KAAK,CAACE,QAA3B;AACA,UAAMC,cAAc,GAAGJ,SAAS,GAAG,CAAnC,CALmB,CAOnB;;AACA,UAAMK,aAAa,GAAGD,cAAc,GAAIF,YAAY,GAAGE,cAAvD,CARmB,CAUnB;;AACA,UAAME,WAAW,GAAGJ,YAAY,GAAGG,aAAf,GAA+B,CAAnD,CAXmB,CAanB;;AACAJ,IAAAA,KAAK,CAACM,KAAN;;AACAN,IAAAA,KAAK,CAACO,KAAN,CAAYF,WAAW,KAAK,CAA5B,KAAkCD,aAAa,IAAK,KAAMC,WAAW,GAAG,CAAf,GAAoB,CAA7E;AACAL,IAAAA,KAAK,CAACE,QAAN,IAAkBE,aAAlB;AACD,GAlBqB;;AAoBtBI,EAAAA,KAAK,CAACV,IAAD,EAAO;AACV,UAAME,KAAK,GAAGF,IAAd,CADU,CAGV;;AACA,UAAMM,aAAa,GAAGJ,KAAK,CAACO,KAAN,CAAaP,KAAK,CAACE,QAAN,GAAiB,CAAlB,KAAyB,CAArC,IAA0C,IAAhE,CAJU,CAMV;;AACAF,IAAAA,KAAK,CAACE,QAAN,IAAkBE,aAAlB;AACD;;AA5BqB,CAAjB","sourcesContent":["/**\n * ANSI X.923 padding strategy.\n */\nexport const AnsiX923 = {\n  pad(data, blockSize) {\n    const _data = data;\n\n    // Shortcuts\n    const dataSigBytes = _data.sigBytes;\n    const blockSizeBytes = blockSize * 4;\n\n    // Count padding bytes\n    const nPaddingBytes = blockSizeBytes - (dataSigBytes % blockSizeBytes);\n\n    // Compute last byte position\n    const lastBytePos = dataSigBytes + nPaddingBytes - 1;\n\n    // Pad\n    _data.clamp();\n    _data.words[lastBytePos >>> 2] |= nPaddingBytes << (24 - (lastBytePos % 4) * 8);\n    _data.sigBytes += nPaddingBytes;\n  },\n\n  unpad(data) {\n    const _data = data;\n\n    // Get number of padding bytes from last byte\n    const nPaddingBytes = _data.words[(_data.sigBytes - 1) >>> 2] & 0xff;\n\n    // Remove padding\n    _data.sigBytes -= nPaddingBytes;\n  },\n};\n"]},"metadata":{},"sourceType":"module"}