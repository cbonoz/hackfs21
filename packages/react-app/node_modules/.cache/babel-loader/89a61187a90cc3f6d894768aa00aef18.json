{"ast":null,"code":"export function opt(ofRule) {\n  return {\n    ofRule\n  };\n}\nexport function list(ofRule, separator) {\n  return {\n    ofRule,\n    isList: true,\n    separator\n  };\n}\nexport function butNot(rule, exclusions) {\n  const ruleMatch = rule.match;\n\n  rule.match = token => {\n    let check = false;\n\n    if (ruleMatch) {\n      check = ruleMatch(token);\n    }\n\n    return check && exclusions.every(exclusion => exclusion.match && !exclusion.match(token));\n  };\n\n  return rule;\n}\nexport function t(kind, style) {\n  return {\n    style,\n    match: token => token.kind === kind\n  };\n}\nexport function p(value, style) {\n  return {\n    style: style || 'punctuation',\n    match: token => token.kind === 'Punctuation' && token.value === value\n  };\n}","map":{"version":3,"sources":["../src/RuleHelpers.ts"],"names":[],"mappings":"AAcA,OAAM,SAAU,GAAV,CAAc,MAAd,EAAmC;AACvC,SAAO;AAAE,IAAA;AAAF,GAAP;AACD;AAGD,OAAM,SAAU,IAAV,CAAe,MAAf,EAAsC,SAAtC,EAA+D;AACnE,SAAO;AAAE,IAAA,MAAF;AAAU,IAAA,MAAM,EAAE,IAAlB;AAAwB,IAAA;AAAxB,GAAP;AACD;AAGD,OAAM,SAAU,MAAV,CAAiB,IAAjB,EAA6B,UAA7B,EAAoD;AACxD,QAAM,SAAS,GAAG,IAAI,CAAC,KAAvB;;AACA,EAAA,IAAI,CAAC,KAAL,GAAa,KAAK,IAAG;AACnB,QAAI,KAAK,GAAG,KAAZ;;AACA,QAAI,SAAJ,EAAe;AACb,MAAA,KAAK,GAAG,SAAS,CAAC,KAAD,CAAjB;AACD;;AACD,WACE,KAAK,IACL,UAAU,CAAC,KAAX,CAAiB,SAAS,IAAI,SAAS,CAAC,KAAV,IAAmB,CAAC,SAAS,CAAC,KAAV,CAAgB,KAAhB,CAAlD,CAFF;AAID,GATD;;AAUA,SAAO,IAAP;AACD;AAGD,OAAM,SAAU,CAAV,CAAY,IAAZ,EAA0B,KAA1B,EAAuC;AAC3C,SAAO;AAAE,IAAA,KAAF;AAAS,IAAA,KAAK,EAAG,KAAD,IAAkB,KAAK,CAAC,IAAN,KAAe;AAAjD,GAAP;AACD;AAGD,OAAM,SAAU,CAAV,CAAY,KAAZ,EAA2B,KAA3B,EAAyC;AAC7C,SAAO;AACL,IAAA,KAAK,EAAE,KAAK,IAAI,aADX;AAEL,IAAA,KAAK,EAAG,KAAD,IACL,KAAK,CAAC,IAAN,KAAe,aAAf,IAAgC,KAAK,CAAC,KAAN,KAAgB;AAH7C,GAAP;AAKD","sourceRoot":"","sourcesContent":["export function opt(ofRule) {\n    return { ofRule };\n}\nexport function list(ofRule, separator) {\n    return { ofRule, isList: true, separator };\n}\nexport function butNot(rule, exclusions) {\n    const ruleMatch = rule.match;\n    rule.match = token => {\n        let check = false;\n        if (ruleMatch) {\n            check = ruleMatch(token);\n        }\n        return (check &&\n            exclusions.every(exclusion => exclusion.match && !exclusion.match(token)));\n    };\n    return rule;\n}\nexport function t(kind, style) {\n    return { style, match: (token) => token.kind === kind };\n}\nexport function p(value, style) {\n    return {\n        style: style || 'punctuation',\n        match: (token) => token.kind === 'Punctuation' && token.value === value,\n    };\n}\n//# sourceMappingURL=RuleHelpers.js.map"]},"metadata":{},"sourceType":"module"}