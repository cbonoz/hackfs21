{"ast":null,"code":"import * as env from \"@walletconnect/environment\";\nimport { ENCRYPT_OP, DECRYPT_OP, SIGN_OP, VERIFY_OP, AES_BROWSER_ALGO, AES_LENGTH, HMAC_BROWSER_ALGO, HMAC_BROWSER, HMAC_LENGTH, SHA256_BROWSER_ALGO, SHA512_BROWSER_ALGO, LENGTH_512 } from \"../constants\";\nexport function getAlgo(type) {\n  return type === AES_BROWSER_ALGO ? {\n    length: AES_LENGTH,\n    name: AES_BROWSER_ALGO\n  } : {\n    hash: {\n      name: HMAC_BROWSER_ALGO\n    },\n    name: HMAC_BROWSER\n  };\n}\nexport function getOps(type) {\n  return type === AES_BROWSER_ALGO ? [ENCRYPT_OP, DECRYPT_OP] : [SIGN_OP, VERIFY_OP];\n}\nexport async function browserExportKey(cryptoKey, type = AES_BROWSER_ALGO) {\n  const subtle = env.getSubtleCrypto();\n  return new Uint8Array(await subtle.exportKey(\"raw\", cryptoKey));\n}\nexport async function browserImportKey(buffer, type = AES_BROWSER_ALGO) {\n  return env.getSubtleCrypto().importKey(\"raw\", buffer, getAlgo(type), true, getOps(type));\n}\nexport async function browserAesEncrypt(iv, key, data) {\n  const subtle = env.getSubtleCrypto();\n  const cryptoKey = await browserImportKey(key, AES_BROWSER_ALGO);\n  const result = await subtle.encrypt({\n    iv,\n    name: AES_BROWSER_ALGO\n  }, cryptoKey, data);\n  return new Uint8Array(result);\n}\nexport async function browserAesDecrypt(iv, key, data) {\n  const subtle = env.getSubtleCrypto();\n  const cryptoKey = await browserImportKey(key, AES_BROWSER_ALGO);\n  const result = await subtle.decrypt({\n    iv,\n    name: AES_BROWSER_ALGO\n  }, cryptoKey, data);\n  return new Uint8Array(result);\n}\nexport async function browserHmacSha256Sign(key, data) {\n  const subtle = env.getSubtleCrypto();\n  const cryptoKey = await browserImportKey(key, HMAC_BROWSER);\n  const signature = await subtle.sign({\n    length: HMAC_LENGTH,\n    name: HMAC_BROWSER\n  }, cryptoKey, data);\n  return new Uint8Array(signature);\n}\nexport async function browserHmacSha512Sign(key, data) {\n  const subtle = env.getSubtleCrypto();\n  const cryptoKey = await browserImportKey(key, HMAC_BROWSER);\n  const signature = await subtle.sign({\n    length: LENGTH_512,\n    name: HMAC_BROWSER\n  }, cryptoKey, data);\n  return new Uint8Array(signature);\n}\nexport async function browserSha256(data) {\n  const subtle = env.getSubtleCrypto();\n  const result = await subtle.digest({\n    name: SHA256_BROWSER_ALGO\n  }, data);\n  return new Uint8Array(result);\n}\nexport async function browserSha512(data) {\n  const subtle = env.getSubtleCrypto();\n  const result = await subtle.digest({\n    name: SHA512_BROWSER_ALGO\n  }, data);\n  return new Uint8Array(result);\n}","map":{"version":3,"sources":["../../../src/lib/browser.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import * as env from \"@walletconnect/environment\";\nimport { ENCRYPT_OP, DECRYPT_OP, SIGN_OP, VERIFY_OP, AES_BROWSER_ALGO, AES_LENGTH, HMAC_BROWSER_ALGO, HMAC_BROWSER, HMAC_LENGTH, SHA256_BROWSER_ALGO, SHA512_BROWSER_ALGO, LENGTH_512, } from \"../constants\";\nexport function getAlgo(type) {\n    return type === AES_BROWSER_ALGO\n        ? { length: AES_LENGTH, name: AES_BROWSER_ALGO }\n        : {\n            hash: { name: HMAC_BROWSER_ALGO },\n            name: HMAC_BROWSER,\n        };\n}\nexport function getOps(type) {\n    return type === AES_BROWSER_ALGO\n        ? [ENCRYPT_OP, DECRYPT_OP]\n        : [SIGN_OP, VERIFY_OP];\n}\nexport async function browserExportKey(cryptoKey, type = AES_BROWSER_ALGO) {\n    const subtle = env.getSubtleCrypto();\n    return new Uint8Array(await subtle.exportKey(\"raw\", cryptoKey));\n}\nexport async function browserImportKey(buffer, type = AES_BROWSER_ALGO) {\n    return env.getSubtleCrypto().importKey(\"raw\", buffer, getAlgo(type), true, getOps(type));\n}\nexport async function browserAesEncrypt(iv, key, data) {\n    const subtle = env.getSubtleCrypto();\n    const cryptoKey = await browserImportKey(key, AES_BROWSER_ALGO);\n    const result = await subtle.encrypt({\n        iv,\n        name: AES_BROWSER_ALGO,\n    }, cryptoKey, data);\n    return new Uint8Array(result);\n}\nexport async function browserAesDecrypt(iv, key, data) {\n    const subtle = env.getSubtleCrypto();\n    const cryptoKey = await browserImportKey(key, AES_BROWSER_ALGO);\n    const result = await subtle.decrypt({\n        iv,\n        name: AES_BROWSER_ALGO,\n    }, cryptoKey, data);\n    return new Uint8Array(result);\n}\nexport async function browserHmacSha256Sign(key, data) {\n    const subtle = env.getSubtleCrypto();\n    const cryptoKey = await browserImportKey(key, HMAC_BROWSER);\n    const signature = await subtle.sign({\n        length: HMAC_LENGTH,\n        name: HMAC_BROWSER,\n    }, cryptoKey, data);\n    return new Uint8Array(signature);\n}\nexport async function browserHmacSha512Sign(key, data) {\n    const subtle = env.getSubtleCrypto();\n    const cryptoKey = await browserImportKey(key, HMAC_BROWSER);\n    const signature = await subtle.sign({\n        length: LENGTH_512,\n        name: HMAC_BROWSER,\n    }, cryptoKey, data);\n    return new Uint8Array(signature);\n}\nexport async function browserSha256(data) {\n    const subtle = env.getSubtleCrypto();\n    const result = await subtle.digest({\n        name: SHA256_BROWSER_ALGO,\n    }, data);\n    return new Uint8Array(result);\n}\nexport async function browserSha512(data) {\n    const subtle = env.getSubtleCrypto();\n    const result = await subtle.digest({\n        name: SHA512_BROWSER_ALGO,\n    }, data);\n    return new Uint8Array(result);\n}\n//# sourceMappingURL=browser.js.map"]},"metadata":{},"sourceType":"module"}