{"ast":null,"code":"const {\n  Buffer\n} = require('buffer');\n\nconst ethUtil = require('ethereumjs-util');\n\nconst ethAbi = require('ethereumjs-abi');\n\nconst nacl = require('tweetnacl');\n\nnacl.util = require('tweetnacl-util');\nconst TYPED_MESSAGE_SCHEMA = {\n  type: 'object',\n  properties: {\n    types: {\n      type: 'object',\n      additionalProperties: {\n        type: 'array',\n        items: {\n          type: 'object',\n          properties: {\n            name: {\n              type: 'string'\n            },\n            type: {\n              type: 'string'\n            }\n          },\n          required: ['name', 'type']\n        }\n      }\n    },\n    primaryType: {\n      type: 'string'\n    },\n    domain: {\n      type: 'object'\n    },\n    message: {\n      type: 'object'\n    }\n  },\n  required: ['types', 'primaryType', 'domain', 'message']\n};\n/**\n * A collection of utility functions used for signing typed data\n */\n\nconst TypedDataUtils = {\n  /**\n   * Encodes an object by encoding and concatenating each of its members\n   *\n   * @param {string} primaryType - Root type\n   * @param {Object} data - Object to encode\n   * @param {Object} types - Type definitions\n   * @returns {string} - Encoded representation of an object\n   */\n  encodeData(primaryType, data, types, useV4 = true) {\n    const encodedTypes = ['bytes32'];\n    const encodedValues = [this.hashType(primaryType, types)];\n\n    if (useV4) {\n      const encodeField = (name, type, value) => {\n        if (types[type] !== undefined) {\n          return ['bytes32', value === null || value === undefined ? '0x0000000000000000000000000000000000000000000000000000000000000000' : ethUtil.keccak(this.encodeData(type, value, types, useV4))];\n        }\n\n        if (value === undefined) {\n          throw new Error(`missing value for field ${name} of type ${type}`);\n        }\n\n        if (type === 'bytes') {\n          return ['bytes32', ethUtil.keccak(value)];\n        }\n\n        if (type === 'string') {\n          // convert string to buffer - prevents ethUtil from interpreting strings like '0xabcd' as hex\n          if (typeof value === 'string') {\n            value = Buffer.from(value, 'utf8');\n          }\n\n          return ['bytes32', ethUtil.keccak(value)];\n        }\n\n        if (type.lastIndexOf(']') === type.length - 1) {\n          const parsedType = type.slice(0, type.lastIndexOf('['));\n          const typeValuePairs = value.map(item => encodeField(name, parsedType, item));\n          return ['bytes32', ethUtil.keccak(ethAbi.rawEncode(typeValuePairs.map(([_type]) => _type), typeValuePairs.map(([, _value]) => _value)))];\n        }\n\n        return [type, value];\n      };\n\n      for (const field of types[primaryType]) {\n        const [type, value] = encodeField(field.name, field.type, data[field.name]);\n        encodedTypes.push(type);\n        encodedValues.push(value);\n      }\n    } else {\n      for (const field of types[primaryType]) {\n        let value = data[field.name];\n\n        if (value !== undefined) {\n          if (field.type === 'bytes') {\n            encodedTypes.push('bytes32');\n            value = ethUtil.keccak(value);\n            encodedValues.push(value);\n          } else if (field.type === 'string') {\n            encodedTypes.push('bytes32'); // convert string to buffer - prevents ethUtil from interpreting strings like '0xabcd' as hex\n\n            if (typeof value === 'string') {\n              value = Buffer.from(value, 'utf8');\n            }\n\n            value = ethUtil.keccak(value);\n            encodedValues.push(value);\n          } else if (types[field.type] !== undefined) {\n            encodedTypes.push('bytes32');\n            value = ethUtil.keccak(this.encodeData(field.type, value, types, useV4));\n            encodedValues.push(value);\n          } else if (field.type.lastIndexOf(']') === field.type.length - 1) {\n            throw new Error('Arrays currently unimplemented in encodeData');\n          } else {\n            encodedTypes.push(field.type);\n            encodedValues.push(value);\n          }\n        }\n      }\n    }\n\n    return ethAbi.rawEncode(encodedTypes, encodedValues);\n  },\n\n  /**\n   * Encodes the type of an object by encoding a comma delimited list of its members\n   *\n   * @param {string} primaryType - Root type to encode\n   * @param {Object} types - Type definitions\n   * @returns {string} - Encoded representation of the type of an object\n   */\n  encodeType(primaryType, types) {\n    let result = '';\n    let deps = this.findTypeDependencies(primaryType, types).filter(dep => dep !== primaryType);\n    deps = [primaryType].concat(deps.sort());\n\n    for (const type of deps) {\n      const children = types[type];\n\n      if (!children) {\n        throw new Error(`No type definition specified: ${type}`);\n      }\n\n      result += `${type}(${types[type].map(({\n        name,\n        type: _type\n      }) => `${_type} ${name}`).join(',')})`;\n    }\n\n    return result;\n  },\n\n  /**\n   * Finds all types within a type defintion object\n   *\n   * @param {string} primaryType - Root type\n   * @param {Object} types - Type definitions\n   * @param {Array} results - current set of accumulated types\n   * @returns {Array} - Set of all types found in the type definition\n   */\n  findTypeDependencies(primaryType, types, results = []) {\n    const [firstWord] = primaryType.match(/^\\w*/u);\n    primaryType = firstWord;\n\n    if (results.includes(primaryType) || types[primaryType] === undefined) {\n      return results;\n    }\n\n    results.push(primaryType);\n\n    for (const field of types[primaryType]) {\n      for (const dep of this.findTypeDependencies(field.type, types, results)) {\n        !results.includes(dep) && results.push(dep);\n      }\n    }\n\n    return results;\n  },\n\n  /**\n   * Hashes an object\n   *\n   * @param {string} primaryType - Root type\n   * @param {Object} data - Object to hash\n   * @param {Object} types - Type definitions\n   * @returns {string} - Hash of an object\n   */\n  hashStruct(primaryType, data, types, useV4 = true) {\n    return ethUtil.keccak(this.encodeData(primaryType, data, types, useV4));\n  },\n\n  /**\n   * Hashes the type of an object\n   *\n   * @param {string} primaryType - Root type to hash\n   * @param {Object} types - Type definitions\n   * @returns {string} - Hash of an object\n   */\n  hashType(primaryType, types) {\n    return ethUtil.keccak(this.encodeType(primaryType, types));\n  },\n\n  /**\n   * Removes properties from a message object that are not defined per EIP-712\n   *\n   * @param {Object} data - typed message object\n   * @returns {Object} - typed message object with only allowed fields\n   */\n  sanitizeData(data) {\n    const sanitizedData = {};\n\n    for (const key of Object.keys(TYPED_MESSAGE_SCHEMA.properties)) {\n      data[key] && (sanitizedData[key] = data[key]);\n    }\n\n    if (sanitizedData.types) {\n      sanitizedData.types = {\n        EIP712Domain: [],\n        ...sanitizedData.types\n      };\n    }\n\n    return sanitizedData;\n  },\n\n  /**\n   * Signs a typed message as per EIP-712 and returns its keccak hash\n   *\n   * @param {Object} typedData - Types message data to sign\n   * @returns {string} - keccak hash of the resulting signed message\n   */\n  sign(typedData, useV4 = true) {\n    const sanitizedData = this.sanitizeData(typedData);\n    const parts = [Buffer.from('1901', 'hex')];\n    parts.push(this.hashStruct('EIP712Domain', sanitizedData.domain, sanitizedData.types, useV4));\n\n    if (sanitizedData.primaryType !== 'EIP712Domain') {\n      parts.push(this.hashStruct(sanitizedData.primaryType, sanitizedData.message, sanitizedData.types, useV4));\n    }\n\n    return ethUtil.keccak(Buffer.concat(parts));\n  }\n\n};\nmodule.exports = {\n  TYPED_MESSAGE_SCHEMA,\n  TypedDataUtils,\n\n  concatSig(v, r, s) {\n    const rSig = ethUtil.fromSigned(r);\n    const sSig = ethUtil.fromSigned(s);\n    const vSig = ethUtil.bufferToInt(v);\n    const rStr = padWithZeroes(ethUtil.toUnsigned(rSig).toString('hex'), 64);\n    const sStr = padWithZeroes(ethUtil.toUnsigned(sSig).toString('hex'), 64);\n    const vStr = ethUtil.stripHexPrefix(ethUtil.intToHex(vSig));\n    return ethUtil.addHexPrefix(rStr.concat(sStr, vStr)).toString('hex');\n  },\n\n  normalize(input) {\n    if (!input) {\n      return undefined;\n    }\n\n    if (typeof input === 'number') {\n      const buffer = ethUtil.toBuffer(input);\n      input = ethUtil.bufferToHex(buffer);\n    }\n\n    if (typeof input !== 'string') {\n      let msg = 'eth-sig-util.normalize() requires hex string or integer input.';\n      msg += ` received ${typeof input}: ${input}`;\n      throw new Error(msg);\n    }\n\n    return ethUtil.addHexPrefix(input.toLowerCase());\n  },\n\n  personalSign(privateKey, msgParams) {\n    const message = ethUtil.toBuffer(msgParams.data);\n    const msgHash = ethUtil.hashPersonalMessage(message);\n    const sig = ethUtil.ecsign(msgHash, privateKey);\n    const serialized = ethUtil.bufferToHex(this.concatSig(sig.v, sig.r, sig.s));\n    return serialized;\n  },\n\n  recoverPersonalSignature(msgParams) {\n    const publicKey = getPublicKeyFor(msgParams);\n    const sender = ethUtil.publicToAddress(publicKey);\n    const senderHex = ethUtil.bufferToHex(sender);\n    return senderHex;\n  },\n\n  extractPublicKey(msgParams) {\n    const publicKey = getPublicKeyFor(msgParams);\n    return `0x${publicKey.toString('hex')}`;\n  },\n\n  typedSignatureHash(typedData) {\n    const hashBuffer = typedSignatureHash(typedData);\n    return ethUtil.bufferToHex(hashBuffer);\n  },\n\n  signTypedDataLegacy(privateKey, msgParams) {\n    const msgHash = typedSignatureHash(msgParams.data);\n    const sig = ethUtil.ecsign(msgHash, privateKey);\n    return ethUtil.bufferToHex(this.concatSig(sig.v, sig.r, sig.s));\n  },\n\n  recoverTypedSignatureLegacy(msgParams) {\n    const msgHash = typedSignatureHash(msgParams.data);\n    const publicKey = recoverPublicKey(msgHash, msgParams.sig);\n    const sender = ethUtil.publicToAddress(publicKey);\n    return ethUtil.bufferToHex(sender);\n  },\n\n  encrypt(receiverPublicKey, msgParams, version) {\n    switch (version) {\n      case 'x25519-xsalsa20-poly1305':\n        {\n          if (typeof msgParams.data === 'undefined') {\n            throw new Error('Cannot detect secret message, message params should be of the form {data: \"secret message\"} ');\n          } // generate ephemeral keypair\n\n\n          const ephemeralKeyPair = nacl.box.keyPair(); // assemble encryption parameters - from string to UInt8\n\n          let pubKeyUInt8Array;\n\n          try {\n            pubKeyUInt8Array = nacl.util.decodeBase64(receiverPublicKey);\n          } catch (err) {\n            throw new Error('Bad public key');\n          }\n\n          const msgParamsUInt8Array = nacl.util.decodeUTF8(msgParams.data);\n          const nonce = nacl.randomBytes(nacl.box.nonceLength); // encrypt\n\n          const encryptedMessage = nacl.box(msgParamsUInt8Array, nonce, pubKeyUInt8Array, ephemeralKeyPair.secretKey); // handle encrypted data\n\n          const output = {\n            version: 'x25519-xsalsa20-poly1305',\n            nonce: nacl.util.encodeBase64(nonce),\n            ephemPublicKey: nacl.util.encodeBase64(ephemeralKeyPair.publicKey),\n            ciphertext: nacl.util.encodeBase64(encryptedMessage)\n          }; // return encrypted msg data\n\n          return output;\n        }\n\n      default:\n        throw new Error('Encryption type/version not supported');\n    }\n  },\n\n  encryptSafely(receiverPublicKey, msgParams, version) {\n    const DEFAULT_PADDING_LENGTH = 2 ** 11;\n    const NACL_EXTRA_BYTES = 16;\n    const {\n      data\n    } = msgParams;\n\n    if (!data) {\n      throw new Error('Cannot encrypt empty msg.data');\n    }\n\n    if (typeof data === 'object' && data.toJSON) {\n      // remove toJSON attack vector\n      // TODO, check all possible children\n      throw new Error('Cannot encrypt with toJSON property.  Please remove toJSON property');\n    } // add padding\n\n\n    const dataWithPadding = {\n      data,\n      padding: ''\n    }; // calculate padding\n\n    const dataLength = Buffer.byteLength(JSON.stringify(dataWithPadding), 'utf-8');\n    const modVal = dataLength % DEFAULT_PADDING_LENGTH;\n    let padLength = 0; // Only pad if necessary\n\n    if (modVal > 0) {\n      padLength = DEFAULT_PADDING_LENGTH - modVal - NACL_EXTRA_BYTES; // nacl extra bytes\n    }\n\n    dataWithPadding.padding = '0'.repeat(padLength);\n    const paddedMsgParams = {\n      data: JSON.stringify(dataWithPadding)\n    };\n    return this.encrypt(receiverPublicKey, paddedMsgParams, version);\n  },\n\n  decrypt(encryptedData, receiverPrivateKey) {\n    switch (encryptedData.version) {\n      case 'x25519-xsalsa20-poly1305':\n        {\n          // string to buffer to UInt8Array\n          const recieverPrivateKeyUint8Array = nacl_decodeHex(receiverPrivateKey);\n          const recieverEncryptionPrivateKey = nacl.box.keyPair.fromSecretKey(recieverPrivateKeyUint8Array).secretKey; // assemble decryption parameters\n\n          const nonce = nacl.util.decodeBase64(encryptedData.nonce);\n          const ciphertext = nacl.util.decodeBase64(encryptedData.ciphertext);\n          const ephemPublicKey = nacl.util.decodeBase64(encryptedData.ephemPublicKey); // decrypt\n\n          const decryptedMessage = nacl.box.open(ciphertext, nonce, ephemPublicKey, recieverEncryptionPrivateKey); // return decrypted msg data\n\n          let output;\n\n          try {\n            output = nacl.util.encodeUTF8(decryptedMessage);\n          } catch (err) {\n            throw new Error('Decryption failed.');\n          }\n\n          if (output) {\n            return output;\n          }\n\n          throw new Error('Decryption failed.');\n        }\n\n      default:\n        throw new Error('Encryption type/version not supported.');\n    }\n  },\n\n  decryptSafely(encryptedData, receiverPrivateKey) {\n    const dataWithPadding = JSON.parse(this.decrypt(encryptedData, receiverPrivateKey));\n    return dataWithPadding.data;\n  },\n\n  getEncryptionPublicKey(privateKey) {\n    const privateKeyUint8Array = nacl_decodeHex(privateKey);\n    const encryptionPublicKey = nacl.box.keyPair.fromSecretKey(privateKeyUint8Array).publicKey;\n    return nacl.util.encodeBase64(encryptionPublicKey);\n  },\n\n  /**\n   * A generic entry point for all typed data methods to be passed, includes a version parameter.\n   */\n  signTypedMessage(privateKey, msgParams, version = 'V4') {\n    switch (version) {\n      case 'V1':\n        return this.signTypedDataLegacy(privateKey, msgParams);\n\n      case 'V3':\n        return this.signTypedData(privateKey, msgParams);\n\n      case 'V4':\n      default:\n        return this.signTypedData_v4(privateKey, msgParams);\n    }\n  },\n\n  recoverTypedMessage(msgParams, version = 'V4') {\n    switch (version) {\n      case 'V1':\n        return this.recoverTypedSignatureLegacy(msgParams);\n\n      case 'V3':\n        return this.recoverTypedSignature(msgParams);\n\n      case 'V4':\n      default:\n        return this.recoverTypedSignature_v4(msgParams);\n    }\n  },\n\n  signTypedData(privateKey, msgParams) {\n    const message = TypedDataUtils.sign(msgParams.data, false);\n    const sig = ethUtil.ecsign(message, privateKey);\n    return ethUtil.bufferToHex(this.concatSig(sig.v, sig.r, sig.s));\n  },\n\n  signTypedData_v4(privateKey, msgParams) {\n    const message = TypedDataUtils.sign(msgParams.data);\n    const sig = ethUtil.ecsign(message, privateKey);\n    return ethUtil.bufferToHex(this.concatSig(sig.v, sig.r, sig.s));\n  },\n\n  recoverTypedSignature(msgParams) {\n    const message = TypedDataUtils.sign(msgParams.data, false);\n    const publicKey = recoverPublicKey(message, msgParams.sig);\n    const sender = ethUtil.publicToAddress(publicKey);\n    return ethUtil.bufferToHex(sender);\n  },\n\n  recoverTypedSignature_v4(msgParams) {\n    const message = TypedDataUtils.sign(msgParams.data);\n    const publicKey = recoverPublicKey(message, msgParams.sig);\n    const sender = ethUtil.publicToAddress(publicKey);\n    return ethUtil.bufferToHex(sender);\n  }\n\n};\n/**\n * @param typedData - Array of data along with types, as per EIP712.\n * @returns Buffer\n */\n\nfunction typedSignatureHash(typedData) {\n  const error = new Error('Expect argument to be non-empty array');\n\n  if (typeof typedData !== 'object' || !typedData.length) {\n    throw error;\n  }\n\n  const data = typedData.map(function (e) {\n    return e.type === 'bytes' ? ethUtil.toBuffer(e.value) : e.value;\n  });\n  const types = typedData.map(function (e) {\n    return e.type;\n  });\n  const schema = typedData.map(function (e) {\n    if (!e.name) {\n      throw error;\n    }\n\n    return `${e.type} ${e.name}`;\n  });\n  return ethAbi.soliditySHA3(['bytes32', 'bytes32'], [ethAbi.soliditySHA3(new Array(typedData.length).fill('string'), schema), ethAbi.soliditySHA3(types, data)]);\n}\n\nfunction recoverPublicKey(hash, sig) {\n  const signature = ethUtil.toBuffer(sig);\n  const sigParams = ethUtil.fromRpcSig(signature);\n  return ethUtil.ecrecover(hash, sigParams.v, sigParams.r, sigParams.s);\n}\n\nfunction getPublicKeyFor(msgParams) {\n  const message = ethUtil.toBuffer(msgParams.data);\n  const msgHash = ethUtil.hashPersonalMessage(message);\n  return recoverPublicKey(msgHash, msgParams.sig);\n}\n\nfunction padWithZeroes(number, length) {\n  let myString = `${number}`;\n\n  while (myString.length < length) {\n    myString = `0${myString}`;\n  }\n\n  return myString;\n} // converts hex strings to the Uint8Array format used by nacl\n\n\nfunction nacl_decodeHex(msgHex) {\n  const msgBase64 = Buffer.from(msgHex, 'hex').toString('base64');\n  return nacl.util.decodeBase64(msgBase64);\n}","map":{"version":3,"sources":["/Users/chrisbuonocore/personal/hackathons/hackfs21/node_modules/burner-provider/node_modules/eth-sig-util/index.js"],"names":["Buffer","require","ethUtil","ethAbi","nacl","util","TYPED_MESSAGE_SCHEMA","type","properties","types","additionalProperties","items","name","required","primaryType","domain","message","TypedDataUtils","encodeData","data","useV4","encodedTypes","encodedValues","hashType","encodeField","value","undefined","keccak","Error","from","lastIndexOf","length","parsedType","slice","typeValuePairs","map","item","rawEncode","_type","_value","field","push","encodeType","result","deps","findTypeDependencies","filter","dep","concat","sort","children","join","results","firstWord","match","includes","hashStruct","sanitizeData","sanitizedData","key","Object","keys","EIP712Domain","sign","typedData","parts","module","exports","concatSig","v","r","s","rSig","fromSigned","sSig","vSig","bufferToInt","rStr","padWithZeroes","toUnsigned","toString","sStr","vStr","stripHexPrefix","intToHex","addHexPrefix","normalize","input","buffer","toBuffer","bufferToHex","msg","toLowerCase","personalSign","privateKey","msgParams","msgHash","hashPersonalMessage","sig","ecsign","serialized","recoverPersonalSignature","publicKey","getPublicKeyFor","sender","publicToAddress","senderHex","extractPublicKey","typedSignatureHash","hashBuffer","signTypedDataLegacy","recoverTypedSignatureLegacy","recoverPublicKey","encrypt","receiverPublicKey","version","ephemeralKeyPair","box","keyPair","pubKeyUInt8Array","decodeBase64","err","msgParamsUInt8Array","decodeUTF8","nonce","randomBytes","nonceLength","encryptedMessage","secretKey","output","encodeBase64","ephemPublicKey","ciphertext","encryptSafely","DEFAULT_PADDING_LENGTH","NACL_EXTRA_BYTES","toJSON","dataWithPadding","padding","dataLength","byteLength","JSON","stringify","modVal","padLength","repeat","paddedMsgParams","decrypt","encryptedData","receiverPrivateKey","recieverPrivateKeyUint8Array","nacl_decodeHex","recieverEncryptionPrivateKey","fromSecretKey","decryptedMessage","open","encodeUTF8","decryptSafely","parse","getEncryptionPublicKey","privateKeyUint8Array","encryptionPublicKey","signTypedMessage","signTypedData","signTypedData_v4","recoverTypedMessage","recoverTypedSignature","recoverTypedSignature_v4","error","e","schema","soliditySHA3","Array","fill","hash","signature","sigParams","fromRpcSig","ecrecover","number","myString","msgHex","msgBase64"],"mappings":"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","sourcesContent":["const { Buffer } = require('buffer')\nconst ethUtil = require('ethereumjs-util')\nconst ethAbi = require('ethereumjs-abi')\nconst nacl = require('tweetnacl')\nnacl.util = require('tweetnacl-util')\n\nconst TYPED_MESSAGE_SCHEMA = {\n  type: 'object',\n  properties: {\n    types: {\n      type: 'object',\n      additionalProperties: {\n        type: 'array',\n        items: {\n          type: 'object',\n          properties: {\n            name: { type: 'string' },\n            type: { type: 'string' },\n          },\n          required: ['name', 'type'],\n        },\n      },\n    },\n    primaryType: { type: 'string' },\n    domain: { type: 'object' },\n    message: { type: 'object' },\n  },\n  required: ['types', 'primaryType', 'domain', 'message'],\n}\n\n/**\n * A collection of utility functions used for signing typed data\n */\nconst TypedDataUtils = {\n\n  /**\n   * Encodes an object by encoding and concatenating each of its members\n   *\n   * @param {string} primaryType - Root type\n   * @param {Object} data - Object to encode\n   * @param {Object} types - Type definitions\n   * @returns {string} - Encoded representation of an object\n   */\n  encodeData (primaryType, data, types, useV4 = true) {\n    const encodedTypes = ['bytes32']\n    const encodedValues = [this.hashType(primaryType, types)]\n\n    if (useV4) {\n      const encodeField = (name, type, value) => {\n        if (types[type] !== undefined) {\n          return ['bytes32', value === null || value === undefined ?\n            '0x0000000000000000000000000000000000000000000000000000000000000000' :\n            ethUtil.keccak(this.encodeData(type, value, types, useV4))]\n        }\n\n        if (value === undefined) {\n          throw new Error(`missing value for field ${name} of type ${type}`)\n        }\n\n        if (type === 'bytes') {\n          return ['bytes32', ethUtil.keccak(value)]\n        }\n\n        if (type === 'string') {\n          // convert string to buffer - prevents ethUtil from interpreting strings like '0xabcd' as hex\n          if (typeof value === 'string') {\n            value = Buffer.from(value, 'utf8')\n          }\n          return ['bytes32', ethUtil.keccak(value)]\n        }\n\n        if (type.lastIndexOf(']') === type.length - 1) {\n          const parsedType = type.slice(0, type.lastIndexOf('['))\n          const typeValuePairs = value.map((item) => encodeField(name, parsedType, item))\n          return ['bytes32', ethUtil.keccak(ethAbi.rawEncode(\n            typeValuePairs.map(([_type]) => _type),\n            typeValuePairs.map(([, _value]) => _value),\n          ))]\n        }\n\n        return [type, value]\n      }\n\n      for (const field of types[primaryType]) {\n        const [type, value] = encodeField(field.name, field.type, data[field.name])\n        encodedTypes.push(type)\n        encodedValues.push(value)\n      }\n    } else {\n      for (const field of types[primaryType]) {\n        let value = data[field.name]\n        if (value !== undefined) {\n          if (field.type === 'bytes') {\n            encodedTypes.push('bytes32')\n            value = ethUtil.keccak(value)\n            encodedValues.push(value)\n          } else if (field.type === 'string') {\n            encodedTypes.push('bytes32')\n            // convert string to buffer - prevents ethUtil from interpreting strings like '0xabcd' as hex\n            if (typeof value === 'string') {\n              value = Buffer.from(value, 'utf8')\n            }\n            value = ethUtil.keccak(value)\n            encodedValues.push(value)\n          } else if (types[field.type] !== undefined) {\n            encodedTypes.push('bytes32')\n            value = ethUtil.keccak(this.encodeData(field.type, value, types, useV4))\n            encodedValues.push(value)\n          } else if (field.type.lastIndexOf(']') === field.type.length - 1) {\n            throw new Error('Arrays currently unimplemented in encodeData')\n          } else {\n            encodedTypes.push(field.type)\n            encodedValues.push(value)\n          }\n        }\n      }\n    }\n\n    return ethAbi.rawEncode(encodedTypes, encodedValues)\n  },\n\n  /**\n   * Encodes the type of an object by encoding a comma delimited list of its members\n   *\n   * @param {string} primaryType - Root type to encode\n   * @param {Object} types - Type definitions\n   * @returns {string} - Encoded representation of the type of an object\n   */\n  encodeType (primaryType, types) {\n    let result = ''\n    let deps = this.findTypeDependencies(primaryType, types).filter((dep) => dep !== primaryType)\n    deps = [primaryType].concat(deps.sort())\n    for (const type of deps) {\n      const children = types[type]\n      if (!children) {\n        throw new Error(`No type definition specified: ${type}`)\n      }\n      result += `${type}(${types[type].map(({ name, type: _type }) => `${_type} ${name}`).join(',')})`\n    }\n    return result\n  },\n\n  /**\n   * Finds all types within a type defintion object\n   *\n   * @param {string} primaryType - Root type\n   * @param {Object} types - Type definitions\n   * @param {Array} results - current set of accumulated types\n   * @returns {Array} - Set of all types found in the type definition\n   */\n  findTypeDependencies (primaryType, types, results = []) {\n    const [firstWord] = primaryType.match(/^\\w*/u)\n    primaryType = firstWord\n    if (results.includes(primaryType) || types[primaryType] === undefined) {\n      return results\n    }\n    results.push(primaryType)\n    for (const field of types[primaryType]) {\n      for (const dep of this.findTypeDependencies(field.type, types, results)) {\n        !results.includes(dep) && results.push(dep)\n      }\n    }\n    return results\n  },\n\n  /**\n   * Hashes an object\n   *\n   * @param {string} primaryType - Root type\n   * @param {Object} data - Object to hash\n   * @param {Object} types - Type definitions\n   * @returns {string} - Hash of an object\n   */\n  hashStruct (primaryType, data, types, useV4 = true) {\n    return ethUtil.keccak(this.encodeData(primaryType, data, types, useV4))\n  },\n\n  /**\n   * Hashes the type of an object\n   *\n   * @param {string} primaryType - Root type to hash\n   * @param {Object} types - Type definitions\n   * @returns {string} - Hash of an object\n   */\n  hashType (primaryType, types) {\n    return ethUtil.keccak(this.encodeType(primaryType, types))\n  },\n\n  /**\n   * Removes properties from a message object that are not defined per EIP-712\n   *\n   * @param {Object} data - typed message object\n   * @returns {Object} - typed message object with only allowed fields\n   */\n  sanitizeData (data) {\n    const sanitizedData = {}\n    for (const key of Object.keys(TYPED_MESSAGE_SCHEMA.properties)) {\n      data[key] && (sanitizedData[key] = data[key])\n    }\n    if (sanitizedData.types) {\n      sanitizedData.types = { EIP712Domain: [], ...sanitizedData.types }\n    }\n    return sanitizedData\n  },\n\n  /**\n   * Signs a typed message as per EIP-712 and returns its keccak hash\n   *\n   * @param {Object} typedData - Types message data to sign\n   * @returns {string} - keccak hash of the resulting signed message\n   */\n  sign (typedData, useV4 = true) {\n    const sanitizedData = this.sanitizeData(typedData)\n    const parts = [Buffer.from('1901', 'hex')]\n    parts.push(this.hashStruct('EIP712Domain', sanitizedData.domain, sanitizedData.types, useV4))\n    if (sanitizedData.primaryType !== 'EIP712Domain') {\n      parts.push(this.hashStruct(sanitizedData.primaryType, sanitizedData.message, sanitizedData.types, useV4))\n    }\n    return ethUtil.keccak(Buffer.concat(parts))\n  },\n}\n\nmodule.exports = {\n  TYPED_MESSAGE_SCHEMA,\n  TypedDataUtils,\n\n  concatSig (v, r, s) {\n    const rSig = ethUtil.fromSigned(r)\n    const sSig = ethUtil.fromSigned(s)\n    const vSig = ethUtil.bufferToInt(v)\n    const rStr = padWithZeroes(ethUtil.toUnsigned(rSig).toString('hex'), 64)\n    const sStr = padWithZeroes(ethUtil.toUnsigned(sSig).toString('hex'), 64)\n    const vStr = ethUtil.stripHexPrefix(ethUtil.intToHex(vSig))\n    return ethUtil.addHexPrefix(rStr.concat(sStr, vStr)).toString('hex')\n  },\n\n  normalize (input) {\n    if (!input) {\n      return undefined\n    }\n\n    if (typeof input === 'number') {\n      const buffer = ethUtil.toBuffer(input)\n      input = ethUtil.bufferToHex(buffer)\n    }\n\n    if (typeof input !== 'string') {\n      let msg = 'eth-sig-util.normalize() requires hex string or integer input.'\n      msg += ` received ${typeof input}: ${input}`\n      throw new Error(msg)\n    }\n\n    return ethUtil.addHexPrefix(input.toLowerCase())\n  },\n\n  personalSign (privateKey, msgParams) {\n    const message = ethUtil.toBuffer(msgParams.data)\n    const msgHash = ethUtil.hashPersonalMessage(message)\n    const sig = ethUtil.ecsign(msgHash, privateKey)\n    const serialized = ethUtil.bufferToHex(this.concatSig(sig.v, sig.r, sig.s))\n    return serialized\n  },\n\n  recoverPersonalSignature (msgParams) {\n    const publicKey = getPublicKeyFor(msgParams)\n    const sender = ethUtil.publicToAddress(publicKey)\n    const senderHex = ethUtil.bufferToHex(sender)\n    return senderHex\n  },\n\n  extractPublicKey (msgParams) {\n    const publicKey = getPublicKeyFor(msgParams)\n    return `0x${publicKey.toString('hex')}`\n  },\n\n  typedSignatureHash (typedData) {\n    const hashBuffer = typedSignatureHash(typedData)\n    return ethUtil.bufferToHex(hashBuffer)\n  },\n\n  signTypedDataLegacy (privateKey, msgParams) {\n    const msgHash = typedSignatureHash(msgParams.data)\n    const sig = ethUtil.ecsign(msgHash, privateKey)\n    return ethUtil.bufferToHex(this.concatSig(sig.v, sig.r, sig.s))\n  },\n\n  recoverTypedSignatureLegacy (msgParams) {\n    const msgHash = typedSignatureHash(msgParams.data)\n    const publicKey = recoverPublicKey(msgHash, msgParams.sig)\n    const sender = ethUtil.publicToAddress(publicKey)\n    return ethUtil.bufferToHex(sender)\n  },\n\n  encrypt (receiverPublicKey, msgParams, version) {\n\n    switch (version) {\n      case 'x25519-xsalsa20-poly1305': {\n        if (typeof msgParams.data === 'undefined') {\n          throw new Error('Cannot detect secret message, message params should be of the form {data: \"secret message\"} ')\n        }\n        // generate ephemeral keypair\n        const ephemeralKeyPair = nacl.box.keyPair()\n\n        // assemble encryption parameters - from string to UInt8\n        let pubKeyUInt8Array\n        try {\n          pubKeyUInt8Array = nacl.util.decodeBase64(receiverPublicKey)\n        } catch (err) {\n          throw new Error('Bad public key')\n        }\n\n        const msgParamsUInt8Array = nacl.util.decodeUTF8(msgParams.data)\n        const nonce = nacl.randomBytes(nacl.box.nonceLength)\n\n        // encrypt\n        const encryptedMessage = nacl.box(msgParamsUInt8Array, nonce, pubKeyUInt8Array, ephemeralKeyPair.secretKey)\n\n        // handle encrypted data\n        const output = {\n          version: 'x25519-xsalsa20-poly1305',\n          nonce: nacl.util.encodeBase64(nonce),\n          ephemPublicKey: nacl.util.encodeBase64(ephemeralKeyPair.publicKey),\n          ciphertext: nacl.util.encodeBase64(encryptedMessage),\n        }\n        // return encrypted msg data\n        return output\n      }\n      default:\n        throw new Error('Encryption type/version not supported')\n\n    }\n  },\n\n  encryptSafely (receiverPublicKey, msgParams, version) {\n\n    const DEFAULT_PADDING_LENGTH = (2 ** 11)\n    const NACL_EXTRA_BYTES = 16\n\n    const { data } = msgParams\n    if (!data) {\n      throw new Error('Cannot encrypt empty msg.data')\n    }\n\n    if (typeof data === 'object' && data.toJSON) {\n      // remove toJSON attack vector\n      // TODO, check all possible children\n      throw new Error('Cannot encrypt with toJSON property.  Please remove toJSON property')\n    }\n\n    // add padding\n    const dataWithPadding = {\n      data,\n      padding: '',\n    }\n\n    // calculate padding\n    const dataLength = Buffer.byteLength(JSON.stringify(dataWithPadding), 'utf-8')\n    const modVal = (dataLength % DEFAULT_PADDING_LENGTH)\n    let padLength = 0\n    // Only pad if necessary\n    if (modVal > 0) {\n      padLength = (DEFAULT_PADDING_LENGTH - modVal) - NACL_EXTRA_BYTES // nacl extra bytes\n    }\n    dataWithPadding.padding = '0'.repeat(padLength)\n\n    const paddedMsgParams = { data: JSON.stringify(dataWithPadding) }\n    return this.encrypt(receiverPublicKey, paddedMsgParams, version)\n  },\n\n  decrypt (encryptedData, receiverPrivateKey) {\n\n    switch (encryptedData.version) {\n      case 'x25519-xsalsa20-poly1305': {\n        // string to buffer to UInt8Array\n        const recieverPrivateKeyUint8Array = nacl_decodeHex(receiverPrivateKey)\n        const recieverEncryptionPrivateKey = nacl.box.keyPair.fromSecretKey(recieverPrivateKeyUint8Array).secretKey\n\n        // assemble decryption parameters\n        const nonce = nacl.util.decodeBase64(encryptedData.nonce)\n        const ciphertext = nacl.util.decodeBase64(encryptedData.ciphertext)\n        const ephemPublicKey = nacl.util.decodeBase64(encryptedData.ephemPublicKey)\n\n        // decrypt\n        const decryptedMessage = nacl.box.open(ciphertext, nonce, ephemPublicKey, recieverEncryptionPrivateKey)\n\n        // return decrypted msg data\n        let output\n        try {\n          output = nacl.util.encodeUTF8(decryptedMessage)\n        } catch (err) {\n          throw new Error('Decryption failed.')\n        }\n\n        if (output) {\n          return output\n        }\n        throw new Error('Decryption failed.')\n      }\n\n      default:\n        throw new Error('Encryption type/version not supported.')\n    }\n  },\n\n  decryptSafely (encryptedData, receiverPrivateKey) {\n    const dataWithPadding = JSON.parse(this.decrypt(encryptedData, receiverPrivateKey))\n    return dataWithPadding.data\n  },\n\n\n  getEncryptionPublicKey (privateKey) {\n    const privateKeyUint8Array = nacl_decodeHex(privateKey)\n    const encryptionPublicKey = nacl.box.keyPair.fromSecretKey(privateKeyUint8Array).publicKey\n    return nacl.util.encodeBase64(encryptionPublicKey)\n  },\n\n\n  /**\n   * A generic entry point for all typed data methods to be passed, includes a version parameter.\n   */\n  signTypedMessage (privateKey, msgParams, version = 'V4') {\n    switch (version) {\n      case 'V1':\n        return this.signTypedDataLegacy(privateKey, msgParams)\n      case 'V3':\n        return this.signTypedData(privateKey, msgParams)\n      case 'V4':\n      default:\n        return this.signTypedData_v4(privateKey, msgParams)\n    }\n  },\n\n  recoverTypedMessage (msgParams, version = 'V4') {\n    switch (version) {\n      case 'V1':\n        return this.recoverTypedSignatureLegacy(msgParams)\n      case 'V3':\n        return this.recoverTypedSignature(msgParams)\n      case 'V4':\n      default:\n        return this.recoverTypedSignature_v4(msgParams)\n    }\n  },\n\n  signTypedData (privateKey, msgParams) {\n    const message = TypedDataUtils.sign(msgParams.data, false)\n    const sig = ethUtil.ecsign(message, privateKey)\n    return ethUtil.bufferToHex(this.concatSig(sig.v, sig.r, sig.s))\n  },\n\n  signTypedData_v4 (privateKey, msgParams) {\n    const message = TypedDataUtils.sign(msgParams.data)\n    const sig = ethUtil.ecsign(message, privateKey)\n    return ethUtil.bufferToHex(this.concatSig(sig.v, sig.r, sig.s))\n  },\n\n  recoverTypedSignature (msgParams) {\n    const message = TypedDataUtils.sign(msgParams.data, false)\n    const publicKey = recoverPublicKey(message, msgParams.sig)\n    const sender = ethUtil.publicToAddress(publicKey)\n    return ethUtil.bufferToHex(sender)\n  },\n\n  recoverTypedSignature_v4 (msgParams) {\n    const message = TypedDataUtils.sign(msgParams.data)\n    const publicKey = recoverPublicKey(message, msgParams.sig)\n    const sender = ethUtil.publicToAddress(publicKey)\n    return ethUtil.bufferToHex(sender)\n  },\n\n}\n\n/**\n * @param typedData - Array of data along with types, as per EIP712.\n * @returns Buffer\n */\nfunction typedSignatureHash (typedData) {\n  const error = new Error('Expect argument to be non-empty array')\n  if (typeof typedData !== 'object' || !typedData.length) {\n    throw error\n  }\n\n  const data = typedData.map(function (e) {\n    return e.type === 'bytes' ? ethUtil.toBuffer(e.value) : e.value\n  })\n  const types = typedData.map(function (e) {\n    return e.type\n  })\n  const schema = typedData.map(function (e) {\n    if (!e.name) {\n      throw error\n    }\n    return `${e.type} ${e.name}`\n  })\n\n  return ethAbi.soliditySHA3(\n    ['bytes32', 'bytes32'],\n    [\n      ethAbi.soliditySHA3(new Array(typedData.length).fill('string'), schema),\n      ethAbi.soliditySHA3(types, data),\n    ],\n  )\n}\n\nfunction recoverPublicKey (hash, sig) {\n  const signature = ethUtil.toBuffer(sig)\n  const sigParams = ethUtil.fromRpcSig(signature)\n  return ethUtil.ecrecover(hash, sigParams.v, sigParams.r, sigParams.s)\n}\n\nfunction getPublicKeyFor (msgParams) {\n  const message = ethUtil.toBuffer(msgParams.data)\n  const msgHash = ethUtil.hashPersonalMessage(message)\n  return recoverPublicKey(msgHash, msgParams.sig)\n}\n\n\nfunction padWithZeroes (number, length) {\n  let myString = `${number}`\n  while (myString.length < length) {\n    myString = `0${myString}`\n  }\n  return myString\n}\n\n// converts hex strings to the Uint8Array format used by nacl\nfunction nacl_decodeHex (msgHex) {\n  const msgBase64 = (Buffer.from(msgHex, 'hex')).toString('base64')\n  return nacl.util.decodeBase64(msgBase64)\n}\n\n\n"]},"metadata":{},"sourceType":"script"}