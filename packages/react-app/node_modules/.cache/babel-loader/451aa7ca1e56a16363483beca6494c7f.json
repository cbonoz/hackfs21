{"ast":null,"code":"//      Copyright (c) 2012 Mathieu Turcotte\n//      Licensed under the MIT license.\nvar util = require('util');\n\nvar precond = require('precond');\n\nvar BackoffStrategy = require('./strategy'); // Exponential backoff strategy.\n\n\nfunction ExponentialBackoffStrategy(options) {\n  BackoffStrategy.call(this, options);\n  this.backoffDelay_ = 0;\n  this.nextBackoffDelay_ = this.getInitialDelay();\n  this.factor_ = ExponentialBackoffStrategy.DEFAULT_FACTOR;\n\n  if (options && options.factor !== undefined) {\n    precond.checkArgument(options.factor > 1, 'Exponential factor should be greater than 1 but got %s.', options.factor);\n    this.factor_ = options.factor;\n  }\n}\n\nutil.inherits(ExponentialBackoffStrategy, BackoffStrategy); // Default multiplication factor used to compute the next backoff delay from\n// the current one. The value can be overridden by passing a custom factor as\n// part of the options.\n\nExponentialBackoffStrategy.DEFAULT_FACTOR = 2;\n\nExponentialBackoffStrategy.prototype.next_ = function () {\n  this.backoffDelay_ = Math.min(this.nextBackoffDelay_, this.getMaxDelay());\n  this.nextBackoffDelay_ = this.backoffDelay_ * this.factor_;\n  return this.backoffDelay_;\n};\n\nExponentialBackoffStrategy.prototype.reset_ = function () {\n  this.backoffDelay_ = 0;\n  this.nextBackoffDelay_ = this.getInitialDelay();\n};\n\nmodule.exports = ExponentialBackoffStrategy;","map":{"version":3,"sources":["/Users/chrisbuonocore/personal/hackathons/hackfs21/node_modules/backoff/lib/strategy/exponential.js"],"names":["util","require","precond","BackoffStrategy","ExponentialBackoffStrategy","options","call","backoffDelay_","nextBackoffDelay_","getInitialDelay","factor_","DEFAULT_FACTOR","factor","undefined","checkArgument","inherits","prototype","next_","Math","min","getMaxDelay","reset_","module","exports"],"mappings":"AAAA;AACA;AAEA,IAAIA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAAlB;;AACA,IAAIC,OAAO,GAAGD,OAAO,CAAC,SAAD,CAArB;;AAEA,IAAIE,eAAe,GAAGF,OAAO,CAAC,YAAD,CAA7B,C,CAEA;;;AACA,SAASG,0BAAT,CAAoCC,OAApC,EAA6C;AACzCF,EAAAA,eAAe,CAACG,IAAhB,CAAqB,IAArB,EAA2BD,OAA3B;AACA,OAAKE,aAAL,GAAqB,CAArB;AACA,OAAKC,iBAAL,GAAyB,KAAKC,eAAL,EAAzB;AACA,OAAKC,OAAL,GAAeN,0BAA0B,CAACO,cAA1C;;AAEA,MAAIN,OAAO,IAAIA,OAAO,CAACO,MAAR,KAAmBC,SAAlC,EAA6C;AACzCX,IAAAA,OAAO,CAACY,aAAR,CAAsBT,OAAO,CAACO,MAAR,GAAiB,CAAvC,EACI,yDADJ,EAEIP,OAAO,CAACO,MAFZ;AAGA,SAAKF,OAAL,GAAeL,OAAO,CAACO,MAAvB;AACH;AACJ;;AACDZ,IAAI,CAACe,QAAL,CAAcX,0BAAd,EAA0CD,eAA1C,E,CAEA;AACA;AACA;;AACAC,0BAA0B,CAACO,cAA3B,GAA4C,CAA5C;;AAEAP,0BAA0B,CAACY,SAA3B,CAAqCC,KAArC,GAA6C,YAAW;AACpD,OAAKV,aAAL,GAAqBW,IAAI,CAACC,GAAL,CAAS,KAAKX,iBAAd,EAAiC,KAAKY,WAAL,EAAjC,CAArB;AACA,OAAKZ,iBAAL,GAAyB,KAAKD,aAAL,GAAqB,KAAKG,OAAnD;AACA,SAAO,KAAKH,aAAZ;AACH,CAJD;;AAMAH,0BAA0B,CAACY,SAA3B,CAAqCK,MAArC,GAA8C,YAAW;AACrD,OAAKd,aAAL,GAAqB,CAArB;AACA,OAAKC,iBAAL,GAAyB,KAAKC,eAAL,EAAzB;AACH,CAHD;;AAKAa,MAAM,CAACC,OAAP,GAAiBnB,0BAAjB","sourcesContent":["//      Copyright (c) 2012 Mathieu Turcotte\n//      Licensed under the MIT license.\n\nvar util = require('util');\nvar precond = require('precond');\n\nvar BackoffStrategy = require('./strategy');\n\n// Exponential backoff strategy.\nfunction ExponentialBackoffStrategy(options) {\n    BackoffStrategy.call(this, options);\n    this.backoffDelay_ = 0;\n    this.nextBackoffDelay_ = this.getInitialDelay();\n    this.factor_ = ExponentialBackoffStrategy.DEFAULT_FACTOR;\n\n    if (options && options.factor !== undefined) {\n        precond.checkArgument(options.factor > 1,\n            'Exponential factor should be greater than 1 but got %s.',\n            options.factor);\n        this.factor_ = options.factor;\n    }\n}\nutil.inherits(ExponentialBackoffStrategy, BackoffStrategy);\n\n// Default multiplication factor used to compute the next backoff delay from\n// the current one. The value can be overridden by passing a custom factor as\n// part of the options.\nExponentialBackoffStrategy.DEFAULT_FACTOR = 2;\n\nExponentialBackoffStrategy.prototype.next_ = function() {\n    this.backoffDelay_ = Math.min(this.nextBackoffDelay_, this.getMaxDelay());\n    this.nextBackoffDelay_ = this.backoffDelay_ * this.factor_;\n    return this.backoffDelay_;\n};\n\nExponentialBackoffStrategy.prototype.reset_ = function() {\n    this.backoffDelay_ = 0;\n    this.nextBackoffDelay_ = this.getInitialDelay();\n};\n\nmodule.exports = ExponentialBackoffStrategy;\n"]},"metadata":{},"sourceType":"script"}