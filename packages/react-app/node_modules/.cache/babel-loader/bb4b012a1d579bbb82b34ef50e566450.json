{"ast":null,"code":"// GFM table, non-standard\n'use strict';\n\nvar isSpace = require('../common/utils').isSpace;\n\nfunction getLine(state, line) {\n  var pos = state.bMarks[line] + state.blkIndent,\n      max = state.eMarks[line];\n  return state.src.substr(pos, max - pos);\n}\n\nfunction escapedSplit(str) {\n  var result = [],\n      pos = 0,\n      max = str.length,\n      ch,\n      escapes = 0,\n      lastPos = 0,\n      backTicked = false,\n      lastBackTick = 0;\n  ch = str.charCodeAt(pos);\n\n  while (pos < max) {\n    if (ch === 0x60\n    /* ` */\n    ) {\n      if (backTicked) {\n        // make \\` close code sequence, but not open it;\n        // the reason is: `\\` is correct code block\n        backTicked = false;\n        lastBackTick = pos;\n      } else if (escapes % 2 === 0) {\n        backTicked = true;\n        lastBackTick = pos;\n      }\n    } else if (ch === 0x7c\n    /* | */\n    && escapes % 2 === 0 && !backTicked) {\n      result.push(str.substring(lastPos, pos));\n      lastPos = pos + 1;\n    }\n\n    if (ch === 0x5c\n    /* \\ */\n    ) {\n      escapes++;\n    } else {\n      escapes = 0;\n    }\n\n    pos++; // If there was an un-closed backtick, go back to just after\n    // the last backtick, but as if it was a normal character\n\n    if (pos === max && backTicked) {\n      backTicked = false;\n      pos = lastBackTick + 1;\n    }\n\n    ch = str.charCodeAt(pos);\n  }\n\n  result.push(str.substring(lastPos));\n  return result;\n}\n\nmodule.exports = function table(state, startLine, endLine, silent) {\n  var ch, lineText, pos, i, nextLine, columns, columnCount, token, aligns, t, tableLines, tbodyLines; // should have at least two lines\n\n  if (startLine + 2 > endLine) {\n    return false;\n  }\n\n  nextLine = startLine + 1;\n\n  if (state.sCount[nextLine] < state.blkIndent) {\n    return false;\n  } // if it's indented more than 3 spaces, it should be a code block\n\n\n  if (state.sCount[nextLine] - state.blkIndent >= 4) {\n    return false;\n  } // first character of the second line should be '|', '-', ':',\n  // and no other characters are allowed but spaces;\n  // basically, this is the equivalent of /^[-:|][-:|\\s]*$/ regexp\n\n\n  pos = state.bMarks[nextLine] + state.tShift[nextLine];\n\n  if (pos >= state.eMarks[nextLine]) {\n    return false;\n  }\n\n  ch = state.src.charCodeAt(pos++);\n\n  if (ch !== 0x7C\n  /* | */\n  && ch !== 0x2D\n  /* - */\n  && ch !== 0x3A\n  /* : */\n  ) {\n    return false;\n  }\n\n  while (pos < state.eMarks[nextLine]) {\n    ch = state.src.charCodeAt(pos);\n\n    if (ch !== 0x7C\n    /* | */\n    && ch !== 0x2D\n    /* - */\n    && ch !== 0x3A\n    /* : */\n    && !isSpace(ch)) {\n      return false;\n    }\n\n    pos++;\n  }\n\n  lineText = getLine(state, startLine + 1);\n  columns = lineText.split('|');\n  aligns = [];\n\n  for (i = 0; i < columns.length; i++) {\n    t = columns[i].trim();\n\n    if (!t) {\n      // allow empty columns before and after table, but not in between columns;\n      // e.g. allow ` |---| `, disallow ` ---||--- `\n      if (i === 0 || i === columns.length - 1) {\n        continue;\n      } else {\n        return false;\n      }\n    }\n\n    if (!/^:?-+:?$/.test(t)) {\n      return false;\n    }\n\n    if (t.charCodeAt(t.length - 1) === 0x3A\n    /* : */\n    ) {\n      aligns.push(t.charCodeAt(0) === 0x3A\n      /* : */\n      ? 'center' : 'right');\n    } else if (t.charCodeAt(0) === 0x3A\n    /* : */\n    ) {\n      aligns.push('left');\n    } else {\n      aligns.push('');\n    }\n  }\n\n  lineText = getLine(state, startLine).trim();\n\n  if (lineText.indexOf('|') === -1) {\n    return false;\n  }\n\n  if (state.sCount[startLine] - state.blkIndent >= 4) {\n    return false;\n  }\n\n  columns = escapedSplit(lineText.replace(/^\\||\\|$/g, '')); // header row will define an amount of columns in the entire table,\n  // and align row shouldn't be smaller than that (the rest of the rows can)\n\n  columnCount = columns.length;\n\n  if (columnCount > aligns.length) {\n    return false;\n  }\n\n  if (silent) {\n    return true;\n  }\n\n  token = state.push('table_open', 'table', 1);\n  token.map = tableLines = [startLine, 0];\n  token = state.push('thead_open', 'thead', 1);\n  token.map = [startLine, startLine + 1];\n  token = state.push('tr_open', 'tr', 1);\n  token.map = [startLine, startLine + 1];\n\n  for (i = 0; i < columns.length; i++) {\n    token = state.push('th_open', 'th', 1);\n    token.map = [startLine, startLine + 1];\n\n    if (aligns[i]) {\n      token.attrs = [['style', 'text-align:' + aligns[i]]];\n    }\n\n    token = state.push('inline', '', 0);\n    token.content = columns[i].trim();\n    token.map = [startLine, startLine + 1];\n    token.children = [];\n    token = state.push('th_close', 'th', -1);\n  }\n\n  token = state.push('tr_close', 'tr', -1);\n  token = state.push('thead_close', 'thead', -1);\n  token = state.push('tbody_open', 'tbody', 1);\n  token.map = tbodyLines = [startLine + 2, 0];\n\n  for (nextLine = startLine + 2; nextLine < endLine; nextLine++) {\n    if (state.sCount[nextLine] < state.blkIndent) {\n      break;\n    }\n\n    lineText = getLine(state, nextLine).trim();\n\n    if (lineText.indexOf('|') === -1) {\n      break;\n    }\n\n    if (state.sCount[nextLine] - state.blkIndent >= 4) {\n      break;\n    }\n\n    columns = escapedSplit(lineText.replace(/^\\||\\|$/g, ''));\n    token = state.push('tr_open', 'tr', 1);\n\n    for (i = 0; i < columnCount; i++) {\n      token = state.push('td_open', 'td', 1);\n\n      if (aligns[i]) {\n        token.attrs = [['style', 'text-align:' + aligns[i]]];\n      }\n\n      token = state.push('inline', '', 0);\n      token.content = columns[i] ? columns[i].trim() : '';\n      token.children = [];\n      token = state.push('td_close', 'td', -1);\n    }\n\n    token = state.push('tr_close', 'tr', -1);\n  }\n\n  token = state.push('tbody_close', 'tbody', -1);\n  token = state.push('table_close', 'table', -1);\n  tableLines[1] = tbodyLines[1] = nextLine;\n  state.line = nextLine;\n  return true;\n};","map":{"version":3,"sources":["/Users/chrisbuonocore/personal/hackathons/hackfs21/node_modules/markdown-it/lib/rules_block/table.js"],"names":["isSpace","require","getLine","state","line","pos","bMarks","blkIndent","max","eMarks","src","substr","escapedSplit","str","result","length","ch","escapes","lastPos","backTicked","lastBackTick","charCodeAt","push","substring","module","exports","table","startLine","endLine","silent","lineText","i","nextLine","columns","columnCount","token","aligns","t","tableLines","tbodyLines","sCount","tShift","split","trim","test","indexOf","replace","map","attrs","content","children"],"mappings":"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","sourcesContent":["// GFM table, non-standard\n\n'use strict';\n\nvar isSpace = require('../common/utils').isSpace;\n\n\nfunction getLine(state, line) {\n  var pos = state.bMarks[line] + state.blkIndent,\n      max = state.eMarks[line];\n\n  return state.src.substr(pos, max - pos);\n}\n\nfunction escapedSplit(str) {\n  var result = [],\n      pos = 0,\n      max = str.length,\n      ch,\n      escapes = 0,\n      lastPos = 0,\n      backTicked = false,\n      lastBackTick = 0;\n\n  ch  = str.charCodeAt(pos);\n\n  while (pos < max) {\n    if (ch === 0x60/* ` */) {\n      if (backTicked) {\n        // make \\` close code sequence, but not open it;\n        // the reason is: `\\` is correct code block\n        backTicked = false;\n        lastBackTick = pos;\n      } else if (escapes % 2 === 0) {\n        backTicked = true;\n        lastBackTick = pos;\n      }\n    } else if (ch === 0x7c/* | */ && (escapes % 2 === 0) && !backTicked) {\n      result.push(str.substring(lastPos, pos));\n      lastPos = pos + 1;\n    }\n\n    if (ch === 0x5c/* \\ */) {\n      escapes++;\n    } else {\n      escapes = 0;\n    }\n\n    pos++;\n\n    // If there was an un-closed backtick, go back to just after\n    // the last backtick, but as if it was a normal character\n    if (pos === max && backTicked) {\n      backTicked = false;\n      pos = lastBackTick + 1;\n    }\n\n    ch = str.charCodeAt(pos);\n  }\n\n  result.push(str.substring(lastPos));\n\n  return result;\n}\n\n\nmodule.exports = function table(state, startLine, endLine, silent) {\n  var ch, lineText, pos, i, nextLine, columns, columnCount, token,\n      aligns, t, tableLines, tbodyLines;\n\n  // should have at least two lines\n  if (startLine + 2 > endLine) { return false; }\n\n  nextLine = startLine + 1;\n\n  if (state.sCount[nextLine] < state.blkIndent) { return false; }\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[nextLine] - state.blkIndent >= 4) { return false; }\n\n  // first character of the second line should be '|', '-', ':',\n  // and no other characters are allowed but spaces;\n  // basically, this is the equivalent of /^[-:|][-:|\\s]*$/ regexp\n\n  pos = state.bMarks[nextLine] + state.tShift[nextLine];\n  if (pos >= state.eMarks[nextLine]) { return false; }\n\n  ch = state.src.charCodeAt(pos++);\n  if (ch !== 0x7C/* | */ && ch !== 0x2D/* - */ && ch !== 0x3A/* : */) { return false; }\n\n  while (pos < state.eMarks[nextLine]) {\n    ch = state.src.charCodeAt(pos);\n\n    if (ch !== 0x7C/* | */ && ch !== 0x2D/* - */ && ch !== 0x3A/* : */ && !isSpace(ch)) { return false; }\n\n    pos++;\n  }\n\n  lineText = getLine(state, startLine + 1);\n\n  columns = lineText.split('|');\n  aligns = [];\n  for (i = 0; i < columns.length; i++) {\n    t = columns[i].trim();\n    if (!t) {\n      // allow empty columns before and after table, but not in between columns;\n      // e.g. allow ` |---| `, disallow ` ---||--- `\n      if (i === 0 || i === columns.length - 1) {\n        continue;\n      } else {\n        return false;\n      }\n    }\n\n    if (!/^:?-+:?$/.test(t)) { return false; }\n    if (t.charCodeAt(t.length - 1) === 0x3A/* : */) {\n      aligns.push(t.charCodeAt(0) === 0x3A/* : */ ? 'center' : 'right');\n    } else if (t.charCodeAt(0) === 0x3A/* : */) {\n      aligns.push('left');\n    } else {\n      aligns.push('');\n    }\n  }\n\n  lineText = getLine(state, startLine).trim();\n  if (lineText.indexOf('|') === -1) { return false; }\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n  columns = escapedSplit(lineText.replace(/^\\||\\|$/g, ''));\n\n  // header row will define an amount of columns in the entire table,\n  // and align row shouldn't be smaller than that (the rest of the rows can)\n  columnCount = columns.length;\n  if (columnCount > aligns.length) { return false; }\n\n  if (silent) { return true; }\n\n  token     = state.push('table_open', 'table', 1);\n  token.map = tableLines = [ startLine, 0 ];\n\n  token     = state.push('thead_open', 'thead', 1);\n  token.map = [ startLine, startLine + 1 ];\n\n  token     = state.push('tr_open', 'tr', 1);\n  token.map = [ startLine, startLine + 1 ];\n\n  for (i = 0; i < columns.length; i++) {\n    token          = state.push('th_open', 'th', 1);\n    token.map      = [ startLine, startLine + 1 ];\n    if (aligns[i]) {\n      token.attrs  = [ [ 'style', 'text-align:' + aligns[i] ] ];\n    }\n\n    token          = state.push('inline', '', 0);\n    token.content  = columns[i].trim();\n    token.map      = [ startLine, startLine + 1 ];\n    token.children = [];\n\n    token          = state.push('th_close', 'th', -1);\n  }\n\n  token     = state.push('tr_close', 'tr', -1);\n  token     = state.push('thead_close', 'thead', -1);\n\n  token     = state.push('tbody_open', 'tbody', 1);\n  token.map = tbodyLines = [ startLine + 2, 0 ];\n\n  for (nextLine = startLine + 2; nextLine < endLine; nextLine++) {\n    if (state.sCount[nextLine] < state.blkIndent) { break; }\n\n    lineText = getLine(state, nextLine).trim();\n    if (lineText.indexOf('|') === -1) { break; }\n    if (state.sCount[nextLine] - state.blkIndent >= 4) { break; }\n    columns = escapedSplit(lineText.replace(/^\\||\\|$/g, ''));\n\n    token = state.push('tr_open', 'tr', 1);\n    for (i = 0; i < columnCount; i++) {\n      token          = state.push('td_open', 'td', 1);\n      if (aligns[i]) {\n        token.attrs  = [ [ 'style', 'text-align:' + aligns[i] ] ];\n      }\n\n      token          = state.push('inline', '', 0);\n      token.content  = columns[i] ? columns[i].trim() : '';\n      token.children = [];\n\n      token          = state.push('td_close', 'td', -1);\n    }\n    token = state.push('tr_close', 'tr', -1);\n  }\n  token = state.push('tbody_close', 'tbody', -1);\n  token = state.push('table_close', 'table', -1);\n\n  tableLines[1] = tbodyLines[1] = nextLine;\n  state.line = nextLine;\n  return true;\n};\n"]},"metadata":{},"sourceType":"script"}